cscope 15 $HOME/glibc/glibc-src2.20/malloc -q 0000004059 0000404748
	@arena.c

20 
	~<°dboﬁ.h
>

24 
	#HEAP_MIN_SIZE
 (32 * 1024)

	)

25 #i‚de‡
HEAP_MAX_SIZE


26 #ifde‡
DEFAULT_MMAP_THRESHOLD_MAX


27 
	#HEAP_MAX_SIZE
 (2 * 
DEFAULT_MMAP_THRESHOLD_MAX
)

	)

29 
	#HEAP_MAX_SIZE
 (1024 * 1024Ë

	)

42 
	#t›
(
¨_±r
Ë(◊r_±r)->
t›
)

	)

48 
	s_hóp_öfo


50 
m°©e
 
	m¨_±r
;

51 
_hóp_öfo
 *
	m¥ev
;

52 
size_t
 
	msize
;

53 
size_t
 
	mm¥Ÿe˘_size
;

58 
	m∑d
[-6 * 
SIZE_SZ
 & 
MALLOC_ALIGN_MASK
];

59 } 
	thóp_öfo
;

63 
ßnôy_check_hóp_öfo_Æignmít
[( (
hóp_öfo
)

64 + 2 * 
SIZE_SZ
Ë% 
MALLOC_ALIGNMENT


69 
tsd_key_t
 
	g¨ía_key
;

70 
muãx_t
 
	gli°_lock
 = 
MUTEX_INITIALIZER
;

71 
size_t
 
	g«ª«s
 = 1;

72 
m°©e
 
	g‰ì_li°
;

75 
	g¨ía_mem
;

78 
	g__mÆloc_öôülized
 = -1;

91 
	#¨ía_gë
(
±r
, 
size
) do { \

92 
	`¨ía_lookup
 (
±r
); \

93 
	`¨ía_lock
 (
±r
, 
size
); \

94 } 0)

	)

96 
	#¨ía_lookup
(
±r
) do { \

97 *
v±r
 = 
NULL
; \

98 
±r
 = (
m°©e
Ë
	`tsd_gë•ecific
 (
¨ía_key
, 
v±r
); \

99 } 0)

	)

101 
	#¨ía_lock
(
±r
, 
size
) do { \

102 i‡(
±r
) \

103 (Ë
	`muãx_lock
 (&
±r
->
muãx
); \

105 
±r
 = 
	`¨ía_gë2
 (±r, (
size
), 
NULL
); \

106 } 0)

	)

110 
	#hóp_f‹_±r
(
±r
) \

111 ((
hóp_öfo
 *Ë((Ë(
±r
Ë& ~(
HEAP_MAX_SIZE
 - 1)))

	)

112 
	#¨ía_f‹_chunk
(
±r
) \

113 (
	`chunk_n⁄_maö_¨ía
 (
±r
Ë? 
	`hóp_f‹_±r
 (±r)->
¨_±r
 : &
maö_¨ía
)

	)

118 #i‚de‡
NO_THREADS


122 *(*
	gßve_mÆloc_hook
)(
size_t
 
	g__size
, const *);

123 (*
ßve_‰ì_hook
Ë(*
__±r
, const *);

124 *
ßve_¨ía
;

126 #ifde‡
ATFORK_MEM


127 
ATFORK_MEM
;

133 
	#ATFORK_ARENA_PTR
 ((*Ë-1)

	)

139 
	$mÆloc_©f‹k
 (
size_t
 
sz
, c⁄° *
ˇŒî
)

141 *
v±r
 = 
NULL
;

142 *
vi˘im
;

144 
	`tsd_gë•ecific
 (
¨ía_key
, 
v±r
);

145 i‡(
v±r
 =
ATFORK_ARENA_PTR
)

148 i‡(
ßve_mÆloc_hook
 !
mÆloc_check
)

150  
	`_öt_mÆloc
 (&
maö_¨ía
, 
sz
);

154 i‡(
	`t›_check
 () < 0)

157 
vi˘im
 = 
	`_öt_mÆloc
 (&
maö_¨ía
, 
sz
 + 1);

158  
	`mem2mem_check
 (
vi˘im
, 
sz
);

166 (Ë
	`muãx_lock
 (&
li°_lock
);

167 (Ë
	`muãx_u∆ock
 (&
li°_lock
);

168  
	`__libc_mÆloc
 (
sz
);

170 
	}
}

173 
	$‰ì_©f‹k
 (*
mem
, c⁄° *
ˇŒî
)

175 *
v±r
 = 
NULL
;

176 
m°©e
 
¨_±r
;

177 
mchunk±r
 
p
;

179 i‡(
mem
 == 0)

182 
p
 = 
	`mem2chunk
 (
mem
);

184 i‡(
	`chunk_is_mm≠≥d
 (
p
))

186 
	`munm≠_chunk
 (
p
);

190 
¨_±r
 = 
	`¨ía_f‹_chunk
 (
p
);

191 
	`tsd_gë•ecific
 (
¨ía_key
, 
v±r
);

192 
	`_öt_‰ì
 (
¨_±r
, 
p
, 
v±r
 =
ATFORK_ARENA_PTR
);

193 
	}
}

197 
	g©f‹k_ªcursive_˙å
;

206 
	$±mÆloc_lock_Æl
 ()

208 
m°©e
 
¨_±r
;

210 i‡(
__mÆloc_öôülized
 < 1)

213 i‡(
	`muãx_åylock
 (&
li°_lock
))

215 *
my_¨ía
;

216 
	`tsd_gë•ecific
 (
¨ía_key
, 
my_¨ía
);

217 i‡(
my_¨ía
 =
ATFORK_ARENA_PTR
)

220 
out
;

223 (Ë
	`muãx_lock
 (&
li°_lock
);

225 
¨_±r
 = &
maö_¨ía
;; )

227 (Ë
	`muãx_lock
 (&
¨_±r
->
muãx
);

228 
¨_±r
 =ár_±r->
√xt
;

229 i‡(
¨_±r
 =&
maö_¨ía
)

232 
ßve_mÆloc_hook
 = 
__mÆloc_hook
;

233 
ßve_‰ì_hook
 = 
__‰ì_hook
;

234 
__mÆloc_hook
 = 
mÆloc_©f‹k
;

235 
__‰ì_hook
 = 
‰ì_©f‹k
;

237 
	`tsd_gë•ecific
 (
¨ía_key
, 
ßve_¨ía
);

238 
	`tsd_£t•ecific
 (
¨ía_key
, 
ATFORK_ARENA_PTR
);

239 
out
:

240 ++
©f‹k_ªcursive_˙å
;

241 
	}
}

244 
	$±mÆloc_u∆ock_Æl
 ()

246 
m°©e
 
¨_±r
;

248 i‡(
__mÆloc_öôülized
 < 1)

251 i‡(--
©f‹k_ªcursive_˙å
 != 0)

254 
	`tsd_£t•ecific
 (
¨ía_key
, 
ßve_¨ía
);

255 
__mÆloc_hook
 = 
ßve_mÆloc_hook
;

256 
__‰ì_hook
 = 
ßve_‰ì_hook
;

257 
¨_±r
 = &
maö_¨ía
;; )

259 (Ë
	`muãx_u∆ock
 (&
¨_±r
->
muãx
);

260 
¨_±r
 =ár_±r->
√xt
;

261 i‡(
¨_±r
 =&
maö_¨ía
)

264 (Ë
	`muãx_u∆ock
 (&
li°_lock
);

265 
	}
}

267 #ifde‡
__löux__


275 
	$±mÆloc_u∆ock_Æl2
 ()

277 
m°©e
 
¨_±r
;

279 i‡(
__mÆloc_öôülized
 < 1)

282 
	`tsd_£t•ecific
 (
¨ía_key
, 
ßve_¨ía
);

283 
__mÆloc_hook
 = 
ßve_mÆloc_hook
;

284 
__‰ì_hook
 = 
ßve_‰ì_hook
;

285 
‰ì_li°
 = 
NULL
;

286 
¨_±r
 = &
maö_¨ía
;; )

288 
	`muãx_öô
 (&
¨_±r
->
muãx
);

289 i‡(
¨_±r
 !
ßve_¨ía
)

291 
¨_±r
->
√xt_‰ì
 = 
‰ì_li°
;

292 
‰ì_li°
 = 
¨_±r
;

294 
¨_±r
 =ár_±r->
√xt
;

295 i‡(
¨_±r
 =&
maö_¨ía
)

298 
	`muãx_öô
 (&
li°_lock
);

299 
©f‹k_ªcursive_˙å
 = 0;

300 
	}
}

304 
	#±mÆloc_u∆ock_Æl2
 
±mÆloc_u∆ock_Æl


	)

309 
	~<°rög.h
>

310 **
_ívú⁄
;

313 
öã∫Æ_fun˘i⁄


314 
	$√xt_ív_íåy
 (***
posôi⁄
)

316 **
cuºít
 = *
posôi⁄
;

317 *
ªsu…
 = 
NULL
;

319 *
cuºít
 !
NULL
)

321 i‡(
	`__buûtö_ex≥˘
 ((*
cuºít
)[0] == 'M', 0)

322 && (*
cuºít
)[1] == 'A'

323 && (*
cuºít
)[2] == 'L'

324 && (*
cuºít
)[3] == 'L'

325 && (*
cuºít
)[4] == 'O'

326 && (*
cuºít
)[5] == 'C'

327 && (*
cuºít
)[6] == '_')

329 
ªsu…
 = &(*
cuºít
)[7];

332 *
posôi⁄
 = ++
cuºít
;

337 ++
cuºít
;

340  
ªsu…
;

341 
	}
}

344 #ifde‡
SHARED


346 
	$__Áûög_m‹ec‹e
 (
±rdiff_t
 
d
)

348  (*Ë
MORECORE_FAILURE
;

349 
	}
}

351 
dl_›í_hook
 *
_dl_›í_hook
;

352 
libc_hiddí_¥Ÿo
 (
_dl_›í_hook
);

356 
	$±mÆloc_öô
 ()

358 i‡(
__mÆloc_öôülized
 >= 0)

361 
__mÆloc_öôülized
 = 0;

363 #ifde‡
SHARED


366 
Dl_öfo
 
di
;

367 
lök_m≠
 *
l
;

369 i‡(
_dl_›í_hook
 !
NULL


370 || (
	`_dl_addr
 (
±mÆloc_öô
, &
di
, &
l
, 
NULL
) != 0

371 && 
l
->
l_ns
 !
LM_ID_BASE
))

372 
__m‹ec‹e
 = 
__Áûög_m‹ec‹e
;

375 
	`tsd_key_¸óã
 (&
¨ía_key
, 
NULL
);

376 
	`tsd_£t•ecific
 (
¨ía_key
, (*Ë&
maö_¨ía
);

377 
	`thªad_©f‹k
 (
±mÆloc_lock_Æl
, 
±mÆloc_u∆ock_Æl
, 
±mÆloc_u∆ock_Æl2
);

378 c⁄° *
s
 = 
NULL
;

379 i‡(
	`__glibc_likñy
 (
_ívú⁄
 !
NULL
))

381 **
ru≈
 = 
_ívú⁄
;

382 *
ívlöe
;

384 
	`__buûtö_ex≥˘
 ((
ívlöe
 = 
	`√xt_ív_íåy
 (&
ru≈
)Ë!
NULL
,

387 
size_t
 
Àn
 = 
	`°rc•n
 (
ívlöe
, "=");

389 i‡(
ívlöe
[
Àn
] != '=')

395 
Àn
)

398 i‡(
	`memcmp
 (
ívlöe
, "CHECK_", 6) == 0)

399 
s
 = &
ívlöe
[7];

402 i‡(!
	`__buûtö_ex≥˘
 (
__libc_íabÀ_£cuª
, 0))

404 i‡(
	`memcmp
 (
ívlöe
, "TOP_PAD_", 8) == 0)

405 
	`__libc_mÆl›t
 (
M_TOP_PAD
, 
	`©oi
 (&
ívlöe
[9]));

406 i‡(
	`memcmp
 (
ívlöe
, "PERTURB_", 8) == 0)

407 
	`__libc_mÆl›t
 (
M_PERTURB
, 
	`©oi
 (&
ívlöe
[9]));

411 i‡(!
	`__buûtö_ex≥˘
 (
__libc_íabÀ_£cuª
, 0))

413 i‡(
	`memcmp
 (
ívlöe
, "MMAP_MAX_", 9) == 0)

414 
	`__libc_mÆl›t
 (
M_MMAP_MAX
, 
	`©oi
 (&
ívlöe
[10]));

415 i‡(
	`memcmp
 (
ívlöe
, "ARENA_MAX", 9) == 0)

416 
	`__libc_mÆl›t
 (
M_ARENA_MAX
, 
	`©oi
 (&
ívlöe
[10]));

420 i‡(!
	`__buûtö_ex≥˘
 (
__libc_íabÀ_£cuª
, 0))

422 i‡(
	`memcmp
 (
ívlöe
, "ARENA_TEST", 10) == 0)

423 
	`__libc_mÆl›t
 (
M_ARENA_TEST
, 
	`©oi
 (&
ívlöe
[11]));

427 i‡(!
	`__buûtö_ex≥˘
 (
__libc_íabÀ_£cuª
, 0))

429 i‡(
	`memcmp
 (
ívlöe
, "TRIM_THRESHOLD_", 15) == 0)

430 
	`__libc_mÆl›t
 (
M_TRIM_THRESHOLD
, 
	`©oi
 (&
ívlöe
[16]));

431 i‡(
	`memcmp
 (
ívlöe
, "MMAP_THRESHOLD_", 15) == 0)

432 
	`__libc_mÆl›t
 (
M_MMAP_THRESHOLD
, 
	`©oi
 (&
ívlöe
[16]));

440 i‡(
s
 && s[0])

442 
	`__libc_mÆl›t
 (
M_CHECK_ACTION
, (Ë(
s
[0] - '0'));

443 i‡(
check_a˘i⁄
 != 0)

444 
	`__mÆloc_check_öô
 ();

446 (*
hook
Ë(Ë
	`©omic_f‹˚d_ªad
 (
__mÆloc_öôülize_hook
);

447 i‡(
hook
 !
NULL
)

448 (*
hook
)();

449 
__mÆloc_öôülized
 = 1;

450 
	}
}

453 #ifde‡
thªad_©f‹k_°©ic


454 
thªad_©f‹k_°©ic
 (
±mÆloc_lock_Æl
, 
±mÆloc_u∆ock_Æl
, \

455 
±mÆloc_u∆ock_Æl2
)

462 #i‡
MALLOC_DEBUG
 > 1

467 
	$dump_hóp
 (
hóp_öfo
 *
hóp
)

469 *
±r
;

470 
mchunk±r
 
p
;

472 
	`Ârötf
 (
°dîr
, "Hó∞%p, sizê%10lx:\n", 
hóp
, (Ëhóp->
size
);

473 
±r
 = (
hóp
->
¨_±r
 !(
m°©e
) (heap + 1)) ?

474 (*Ë(
hóp
 + 1Ë: (*Ë(hó∞+ 1Ë+  (
mÆloc_°©e
);

475 
p
 = (
mchunk±r
Ë(((Ë
±r
 + 
MALLOC_ALIGN_MASK
) &

476 ~
MALLOC_ALIGN_MASK
);

479 
	`Ârötf
 (
°dîr
, "chunk %∞sizê%10lx", 
p
, (Ëp->
size
);

480 i‡(
p
 =
	`t›
 (
hóp
->
¨_±r
))

482 
	`Ârötf
 (
°dîr
, " (top)\n");

485 i‡(
p
->
size
 =(0 | 
PREV_INUSE
))

487 
	`Ârötf
 (
°dîr
, " (fence)\n");

490 
	`Ârötf
 (
°dîr
, "\n");

491 
p
 = 
	`√xt_chunk
 (p);

493 
	}
}

504 *
	gÆig√d_hóp_¨ó
;

509 
hóp_öfo
 *

510 
öã∫Æ_fun˘i⁄


511 
	$√w_hóp
 (
size_t
 
size
, size_à
t›_∑d
)

513 
size_t
 
∑ge_mask
 = 
	`GLRO
 (
dl_∑gesize
) - 1;

514 *
p1
, *
p2
;

515 
ul
;

516 
hóp_öfo
 *
h
;

518 i‡(
size
 + 
t›_∑d
 < 
HEAP_MIN_SIZE
)

519 
size
 = 
HEAP_MIN_SIZE
;

520 i‡(
size
 + 
t›_∑d
 <
HEAP_MAX_SIZE
)

521 
size
 +
t›_∑d
;

522 i‡(
size
 > 
HEAP_MAX_SIZE
)

525 
size
 = 
HEAP_MAX_SIZE
;

526 
size
 = (sizê+ 
∑ge_mask
) & ~page_mask;

532 
p2
 = 
MAP_FAILED
;

533 i‡(
Æig√d_hóp_¨ó
)

535 
p2
 = (*Ë
	`MMAP
 (
Æig√d_hóp_¨ó
, 
HEAP_MAX_SIZE
, 
PROT_NONE
,

536 
MAP_NORESERVE
);

537 
Æig√d_hóp_¨ó
 = 
NULL
;

538 i‡(
p2
 !
MAP_FAILED
 && ((Ëp2 & (
HEAP_MAX_SIZE
 - 1)))

540 
	`__munm≠
 (
p2
, 
HEAP_MAX_SIZE
);

541 
p2
 = 
MAP_FAILED
;

544 i‡(
p2
 =
MAP_FAILED
)

546 
p1
 = (*Ë
	`MMAP
 (0, 
HEAP_MAX_SIZE
 << 1, 
PROT_NONE
, 
MAP_NORESERVE
);

547 i‡(
p1
 !
MAP_FAILED
)

549 
p2
 = (*Ë(((Ë
p1
 + (
HEAP_MAX_SIZE
 - 1))

550 & ~(
HEAP_MAX_SIZE
 - 1));

551 
ul
 = 
p2
 - 
p1
;

552 i‡(
ul
)

553 
	`__munm≠
 (
p1
, 
ul
);

555 
Æig√d_hóp_¨ó
 = 
p2
 + 
HEAP_MAX_SIZE
;

556 
	`__munm≠
 (
p2
 + 
HEAP_MAX_SIZE
, HEAP_MAX_SIZE - 
ul
);

562 
p2
 = (*Ë
	`MMAP
 (0, 
HEAP_MAX_SIZE
, 
PROT_NONE
, 
MAP_NORESERVE
);

563 i‡(
p2
 =
MAP_FAILED
)

566 i‡((Ë
p2
 & (
HEAP_MAX_SIZE
 - 1))

568 
	`__munm≠
 (
p2
, 
HEAP_MAX_SIZE
);

573 i‡(
	`__m¥Ÿe˘
 (
p2
, 
size
, 
PROT_READ
 | 
PROT_WRITE
) != 0)

575 
	`__munm≠
 (
p2
, 
HEAP_MAX_SIZE
);

578 
h
 = (
hóp_öfo
 *Ë
p2
;

579 
h
->
size
 = size;

580 
h
->
m¥Ÿe˘_size
 = 
size
;

581 
	`LIBC_PROBE
 (
mem‹y_hóp_√w
, 2, 
h
, h->
size
);

582  
h
;

583 
	}
}

589 
	$grow_hóp
 (
hóp_öfo
 *
h
, 
diff
)

591 
size_t
 
∑ge_mask
 = 
	`GLRO
 (
dl_∑gesize
) - 1;

592 
√w_size
;

594 
diff
 = (dif‡+ 
∑ge_mask
) & ~page_mask;

595 
√w_size
 = (Ë
h
->
size
 + 
diff
;

596 i‡((Ë
√w_size
 > (Ë
HEAP_MAX_SIZE
)

599 i‡((Ë
√w_size
 > 
h
->
m¥Ÿe˘_size
)

601 i‡(
	`__m¥Ÿe˘
 ((*Ë
h
 + h->
m¥Ÿe˘_size
,

602 (Ë
√w_size
 - 
h
->
m¥Ÿe˘_size
,

603 
PROT_READ
 | 
PROT_WRITE
) != 0)

606 
h
->
m¥Ÿe˘_size
 = 
√w_size
;

609 
h
->
size
 = 
√w_size
;

610 
	`LIBC_PROBE
 (
mem‹y_hóp_m‹e
, 2, 
h
, h->
size
);

612 
	}
}

617 
	$shrök_hóp
 (
hóp_öfo
 *
h
, 
diff
)

619 
√w_size
;

621 
√w_size
 = (Ë
h
->
size
 - 
diff
;

622 i‡(
√w_size
 < (Ë (*
h
))

627 i‡(
	`__glibc_u∆ikñy
 (
	`check_may_shrök_hóp
 ()))

629 i‡((*Ë
	`MMAP
 ((*Ë
h
 + 
√w_size
, 
diff
, 
PROT_NONE
,

630 
MAP_FIXED
Ë=(*Ë
MAP_FAILED
)

633 
h
->
m¥Ÿe˘_size
 = 
√w_size
;

636 
	`__madvi£
 ((*Ë
h
 + 
√w_size
, 
diff
, 
MADV_DONTNEED
);

639 
h
->
size
 = 
√w_size
;

640 
	`LIBC_PROBE
 (
mem‹y_hóp_Àss
, 2, 
h
, h->
size
);

642 
	}
}

646 
	#dñëe_hóp
(
hóp
) \

648 i‡((*Ë(
hóp
Ë+ 
HEAP_MAX_SIZE
 =
Æig√d_hóp_¨ó
) \

649 
Æig√d_hóp_¨ó
 = 
NULL
; \

650 
	`__munm≠
 ((*Ë(
hóp
), 
HEAP_MAX_SIZE
); \

651 } 0)

	)

654 
öã∫Æ_fun˘i⁄


655 
	$hóp_åim
 (
hóp_öfo
 *
hóp
, 
size_t
 
∑d
)

657 
m°©e
 
¨_±r
 = 
hóp
->ar_ptr;

658 
∑gesz
 = 
	`GLRO
 (
dl_∑gesize
);

659 
mchunk±r
 
t›_chunk
 = 
	`t›
 (
¨_±r
), 
p
, 
bck
, 
fwd
;

660 
hóp_öfo
 *
¥ev_hóp
;

661 
√w_size
, 
t›_size
, 
exåa
, 
¥ev_size
, 
mißlign
;

664 
t›_chunk
 =
	`chunk_©_off£t
 (
hóp
,  (*heap)))

666 
¥ev_hóp
 = 
hóp
->
¥ev
;

667 
¥ev_size
 = 
¥ev_hóp
->
size
 - (
MINSIZE
 - 2 * 
SIZE_SZ
);

668 
p
 = 
	`chunk_©_off£t
 (
¥ev_hóp
, 
¥ev_size
);

670 
mißlign
 = ((Ë
p
Ë& 
MALLOC_ALIGN_MASK
;

671 
p
 = 
	`chunk_©_off£t
 (
¥ev_hóp
, 
¥ev_size
 - 
mißlign
);

672 
	`as£π
 (
p
->
size
 =(0 | 
PREV_INUSE
));

673 
p
 = 
	`¥ev_chunk
 (p);

674 
√w_size
 = 
	`chunksize
 (
p
Ë+ (
MINSIZE
 - 2 * 
SIZE_SZ
Ë+ 
mißlign
;

675 
	`as£π
 (
√w_size
 > 0 &&Çew_sizê< (Ë(2 * 
MINSIZE
));

676 i‡(!
	`¥ev_öu£
 (
p
))

677 
√w_size
 +
p
->
¥ev_size
;

678 
	`as£π
 (
√w_size
 > 0 &&Çew_sizê< 
HEAP_MAX_SIZE
);

679 i‡(
√w_size
 + (
HEAP_MAX_SIZE
 - 
¥ev_hóp
->
size
Ë< 
∑d
 + 
MINSIZE
 + 
∑gesz
)

681 
¨_±r
->
sy°em_mem
 -
hóp
->
size
;

682 
¨ía_mem
 -
hóp
->
size
;

683 
	`LIBC_PROBE
 (
mem‹y_hóp_‰ì
, 2, 
hóp
, hóp->
size
);

684 
	`dñëe_hóp
 (
hóp
);

685 
hóp
 = 
¥ev_hóp
;

686 i‡(!
	`¥ev_öu£
 (
p
))

688 
p
 = 
	`¥ev_chunk
 (p);

689 
	`u∆ök
 (
p
, 
bck
, 
fwd
);

691 
	`as£π
 (((Ë((*Ë
p
 + 
√w_size
Ë& (
∑gesz
 - 1)) == 0);

692 
	`as£π
 (((*Ë
p
 + 
√w_size
Ë=((*Ë
hóp
 + hóp->
size
));

693 
	`t›
 (
¨_±r
Ë
t›_chunk
 = 
p
;

694 
	`£t_hód
 (
t›_chunk
, 
√w_size
 | 
PREV_INUSE
);

697 
t›_size
 = 
	`chunksize
 (
t›_chunk
);

698 
exåa
 = (
t›_size
 - 
∑d
 - 
MINSIZE
 - 1Ë& ~(
∑gesz
 - 1);

699 i‡(
exåa
 < (Ë
∑gesz
)

703 i‡(
	`shrök_hóp
 (
hóp
, 
exåa
) != 0)

706 
¨_±r
->
sy°em_mem
 -
exåa
;

707 
¨ía_mem
 -
exåa
;

710 
	`£t_hód
 (
t›_chunk
, (
t›_size
 - 
exåa
Ë| 
PREV_INUSE
);

713 
	}
}

717 
m°©e


718 
	$_öt_√w_¨ía
 (
size_t
 
size
)

720 
m°©e
 
a
;

721 
hóp_öfo
 *
h
;

722 *
±r
;

723 
mißlign
;

725 
h
 = 
	`√w_hóp
 (
size
 + ( (*hË+  (*
a
Ë+ 
MALLOC_ALIGNMENT
),

726 
mp_
.
t›_∑d
);

727 i‡(!
h
)

732 
h
 = 
	`√w_hóp
 ( (*hË+  (*
a
Ë+ 
MALLOC_ALIGNMENT
, 
mp_
.
t›_∑d
);

733 i‡(!
h
)

736 
a
 = 
h
->
¨_±r
 = (
m°©e
) (h + 1);

737 
	`mÆloc_öô_°©e
 (
a
);

739 
a
->
sy°em_mem
 =á->
max_sy°em_mem
 = 
h
->
size
;

740 
¨ía_mem
 +
h
->
size
;

743 
±r
 = (*Ë(
a
 + 1);

744 
mißlign
 = (Ë
	`chunk2mem
 (
±r
Ë& 
MALLOC_ALIGN_MASK
;

745 i‡(
mißlign
 > 0)

746 
±r
 +
MALLOC_ALIGNMENT
 - 
mißlign
;

747 
	`t›
 (
a
Ë(
mchunk±r
Ë
±r
;

748 
	`£t_hód
 (
	`t›
 (
a
), (((*Ë
h
 + h->
size
Ë- 
±r
Ë| 
PREV_INUSE
);

750 
	`LIBC_PROBE
 (
mem‹y_¨ía_√w
, 2, 
a
, 
size
);

751 
	`tsd_£t•ecific
 (
¨ía_key
, (*Ë
a
);

752 
	`muãx_öô
 (&
a
->
muãx
);

753 (Ë
	`muãx_lock
 (&
a
->
muãx
);

755 (Ë
	`muãx_lock
 (&
li°_lock
);

758 
a
->
√xt
 = 
maö_¨ía
.next;

759 
	`©omic_wrôe_b¨rõr
 ();

760 
maö_¨ía
.
√xt
 = 
a
;

762 (Ë
	`muãx_u∆ock
 (&
li°_lock
);

764  
a
;

765 
	}
}

768 
m°©e


769 
	$gë_‰ì_li°
 ()

771 
m°©e
 
ªsu…
 = 
‰ì_li°
;

772 i‡(
ªsu…
 !
NULL
)

774 (Ë
	`muãx_lock
 (&
li°_lock
);

775 
ªsu…
 = 
‰ì_li°
;

776 i‡(
ªsu…
 !
NULL
)

777 
‰ì_li°
 = 
ªsu…
->
√xt_‰ì
;

778 (Ë
	`muãx_u∆ock
 (&
li°_lock
);

780 i‡(
ªsu…
 !
NULL
)

782 
	`LIBC_PROBE
 (
mem‹y_¨ía_ªu£_‰ì_li°
, 1, 
ªsu…
);

783 (Ë
	`muãx_lock
 (&
ªsu…
->
muãx
);

784 
	`tsd_£t•ecific
 (
¨ía_key
, (*Ë
ªsu…
);

788  
ªsu…
;

789 
	}
}

794 
m°©e


795 
	$ªu£d_¨ía
 (
m°©e
 
avoid_¨ía
)

797 
m°©e
 
ªsu…
;

798 
m°©e
 
√xt_to_u£
;

799 i‡(
√xt_to_u£
 =
NULL
)

800 
√xt_to_u£
 = &
maö_¨ía
;

802 
ªsu…
 = 
√xt_to_u£
;

805 i‡(!
	`muãx_åylock
 (&
ªsu…
->
muãx
))

806 
out
;

808 
ªsu…
 =Ñesu…->
√xt
;

810 
ªsu…
 !
√xt_to_u£
);

814 i‡(
ªsu…
 =
avoid_¨ía
)

815 
ªsu…
 =Ñesu…->
√xt
;

818 
	`LIBC_PROBE
 (
mem‹y_¨ía_ªu£_waô
, 3, &
ªsu…
->
muãx
,Ñesu…, 
avoid_¨ía
);

819 (Ë
	`muãx_lock
 (&
ªsu…
->
muãx
);

821 
out
:

822 
	`LIBC_PROBE
 (
mem‹y_¨ía_ªu£
, 2, 
ªsu…
, 
avoid_¨ía
);

823 
	`tsd_£t•ecific
 (
¨ía_key
, (*Ë
ªsu…
);

824 
√xt_to_u£
 = 
ªsu…
->
√xt
;

826  
ªsu…
;

827 
	}
}

829 
m°©e


830 
öã∫Æ_fun˘i⁄


831 
	$¨ía_gë2
 (
m°©e
 
a_tsd
, 
size_t
 
size
, m°©ê
avoid_¨ía
)

833 
m°©e
 
a
;

835 
size_t
 
«ª«s_limô
;

837 
a
 = 
	`gë_‰ì_li°
 ();

838 i‡(
a
 =
NULL
)

841 i‡(
«ª«s_limô
 == 0)

843 i‡(
mp_
.
¨ía_max
 != 0)

844 
«ª«s_limô
 = 
mp_
.
¨ía_max
;

845 i‡(
«ª«s
 > 
mp_
.
¨ía_ã°
)

847 
n
 = 
	`__gë_≈rocs
 ();

849 i‡(
n
 >= 1)

850 
«ª«s_limô
 = 
	`NARENAS_FROM_NCORES
 (
n
);

854 
«ª«s_limô
 = 
	`NARENAS_FROM_NCORES
 (2);

857 
ª≥©
:;

858 
size_t
 
n
 = 
«ª«s
;

866 i‡(
	`__glibc_u∆ikñy
 (
n
 <
«ª«s_limô
 - 1))

868 i‡(
	`ˇtomic_com∑ª_™d_exch™ge_boﬁ_acq
 (&
«ª«s
, 
n
 + 1,Ç))

869 
ª≥©
;

870 
a
 = 
	`_öt_√w_¨ía
 (
size
);

871 i‡(
	`__glibc_u∆ikñy
 (
a
 =
NULL
))

872 
	`ˇtomic_de¸emít
 (&
«ª«s
);

875 
a
 = 
	`ªu£d_¨ía
 (
avoid_¨ía
);

877  
a
;

878 
	}
}

884 
m°©e


885 
	$¨ía_gë_ªåy
 (
m°©e
 
¨_±r
, 
size_t
 
byãs
)

887 
	`LIBC_PROBE
 (
mem‹y_¨ía_ªåy
, 2, 
byãs
, 
¨_±r
);

888 i‡(
¨_±r
 !&
maö_¨ía
)

890 (Ë
	`muãx_u∆ock
 (&
¨_±r
->
muãx
);

891 
¨_±r
 = &
maö_¨ía
;

892 (Ë
	`muãx_lock
 (&
¨_±r
->
muãx
);

897 
m°©e
 
¥ev
 = 
¨_±r
->
√xt
 ?ár_ptr : 0;

898 (Ë
	`muãx_u∆ock
 (&
¨_±r
->
muãx
);

899 
¨_±r
 = 
	`¨ía_gë2
 (
¥ev
, 
byãs
,ár_ptr);

902  
¨_±r
;

903 
	}
}

905 
__©åibuã__
 ((
£˘i⁄
 ("__libc_thread_freeres_fn")))

906 
	$¨ía_thªad_‰ìªs
 ()

908 *
v±r
 = 
NULL
;

909 
m°©e
 
a
 = 
	`tsd_gë•ecific
 (
¨ía_key
, 
v±r
);

910 
	`tsd_£t•ecific
 (
¨ía_key
, 
NULL
);

912 i‡(
a
 !
NULL
)

914 (Ë
	`muãx_lock
 (&
li°_lock
);

915 
a
->
√xt_‰ì
 = 
‰ì_li°
;

916 
‰ì_li°
 = 
a
;

917 (Ë
	`muãx_u∆ock
 (&
li°_lock
);

919 
	}
}

920 
ãxt_£t_ñemít
 (
__libc_thªad_sub‰ìªs
, 
¨ía_thªad_‰ìªs
);

	@hooks.c

28 
	$mÆloc_hook_öi
 (
size_t
 
sz
, c⁄° *
ˇŒî
)

30 
__mÆloc_hook
 = 
NULL
;

31 
	`±mÆloc_öô
 ();

32  
	`__libc_mÆloc
 (
sz
);

33 
	}
}

36 
	$ªÆloc_hook_öi
 (*
±r
, 
size_t
 
sz
, c⁄° *
ˇŒî
)

38 
__mÆloc_hook
 = 
NULL
;

39 
__ªÆloc_hook
 = 
NULL
;

40 
	`±mÆloc_öô
 ();

41  
	`__libc_ªÆloc
 (
±r
, 
sz
);

42 
	}
}

45 
	$memÆign_hook_öi
 (
size_t
 
Æignmít
, size_à
sz
, c⁄° *
ˇŒî
)

47 
__memÆign_hook
 = 
NULL
;

48 
	`±mÆloc_öô
 ();

49  
	`__libc_memÆign
 (
Æignmít
, 
sz
);

50 
	}
}

53 
	gusög_mÆloc_checkög
;

68 
	gdißŒow_mÆloc_check
;

72 
	$__mÆloc_check_öô
 ()

74 i‡(
dißŒow_mÆloc_check
)

76 
dißŒow_mÆloc_check
 = 0;

79 
usög_mÆloc_checkög
 = 1;

80 
__mÆloc_hook
 = 
mÆloc_check
;

81 
__‰ì_hook
 = 
‰ì_check
;

82 
__ªÆloc_hook
 = 
ªÆloc_check
;

83 
__memÆign_hook
 = 
memÆign_check
;

84 
	}
}

91 
	#MAGICBYTE
(
p
Ë((((
size_t
Ë∞>> 3Ë^ ((size_tË∞>> 11)Ë& 0xFF)

	)

99 
size_t


100 
	$mÆloc_check_gë_size
 (
mchunk±r
 
p
)

102 
size_t
 
size
;

103 
c
;

104 
magic
 = 
	`MAGICBYTE
 (
p
);

106 
	`as£π
 (
usög_mÆloc_checkög
 == 1);

108 
size
 = 
	`chunksize
 (
p
Ë- 1 + (
	`chunk_is_mm≠≥d
 (pË? 0 : 
SIZE_SZ
);

109 (
c
 = ((*Ë
p
)[
size
]Ë!
magic
;

110 
size
 -
c
)

112 i‡(
c
 <0 || 
size
 < (¯+ 2 * 
SIZE_SZ
))

114 
	`mÆloc_¥öãº
 (
check_a˘i⁄
, "malloc_check_get_size: memory corruption",

115 
	`chunk2mem
 (
p
));

121  
size
 - 2 * 
SIZE_SZ
;

122 
	}
}

128 
öã∫Æ_fun˘i⁄


129 
	$mem2mem_check
 (*
±r
, 
size_t
 
sz
)

131 
mchunk±r
 
p
;

132 *
m_±r
 = 
±r
;

133 
size_t
 
i
;

135 i‡(!
±r
)

136  
±r
;

138 
p
 = 
	`mem2chunk
 (
±r
);

139 
i
 = 
	`chunksize
 (
p
Ë- (
	`chunk_is_mm≠≥d
 (pË? 2 * 
SIZE_SZ
 + 1 : SIZE_SZ + 1);

140 
i
 > 
sz
;

141 
i
 -= 0xFF)

143 i‡(
i
 - 
sz
 < 0x100)

145 
m_±r
[
i
] = (Ë(ò- 
sz
);

148 
m_±r
[
i
] = 0xFF;

150 
m_±r
[
sz
] = 
	`MAGICBYTE
 (
p
);

151  (*Ë
m_±r
;

152 
	}
}

157 
mchunk±r


158 
öã∫Æ_fun˘i⁄


159 
	$mem2chunk_check
 (*
mem
, **
magic_p
)

161 
mchunk±r
 
p
;

162 
INTERNAL_SIZE_T
 
sz
, 
c
;

163 
magic
;

165 i‡(!
	`Æig√d_OK
 (
mem
))

166  
NULL
;

168 
p
 = 
	`mem2chunk
 (
mem
);

169 i‡(!
	`chunk_is_mm≠≥d
 (
p
))

172 
c⁄tig
 = 
	`c⁄tiguous
 (&
maö_¨ía
);

173 
sz
 = 
	`chunksize
 (
p
);

174 i‡((
c⁄tig
 &&

175 ((*Ë
p
 < 
mp_
.
sbrk_ba£
 ||

176 ((*Ë
p
 + 
sz
Ë>(
mp_
.
sbrk_ba£
 + 
maö_¨ía
.
sy°em_mem
))) ||

177 
sz
 < 
MINSIZE
 || sz & 
MALLOC_ALIGN_MASK
 || !
	`öu£
 (
p
) ||

178 (!
	`¥ev_öu£
 (
p
Ë&& (p->
¥ev_size
 & 
MALLOC_ALIGN_MASK
 ||

179 (
c⁄tig
 && (*Ë
	`¥ev_chunk
 (
p
Ë< 
mp_
.
sbrk_ba£
) ||

180 
	`√xt_chunk
 (
	`¥ev_chunk
 (
p
)) !=Ö)))

181  
NULL
;

183 
magic
 = 
	`MAGICBYTE
 (
p
);

184 
sz
 +
SIZE_SZ
 - 1; (
c
 = ((*Ë
p
)[sz]Ë!
magic
; sz -= c)

186 i‡(
c
 <0 || 
sz
 < (¯+ 2 * 
SIZE_SZ
))

187  
NULL
;

192 
off£t
, 
∑ge_mask
 = 
	`GLRO
 (
dl_∑gesize
) - 1;

197 
off£t
 = (Ë
mem
 & 
∑ge_mask
;

198 i‡((
off£t
 !
MALLOC_ALIGNMENT
 && offset != 0 && offset != 0x10 &&

199 
off£t
 != 0x20 && offset != 0x40 && offset != 0x80 && offset != 0x100 &&

200 
off£t
 != 0x200 && offset != 0x400 && offset != 0x800 && offset != 0x1000 &&

201 
off£t
 < 0x2000) ||

202 !
	`chunk_is_mm≠≥d
 (
p
Ë|| (p->
size
 & 
PREV_INUSE
) ||

203 ((((Ë
p
 -Ö->
¥ev_size
Ë& 
∑ge_mask
) != 0) ||

204 ((
sz
 = 
	`chunksize
 (
p
)), (’->
¥ev_size
 + szË& 
∑ge_mask
) != 0))

205  
NULL
;

207 
magic
 = 
	`MAGICBYTE
 (
p
);

208 
sz
 -1; (
c
 = ((*Ë
p
)[sz]Ë!
magic
; sz -= c)

210 i‡(
c
 <0 || 
sz
 < (¯+ 2 * 
SIZE_SZ
))

211  
NULL
;

214 ((*Ë
p
)[
sz
] ^= 0xFF;

215 i‡(
magic_p
)

216 *
magic_p
 = (*Ë
p
 + 
sz
;

217  
p
;

218 
	}
}

224 
öã∫Æ_fun˘i⁄


225 
	$t›_check
 ()

227 
mchunk±r
 
t
 = 
	`t›
 (&
maö_¨ía
);

228 *
brk
, *
√w_brk
;

229 
INTERNAL_SIZE_T
 
‰⁄t_mißlign
, 
sbrk_size
;

230 
∑gesz
 = 
	`GLRO
 (
dl_∑gesize
);

232 i‡(
t
 =
	`öôül_t›
 (&
maö_¨ía
) ||

233 (!
	`chunk_is_mm≠≥d
 (
t
) &&

234 
	`chunksize
 (
t
Ë>
MINSIZE
 &&

235 
	`¥ev_öu£
 (
t
) &&

236 (!
	`c⁄tiguous
 (&
maö_¨ía
) ||

237 (*Ë
t
 + 
	`chunksize
 (tË=
mp_
.
sbrk_ba£
 + 
maö_¨ía
.
sy°em_mem
)))

240 
	`mÆloc_¥öãº
 (
check_a˘i⁄
, "mÆloc:Å› chunk i†c‹ru±", 
t
);

243 
brk
 = 
	`MORECORE
 (0);

244 
‰⁄t_mißlign
 = (Ë
	`chunk2mem
 (
brk
Ë& 
MALLOC_ALIGN_MASK
;

245 i‡(
‰⁄t_mißlign
 > 0)

246 
‰⁄t_mißlign
 = 
MALLOC_ALIGNMENT
 - front_misalign;

247 
sbrk_size
 = 
‰⁄t_mißlign
 + 
mp_
.
t›_∑d
 + 
MINSIZE
;

248 
sbrk_size
 +
∑gesz
 - ((Ë(
brk
 + sbrk_size) & (pagesz - 1));

249 
√w_brk
 = (*Ë(
	`MORECORE
 (
sbrk_size
));

250 i‡(
√w_brk
 =(*Ë(
MORECORE_FAILURE
))

252 
	`__£t_î∫o
 (
ENOMEM
);

256 (*
hook
Ë(Ë
	`©omic_f‹˚d_ªad
 (
__a·î_m‹ec‹e_hook
);

257 i‡(
hook
)

258 (*
hook
)();

259 
maö_¨ía
.
sy°em_mem
 = (
√w_brk
 - 
mp_
.
sbrk_ba£
Ë+ 
sbrk_size
;

261 
	`t›
 (&
maö_¨ía
Ë(
mchunk±r
Ë(
brk
 + 
‰⁄t_mißlign
);

262 
	`£t_hód
 (
	`t›
 (&
maö_¨ía
), (
sbrk_size
 - 
‰⁄t_mißlign
Ë| 
PREV_INUSE
);

265 
	}
}

268 
	$mÆloc_check
 (
size_t
 
sz
, c⁄° *
ˇŒî
)

270 *
vi˘im
;

272 i‡(
sz
 + 1 == 0)

274 
	`__£t_î∫o
 (
ENOMEM
);

275  
NULL
;

278 (Ë
	`muãx_lock
 (&
maö_¨ía
.
muãx
);

279 
vi˘im
 = (
	`t›_check
 (Ë>0Ë? 
	`_öt_mÆloc
 (&
maö_¨ía
, 
sz
 + 1Ë: 
NULL
;

280 (Ë
	`muãx_u∆ock
 (&
maö_¨ía
.
muãx
);

281  
	`mem2mem_check
 (
vi˘im
, 
sz
);

282 
	}
}

285 
	$‰ì_check
 (*
mem
, c⁄° *
ˇŒî
)

287 
mchunk±r
 
p
;

289 i‡(!
mem
)

292 (Ë
	`muãx_lock
 (&
maö_¨ía
.
muãx
);

293 
p
 = 
	`mem2chunk_check
 (
mem
, 
NULL
);

294 i‡(!
p
)

296 (Ë
	`muãx_u∆ock
 (&
maö_¨ía
.
muãx
);

298 
	`mÆloc_¥öãº
 (
check_a˘i⁄
, "‰ì(): invÆidÖoöãr", 
mem
);

301 i‡(
	`chunk_is_mm≠≥d
 (
p
))

303 (Ë
	`muãx_u∆ock
 (&
maö_¨ía
.
muãx
);

304 
	`munm≠_chunk
 (
p
);

307 
	`_öt_‰ì
 (&
maö_¨ía
, 
p
, 1);

308 (Ë
	`muãx_u∆ock
 (&
maö_¨ía
.
muãx
);

309 
	}
}

312 
	$ªÆloc_check
 (*
ﬁdmem
, 
size_t
 
byãs
, c⁄° *
ˇŒî
)

314 
INTERNAL_SIZE_T
 
nb
;

315 *
√wmem
 = 0;

316 *
magic_p
;

318 i‡(
byãs
 + 1 == 0)

320 
	`__£t_î∫o
 (
ENOMEM
);

321  
NULL
;

323 i‡(
ﬁdmem
 == 0)

324  
	`mÆloc_check
 (
byãs
, 
NULL
);

326 i‡(
byãs
 == 0)

328 
	`‰ì_check
 (
ﬁdmem
, 
NULL
);

329  
NULL
;

331 (Ë
	`muãx_lock
 (&
maö_¨ía
.
muãx
);

332 c⁄° 
mchunk±r
 
ﬁdp
 = 
	`mem2chunk_check
 (
ﬁdmem
, &
magic_p
);

333 (Ë
	`muãx_u∆ock
 (&
maö_¨ía
.
muãx
);

334 i‡(!
ﬁdp
)

336 
	`mÆloc_¥öãº
 (
check_a˘i⁄
, "ªÆloc(): invÆidÖoöãr", 
ﬁdmem
);

337  
	`mÆloc_check
 (
byãs
, 
NULL
);

339 c⁄° 
INTERNAL_SIZE_T
 
ﬁdsize
 = 
	`chunksize
 (
ﬁdp
);

341 
	`checked_ªque°2size
 (
byãs
 + 1, 
nb
);

342 (Ë
	`muãx_lock
 (&
maö_¨ía
.
muãx
);

344 i‡(
	`chunk_is_mm≠≥d
 (
ﬁdp
))

346 #i‡
HAVE_MREMAP


347 
mchunk±r
 
√wp
 = 
	`mªm≠_chunk
 (
ﬁdp
, 
nb
);

348 i‡(
√wp
)

349 
√wmem
 = 
	`chunk2mem
 (
√wp
);

354 i‡(
ﬁdsize
 - 
SIZE_SZ
 >
nb
)

355 
√wmem
 = 
ﬁdmem
;

359 i‡(
	`t›_check
 () >= 0)

360 
√wmem
 = 
	`_öt_mÆloc
 (&
maö_¨ía
, 
byãs
 + 1);

361 i‡(
√wmem
)

363 
	`mem˝y
 (
√wmem
, 
ﬁdmem
, 
ﬁdsize
 - 2 * 
SIZE_SZ
);

364 
	`munm≠_chunk
 (
ﬁdp
);

371 i‡(
	`t›_check
 () >= 0)

373 
INTERNAL_SIZE_T
 
nb
;

374 
	`checked_ªque°2size
 (
byãs
 + 1, 
nb
);

375 
√wmem
 = 
	`_öt_ªÆloc
 (&
maö_¨ía
, 
ﬁdp
, 
ﬁdsize
, 
nb
);

382 i‡(
√wmem
 =
NULL
)

383 *
magic_p
 ^= 0xFF;

385 (Ë
	`muãx_u∆ock
 (&
maö_¨ía
.
muãx
);

387  
	`mem2mem_check
 (
√wmem
, 
byãs
);

388 
	}
}

391 
	$memÆign_check
 (
size_t
 
Æignmít
, size_à
byãs
, c⁄° *
ˇŒî
)

393 *
mem
;

395 i‡(
Æignmít
 <
MALLOC_ALIGNMENT
)

396  
	`mÆloc_check
 (
byãs
, 
NULL
);

398 i‡(
Æignmít
 < 
MINSIZE
)

399 
Æignmít
 = 
MINSIZE
;

403 i‡(
Æignmít
 > 
SIZE_MAX
 / 2 + 1)

405 
	`__£t_î∫o
 (
EINVAL
);

410 i‡(
byãs
 > 
SIZE_MAX
 - 
Æignmít
 - 
MINSIZE
)

412 
	`__£t_î∫o
 (
ENOMEM
);

417 i‡(!
	`powîof2
 (
Æignmít
))

419 
size_t
 
a
 = 
MALLOC_ALIGNMENT
 * 2;

420 
a
 < 
Æignmít
)

421 
a
 <<= 1;

422 
Æignmít
 = 
a
;

425 (Ë
	`muãx_lock
 (&
maö_¨ía
.
muãx
);

426 
mem
 = (
	`t›_check
 (Ë>0Ë? 
	`_öt_memÆign
 (&
maö_¨ía
, 
Æignmít
, 
byãs
 + 1) :

427 
NULL
;

428 (Ë
	`muãx_u∆ock
 (&
maö_¨ía
.
muãx
);

429  
	`mem2mem_check
 (
mem
, 
byãs
);

430 
	}
}

449 
	#MALLOC_STATE_MAGIC
 0x444c4541l

	)

450 
	#MALLOC_STATE_VERSION
 (0 * 0x100»+ 4lË

	)

452 
	smÆloc_ßve_°©e


454 
	mmagic
;

455 
	mvîsi⁄
;

456 
mbö±r
 
	mav
[
NBINS
 * 2 + 2];

457 *
	msbrk_ba£
;

458 
	msbrked_mem_byãs
;

459 
	måim_thªshﬁd
;

460 
	mt›_∑d
;

461 
	mn_mm≠s_max
;

462 
	mmm≠_thªshﬁd
;

463 
	mcheck_a˘i⁄
;

464 
	mmax_sbrked_mem
;

465 
	mmax_tŸÆ_mem
;

466 
	mn_mm≠s
;

467 
	mmax_n_mm≠s
;

468 
	mmm≠≥d_mem
;

469 
	mmax_mm≠≥d_mem
;

470 
	musög_mÆloc_checkög
;

471 
	mmax_Á°
;

472 
	m¨ía_ã°
;

473 
	m¨ía_max
;

474 
	m«ª«s
;

478 
	$__mÆloc_gë_°©e
 ()

480 
mÆloc_ßve_°©e
 *
ms
;

481 
i
;

482 
mbö±r
 
b
;

484 
ms
 = (
mÆloc_ßve_°©e
 *Ë
	`__libc_mÆloc
 ( (*ms));

485 i‡(!
ms
)

488 (Ë
	`muãx_lock
 (&
maö_¨ía
.
muãx
);

489 
	`mÆloc_c⁄sﬁid©e
 (&
maö_¨ía
);

490 
ms
->
magic
 = 
MALLOC_STATE_MAGIC
;

491 
ms
->
vîsi⁄
 = 
MALLOC_STATE_VERSION
;

492 
ms
->
av
[0] = 0;

493 
ms
->
av
[1] = 0;

494 
ms
->
av
[2] = 
	`t›
 (&
maö_¨ía
);

495 
ms
->
av
[3] = 0;

496 
i
 = 1; i < 
NBINS
; i++)

498 
b
 = 
	`bö_©
 (&
maö_¨ía
, 
i
);

499 i‡(
	`fú°
 (
b
) == b)

500 
ms
->
av
[2 * 
i
 + 2] = ms->av[2 * i + 3] = 0;

503 
ms
->
av
[2 * 
i
 + 2] = 
	`fú°
 (
b
);

504 
ms
->
av
[2 * 
i
 + 3] = 
	`œ°
 (
b
);

507 
ms
->
sbrk_ba£
 = 
mp_
.sbrk_base;

508 
ms
->
sbrked_mem_byãs
 = 
maö_¨ía
.
sy°em_mem
;

509 
ms
->
åim_thªshﬁd
 = 
mp_
.trim_threshold;

510 
ms
->
t›_∑d
 = 
mp_
.top_pad;

511 
ms
->
n_mm≠s_max
 = 
mp_
.n_mmaps_max;

512 
ms
->
mm≠_thªshﬁd
 = 
mp_
.mmap_threshold;

513 
ms
->
check_a˘i⁄
 = check_action;

514 
ms
->
max_sbrked_mem
 = 
maö_¨ía
.
max_sy°em_mem
;

515 
ms
->
max_tŸÆ_mem
 = 0;

516 
ms
->
n_mm≠s
 = 
mp_
.n_mmaps;

517 
ms
->
max_n_mm≠s
 = 
mp_
.max_n_mmaps;

518 
ms
->
mm≠≥d_mem
 = 
mp_
.mmapped_mem;

519 
ms
->
max_mm≠≥d_mem
 = 
mp_
.max_mmapped_mem;

520 
ms
->
usög_mÆloc_checkög
 = using_malloc_checking;

521 
ms
->
max_Á°
 = 
	`gë_max_Á°
 ();

522 
ms
->
¨ía_ã°
 = 
mp_
.arena_test;

523 
ms
->
¨ía_max
 = 
mp_
.arena_max;

524 
ms
->
«ª«s
 =Çarenas;

525 (Ë
	`muãx_u∆ock
 (&
maö_¨ía
.
muãx
);

526  (*Ë
ms
;

527 
	}
}

530 
	$__mÆloc_£t_°©e
 (*
m•å
)

532 
mÆloc_ßve_°©e
 *
ms
 = (mÆloc_ßve_°©ê*Ë
m•å
;

533 
size_t
 
i
;

534 
mbö±r
 
b
;

536 
dißŒow_mÆloc_check
 = 1;

537 
	`±mÆloc_öô
 ();

538 i‡(
ms
->
magic
 !
MALLOC_STATE_MAGIC
)

542 i‡((
ms
->
vîsi⁄
 & ~0xfÊË> (
MALLOC_STATE_VERSION
 & ~0xffl))

545 (Ë
	`muãx_lock
 (&
maö_¨ía
.
muãx
);

547 
	`˛ór_Á°chunks
 (&
maö_¨ía
);

548 i‡(
ms
->
vîsi⁄
 >= 4)

549 
	`£t_max_Á°
 (
ms
->
max_Á°
);

551 
	`£t_max_Á°
 (64);

552 
i
 = 0; i < 
NFASTBINS
; ++i)

553 
	`Á°bö
 (&
maö_¨ía
, 
i
) = 0;

554 
i
 = 0; i < 
BINMAPSIZE
; ++i)

555 
maö_¨ía
.
böm≠
[
i
] = 0;

556 
	`t›
 (&
maö_¨ía
Ë
ms
->
av
[2];

557 
maö_¨ía
.
œ°_ªmaödî
 = 0;

558 
i
 = 1; i < 
NBINS
; i++)

560 
b
 = 
	`bö_©
 (&
maö_¨ía
, 
i
);

561 i‡(
ms
->
av
[2 * 
i
 + 2] == 0)

563 
	`as£π
 (
ms
->
av
[2 * 
i
 + 3] == 0);

564 
	`fú°
 (
b
Ë
	`œ°
 (b) = b;

568 i‡(
ms
->
vîsi⁄
 >= 3 &&

569 (
i
 < 
NSMALLBINS
 || (
	`œrgebö_ödex
 (
	`chunksize
 (
ms
->
av
[2 * i + 2])) == i &&

570 
	`œrgebö_ödex
 (
	`chunksize
 (
ms
->
av
[2 * 
i
 + 3])) == i)))

572 
	`fú°
 (
b
Ë
ms
->
av
[2 * 
i
 + 2];

573 
	`œ°
 (
b
Ë
ms
->
av
[2 * 
i
 + 3];

575 
	`fú°
 (
b
)->
bk
 = b;

576 
	`œ°
 (
b
)->
fd
 = b;

578 
	`m¨k_bö
 (&
maö_¨ía
, 
i
);

584 
	`fú°
 (
b
Ë
	`œ°
 (b) = b;

585 
b
 = 
	`uns‹ãd_chunks
 (&
maö_¨ía
);

586 
ms
->
av
[2 * 
i
 + 2]->
bk
 = 
b
;

587 
ms
->
av
[2 * 
i
 + 3]->
fd
 = 
b
->fd;

588 
b
->
fd
->
bk
 = 
ms
->
av
[2 * 
i
 + 3];

589 
b
->
fd
 = 
ms
->
av
[2 * 
i
 + 2];

593 i‡(
ms
->
vîsi⁄
 < 3)

596 
b
 = 
	`uns‹ãd_chunks
 (&
maö_¨ía
)->
fd
;

597 
b
 !
	`uns‹ãd_chunks
 (&
maö_¨ía
))

599 i‡(!
	`ö_smÆlbö_ønge
 (
	`chunksize
 (
b
)))

601 
b
->
fd_√xtsize
 = 
NULL
;

602 
b
->
bk_√xtsize
 = 
NULL
;

604 
b
 = b->
fd
;

607 
mp_
.
sbrk_ba£
 = 
ms
->sbrk_base;

608 
maö_¨ía
.
sy°em_mem
 = 
ms
->
sbrked_mem_byãs
;

609 
mp_
.
åim_thªshﬁd
 = 
ms
->trim_threshold;

610 
mp_
.
t›_∑d
 = 
ms
->top_pad;

611 
mp_
.
n_mm≠s_max
 = 
ms
->n_mmaps_max;

612 
mp_
.
mm≠_thªshﬁd
 = 
ms
->mmap_threshold;

613 
check_a˘i⁄
 = 
ms
->check_action;

614 
maö_¨ía
.
max_sy°em_mem
 = 
ms
->
max_sbrked_mem
;

615 
mp_
.
n_mm≠s
 = 
ms
->n_mmaps;

616 
mp_
.
max_n_mm≠s
 = 
ms
->max_n_mmaps;

617 
mp_
.
mm≠≥d_mem
 = 
ms
->mmapped_mem;

618 
mp_
.
max_mm≠≥d_mem
 = 
ms
->max_mmapped_mem;

620 i‡(
ms
->
vîsi⁄
 >= 1)

624 i‡(
ms
->
usög_mÆloc_checkög
 && !using_malloc_checking &&

625 !
dißŒow_mÆloc_check
)

626 
	`__mÆloc_check_öô
 ();

627 i‡(!
ms
->
usög_mÆloc_checkög
 && using_malloc_checking)

629 
__mÆloc_hook
 = 
NULL
;

630 
__‰ì_hook
 = 
NULL
;

631 
__ªÆloc_hook
 = 
NULL
;

632 
__memÆign_hook
 = 
NULL
;

633 
usög_mÆloc_checkög
 = 0;

636 i‡(
ms
->
vîsi⁄
 >= 4)

638 
mp_
.
¨ía_ã°
 = 
ms
->arena_test;

639 
mp_
.
¨ía_max
 = 
ms
->arena_max;

640 
«ª«s
 = 
ms
->narenas;

642 
	`check_mÆloc_°©e
 (&
maö_¨ía
);

644 (Ë
	`muãx_u∆ock
 (&
maö_¨ía
.
muãx
);

646 
	}
}

	@malloc.c

212 

	)

215 
	~<°ddef.h
>

216 
	~<°dlib.h
>

217 
	~<uni°d.h
>

219 
	~<mÆloc-machöe.h
>

220 
	~<mÆloc-sysdï.h
>

222 
	~<©omic.h
>

223 
	~<_ôﬂ.h
>

224 
	~<bôs/w‹dsize.h
>

225 
	~<sys/sysöfo.h
>

227 
	~<ldsodefs.h
>

229 
	~<uni°d.h
>

230 
	~<°dio.h
>

231 
	~<î∫o.h
>

233 
	~<shlib-com∑t.h
>

236 
	~<°döt.h
>

239 
	~<°d¨g.h
>

242 
	~<sys/∑øm.h
>

273 #i‚de‡
MALLOC_DEBUG


274 
	#MALLOC_DEBUG
 0

	)

277 #ifde‡
NDEBUG


278 
	#as£π
(
ex¥
Ë((Ë0)

	)

280 
	#as£π
(
ex¥
) \

281 ((
ex¥
) \

283 : 
	`__mÆloc_as£π
 (
	`__STRING
 (
ex¥
), 
__FILE__
, 
__LINE__
, 
__func__
))

	)

285 c⁄° *
__¥og«me
;

288 
	$__mÆloc_as£π
 (c⁄° *
as£πi⁄
, c⁄° *
fûe
, 
löe
,

289 c⁄° *
fun˘i⁄
)

291 (Ë
	`__fx¥ötf
 (
NULL
, "%s%s%s:%u: %s%sAssertion `%s' failed.\n",

292 
__¥og«me
, __progname[0] ? ": " : "",

293 
fûe
, 
löe
,

294 
fun˘i⁄
 ? function : "", function ? ": " : "",

295 
as£πi⁄
);

296 
	`fÊush
 (
°dîr
);

297 
	`ab‹t
 ();

298 
	}
}

333 #i‚de‡
INTERNAL_SIZE_T


334 
	#INTERNAL_SIZE_T
 
size_t


	)

338 
	#SIZE_SZ
 ((
INTERNAL_SIZE_T
))

	)

350 #i‚de‡
MALLOC_ALIGNMENT


351 #i‡!
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_16
)

360 
	#MALLOC_ALIGNMENT
 (2 *
SIZE_SZ
 < 
	`__Æignof__
 () \

361 ? 
	`__Æignof__
 (Ë: 2 *
SIZE_SZ
)

	)

363 
	#MALLOC_ALIGNMENT
 (2 *
SIZE_SZ
)

	)

368 
	#MALLOC_ALIGN_MASK
 (
MALLOC_ALIGNMENT
 - 1)

	)

379 #i‚de‡
REALLOC_ZERO_BYTES_FREES


380 
	#REALLOC_ZERO_BYTES_FREES
 1

	)

399 #i‚de‡
TRIM_FASTBINS


400 
	#TRIM_FASTBINS
 0

	)

405 
	#MORECORE
 (*
__m‹ec‹e
)

	)

406 
	#MORECORE_FAILURE
 0

	)

407 * 
__deÁu…_m‹ec‹e
 (
±rdiff_t
);

408 *(*
	g__m‹ec‹e
)(
	g±rdiff_t
Ë
__deÁu…_m‹ec‹e
;

411 
	~<°rög.h
>

425 #i‚de‡
MORECORE


426 
	#MORECORE
 
sbrk


	)

436 #i‚de‡
MORECORE_FAILURE


437 
	#MORECORE_FAILURE
 (-1)

	)

450 #i‚de‡
MORECORE_CONTIGUOUS


451 
	#MORECORE_CONTIGUOUS
 1

	)

472 #i‚de‡
MORECORE_CLEARS


473 
	#MORECORE_CLEARS
 1

	)

489 #i‚de‡
MMAP_AS_MORECORE_SIZE


490 
	#MMAP_AS_MORECORE_SIZE
 (1024 * 1024)

	)

498 #i‚de‡
HAVE_MREMAP


499 
	#HAVE_MREMAP
 0

	)

536 * 
__libc_mÆloc
(
size_t
);

537 
	$libc_hiddí_¥Ÿo
 (
__libc_mÆloc
)

550 
	`__libc_‰ì
(*);

551 
	$libc_hiddí_¥Ÿo
 (
__libc_‰ì
)

558 * 
	`__libc_ˇŒoc
(
size_t
, size_t);

587 * 
	`__libc_ªÆloc
(*, 
size_t
);

588 
	$libc_hiddí_¥Ÿo
 (
__libc_ªÆloc
)

602 * 
	`__libc_memÆign
(
size_t
, size_t);

603 
	$libc_hiddí_¥Ÿo
 (
__libc_memÆign
)

610 * 
	`__libc_vÆloc
(
size_t
);

635 
	`__libc_mÆl›t
(, );

636 
	$libc_hiddí_¥Ÿo
 (
__libc_mÆl›t
)

662 
mÆlöfo
 
	`__libc_mÆlöfo
();

670 * 
	`__libc_pvÆloc
(
size_t
);

696 
	`__mÆloc_åim
(
size_t
);

713 
size_t
 
	`__mÆloc_ußbÀ_size
(*);

735 
	`__mÆloc_°©s
();

743 * 
	`__mÆloc_gë_°©e
();

751 
	`__mÆloc_£t_°©e
(*);

758 
	`__posix_memÆign
(**, 
size_t
, size_t);

789 #i‚de‡
M_MXFAST


790 
	#M_MXFAST
 1

	)

793 #i‚de‡
DEFAULT_MXFAST


794 
	#DEFAULT_MXFAST
 (64 * 
SIZE_SZ
 / 4)

	)

858 
	#M_TRIM_THRESHOLD
 -1

	)

860 #i‚de‡
DEFAULT_TRIM_THRESHOLD


861 
	#DEFAULT_TRIM_THRESHOLD
 (128 * 1024)

	)

891 
	#M_TOP_PAD
 -2

	)

893 #i‚de‡
DEFAULT_TOP_PAD


894 
	#DEFAULT_TOP_PAD
 (0)

	)

902 #i‚de‡
DEFAULT_MMAP_THRESHOLD_MIN


903 
	#DEFAULT_MMAP_THRESHOLD_MIN
 (128 * 1024)

	)

906 #i‚de‡
DEFAULT_MMAP_THRESHOLD_MAX


911 #i‡
__WORDSIZE
 == 32

912 
	#DEFAULT_MMAP_THRESHOLD_MAX
 (512 * 1024)

	)

914 
	#DEFAULT_MMAP_THRESHOLD_MAX
 (4 * 1024 * 1024 * ())

	)

1010 
	#M_MMAP_THRESHOLD
 -3

	)

1012 #i‚de‡
DEFAULT_MMAP_THRESHOLD


1013 
	#DEFAULT_MMAP_THRESHOLD
 
DEFAULT_MMAP_THRESHOLD_MIN


	)

1027 
	#M_MMAP_MAX
 -4

	)

1029 #i‚de‡
DEFAULT_MMAP_MAX


1030 
	#DEFAULT_MMAP_MAX
 (65536)

	)

1033 
	~<mÆloc.h
>

1035 #i‚de‡
RETURN_ADDRESS


1036 
	#RETURN_ADDRESS
(
X_
Ë(
NULL
)

	)

1042 #i‚de‡
öã∫Æ_fun˘i⁄


1043 
	#öã∫Æ_fun˘i⁄


	)

1047 
mÆloc_chunk
;

1048 
mÆloc_chunk
* 
	tmchunk±r
;

1052 * 
	`_öt_mÆloc
(
m°©e
, 
size_t
);

1053 
	`_öt_‰ì
(
m°©e
, 
mchunk±r
, );

1054 * 
	`_öt_ªÆloc
(
m°©e
, 
mchunk±r
, 
INTERNAL_SIZE_T
,

1055 
INTERNAL_SIZE_T
);

1056 * 
	`_öt_memÆign
(
m°©e
, 
size_t
, size_t);

1057 * 
	`_mid_memÆign
(
size_t
, size_t, *);

1059 
	`mÆloc_¥öãº
(
a˘i⁄
, c⁄° *
°r
, *
±r
);

1061 * 
öã∫Æ_fun˘i⁄
 
	`mem2mem_check
(*
p
, 
size_t
 
sz
);

1062 
öã∫Æ_fun˘i⁄
 
	`t›_check
();

1063 
öã∫Æ_fun˘i⁄
 
	`munm≠_chunk
(
mchunk±r
 
p
);

1064 #i‡
HAVE_MREMAP


1065 
mchunk±r
 
öã∫Æ_fun˘i⁄
 
	`mªm≠_chunk
(mchunk±∏
p
, 
size_t
 
√w_size
);

1068 * 
	`mÆloc_check
(
size_t
 
sz
, c⁄° *
ˇŒî
);

1069 
	`‰ì_check
(* 
mem
, c⁄° *
ˇŒî
);

1070 * 
	`ªÆloc_check
(* 
ﬁdmem
, 
size_t
 
byãs
,

1071 c⁄° *
ˇŒî
);

1072 * 
	`memÆign_check
(
size_t
 
Æignmít
, size_à
byãs
,

1073 c⁄° *
ˇŒî
);

1074 #i‚de‡
NO_THREADS


1075 * 
	`mÆloc_©f‹k
(
size_t
 
sz
, c⁄° *
ˇŒî
);

1076 
	`‰ì_©f‹k
(* 
mem
, c⁄° *
ˇŒî
);

1082 
	~<f˙é.h
>

1083 
	~<sys/mm™.h
>

1085 #i‡!
	`deföed
(
MAP_ANONYMOUS
Ë&& deföed(
MAP_ANON
)

1086 
	#MAP_ANONYMOUS
 
MAP_ANON


	)

1089 #i‚de‡
MAP_NORESERVE


1090 
	#MAP_NORESERVE
 0

	)

1093 
	#MMAP
(
addr
, 
size
, 
¥Ÿ
, 
Êags
) \

1094 
	`__mm≠
((
addr
), (
size
), (
¥Ÿ
), (
Êags
)|
MAP_ANONYMOUS
|
MAP_PRIVATE
, -1, 0)

	)

1108 
	smÆloc_chunk
 {

1110 
INTERNAL_SIZE_T
 
¥ev_size
;

1111 
INTERNAL_SIZE_T
 
size
;

1113 
mÆloc_chunk
* 
fd
;

1114 
mÆloc_chunk
* 
bk
;

1117 
mÆloc_chunk
* 
fd_√xtsize
;

1118 
mÆloc_chunk
* 
bk_√xtsize
;

1215 
	#chunk2mem
(
p
Ë((*)((*)’Ë+ 2*
SIZE_SZ
))

	)

1216 
	#mem2chunk
(
mem
Ë((
mchunk±r
)((*)(memË- 2*
SIZE_SZ
))

	)

1219 
	#MIN_CHUNK_SIZE
 (
	`off£tof
(
mÆloc_chunk
, 
fd_√xtsize
))

	)

1223 
	#MINSIZE
 \

1224 ()(((
MIN_CHUNK_SIZE
+
MALLOC_ALIGN_MASK
Ë& ~MALLOC_ALIGN_MASK))

	)

1228 
	#Æig√d_OK
(
m
Ë((()(mË& 
MALLOC_ALIGN_MASK
Ë=0)

	)

1230 
	#mißlig√d_chunk
(
p
) \

1231 ((
uöçå_t
)(
MALLOC_ALIGNMENT
 =2 * 
SIZE_SZ
 ? (
p
Ë: 
	`chunk2mem
 (p)) \

1232 & 
MALLOC_ALIGN_MASK
)

	)

1241 
	#REQUEST_OUT_OF_RANGE
(
ªq
) \

1242 ((Ë(
ªq
) >= \

1243 (Ë(
INTERNAL_SIZE_T
Ë(-2 * 
MINSIZE
))

	)

1247 
	#ªque°2size
(
ªq
) \

1248 (((
ªq
Ë+ 
SIZE_SZ
 + 
MALLOC_ALIGN_MASK
 < 
MINSIZE
) ? \

1249 
MINSIZE
 : \

1250 ((
ªq
Ë+ 
SIZE_SZ
 + 
MALLOC_ALIGN_MASK
Ë& ~MALLOC_ALIGN_MASK)

	)

1254 
	#checked_ªque°2size
(
ªq
, 
sz
) \

1255 i‡(
	`REQUEST_OUT_OF_RANGE
 (
ªq
)) { \

1256 
	`__£t_î∫o
 (
ENOMEM
); \

1258 
	}
} \

1259 (
sz
Ë
	`ªque°2size
 (
ªq
);

	)

1267 
	#PREV_INUSE
 0x1

	)

1270 
	#¥ev_öu£
(
p
Ë(’)->
size
 & 
PREV_INUSE
)

	)

1274 
	#IS_MMAPPED
 0x2

	)

1277 
	#chunk_is_mm≠≥d
(
p
Ë(’)->
size
 & 
IS_MMAPPED
)

	)

1283 
	#NON_MAIN_ARENA
 0x4

	)

1286 
	#chunk_n⁄_maö_¨ía
(
p
Ë(’)->
size
 & 
NON_MAIN_ARENA
)

	)

1297 
	#SIZE_BITS
 (
PREV_INUSE
 | 
IS_MMAPPED
 | 
NON_MAIN_ARENA
)

	)

1300 
	#chunksize
(
p
Ë(’)->
size
 & ~(
SIZE_BITS
))

	)

1304 
	#√xt_chunk
(
p
Ë((
mchunk±r
Ë(((*Ë’)Ë+ (’)->
size
 & ~
SIZE_BITS
)))

	)

1307 
	#¥ev_chunk
(
p
Ë((
mchunk±r
Ë(((*Ë’)Ë- (’)->
¥ev_size
)))

	)

1310 
	#chunk_©_off£t
(
p
, 
s
Ë((
mchunk±r
Ë(((*Ë’)Ë+ (s)))

	)

1313 
	#öu£
(
p
) \

1314 ((((
mchunk±r
Ë(((*Ë(
p
)Ë+ (’)->
size
 & ~
SIZE_BITS
)))->sizeË& 
PREV_INUSE
)

	)

1317 
	#£t_öu£
(
p
) \

1318 ((
mchunk±r
Ë(((*Ë(
p
)Ë+ (’)->
size
 & ~
SIZE_BITS
)))->sizê|
PREV_INUSE


	)

1320 
	#˛ór_öu£
(
p
) \

1321 ((
mchunk±r
Ë(((*Ë(
p
)Ë+ (’)->
size
 & ~
SIZE_BITS
)))->sizê&~(
PREV_INUSE
)

	)

1325 
	#öu£_bô_©_off£t
(
p
, 
s
) \

1326 (((
mchunk±r
Ë(((*Ë(
p
)Ë+ (
s
)))->
size
 & 
PREV_INUSE
)

	)

1328 
	#£t_öu£_bô_©_off£t
(
p
, 
s
) \

1329 (((
mchunk±r
Ë(((*Ë(
p
)Ë+ (
s
)))->
size
 |
PREV_INUSE
)

	)

1331 
	#˛ór_öu£_bô_©_off£t
(
p
, 
s
) \

1332 (((
mchunk±r
Ë(((*Ë(
p
)Ë+ (
s
)))->
size
 &~(
PREV_INUSE
))

	)

1336 
	#£t_hód_size
(
p
, 
s
Ë(’)->
size
 = ((’)->sizê& 
SIZE_BITS
Ë| (s)))

	)

1339 
	#£t_hód
(
p
, 
s
Ë(’)->
size
 = (s))

	)

1342 
	#£t_foŸ
(
p
, 
s
Ë(((
mchunk±r
Ë((*Ë’Ë+ (s)))->
¥ev_size
 = (s))

	)

1396 
mÆloc_chunk
 *
	tmbö±r
;

1399 
	#bö_©
(
m
, 
i
) \

1400 (
mbö±r
Ë(((*Ë&((
m
)->
bös
[((
i
) - 1) * 2])) \

1401 - 
	`off£tof
 (
mÆloc_chunk
, 
fd
))

	)

1404 
	#√xt_bö
(
b
Ë((
mbö±r
Ë((*Ë(bË+ ( (
mchunk±r
Ë<< 1)))

	)

1407 
	#fú°
(
b
Ë((b)->
fd
)

	)

1408 
	#œ°
(
b
Ë((b)->
bk
)

	)

1411 
	#u∆ök
(
P
, 
BK
, 
FD
) { \

1412 
FD
 = 
P
->
fd
; \

1413 
BK
 = 
P
->
bk
; \

1414 i‡(
	`__buûtö_ex≥˘
 (
FD
->
bk
 !
P
 || 
BK
->
fd
 != P, 0)) \

1415 
	`mÆloc_¥öãº
 (
check_a˘i⁄
, "c‹ru±ed doubÀ-lökedÜi°", 
P
); \

1417 
FD
->
bk
 = 
BK
; \

1418 
BK
->
fd
 = 
FD
; \

1419 i‡(!
	`ö_smÆlbö_ønge
 (
P
->
size
) \

1420 && 
	`__buûtö_ex≥˘
 (
P
->
fd_√xtsize
 !
NULL
, 0)) { \

1421 
	`as£π
 (
P
->
fd_√xtsize
->
bk_√xtsize
 == P); \

1422 
	`as£π
 (
P
->
bk_√xtsize
->
fd_√xtsize
 == P); \

1423 i‡(
FD
->
fd_√xtsize
 =
NULL
) { \

1424 i‡(
P
->
fd_√xtsize
 == P) \

1425 
FD
->
fd_√xtsize
 = FD->
bk_√xtsize
 = FD; \

1427 
FD
->
fd_√xtsize
 = 
P
->fd_nextsize; \

1428 
FD
->
bk_√xtsize
 = 
P
->bk_nextsize; \

1429 
P
->
fd_√xtsize
->
bk_√xtsize
 = 
FD
; \

1430 
P
->
bk_√xtsize
->
fd_√xtsize
 = 
FD
; \

1433 
P
->
fd_√xtsize
->
bk_√xtsize
 = P->bk_nextsize; \

1434 
P
->
bk_√xtsize
->
fd_√xtsize
 = P->fd_nextsize; \

1438 }

	)

1464 
	#NBINS
 128

	)

1465 
	#NSMALLBINS
 64

	)

1466 
	#SMALLBIN_WIDTH
 
MALLOC_ALIGNMENT


	)

1467 
	#SMALLBIN_CORRECTION
 (
MALLOC_ALIGNMENT
 > 2 * 
SIZE_SZ
)

	)

1468 
	#MIN_LARGE_SIZE
 ((
NSMALLBINS
 - 
SMALLBIN_CORRECTION
Ë* 
SMALLBIN_WIDTH
)

	)

1470 
	#ö_smÆlbö_ønge
(
sz
) \

1471 ((Ë(
sz
Ë< (Ë
MIN_LARGE_SIZE
)

	)

1473 
	#smÆlbö_ödex
(
sz
) \

1474 ((
SMALLBIN_WIDTH
 =16 ? (((Ë(
sz
)) >> 4) : ((() (sz)) >> 3))\

1475 + 
SMALLBIN_CORRECTION
)

	)

1477 
	#œrgebö_ödex_32
(
sz
) \

1478 (((((Ë(
sz
)) >> 6) <= 38) ? 56 + ((() (sz)) >> 6) :\

1479 ((((Ë(
sz
)) >> 9) <= 20) ? 91 + ((() (sz)) >> 9) :\

1480 ((((Ë(
sz
)) >> 12) <= 10) ? 110 + ((() (sz)) >> 12) :\

1481 ((((Ë(
sz
)) >> 15) <= 4) ? 119 + ((() (sz)) >> 15) :\

1482 ((((Ë(
sz
)) >> 18) <= 2) ? 124 + ((() (sz)) >> 18) :\

1483 126)

	)

1485 
	#œrgebö_ödex_32_big
(
sz
) \

1486 (((((Ë(
sz
)) >> 6) <= 45) ? 49 + ((() (sz)) >> 6) :\

1487 ((((Ë(
sz
)) >> 9) <= 20) ? 91 + ((() (sz)) >> 9) :\

1488 ((((Ë(
sz
)) >> 12) <= 10) ? 110 + ((() (sz)) >> 12) :\

1489 ((((Ë(
sz
)) >> 15) <= 4) ? 119 + ((() (sz)) >> 15) :\

1490 ((((Ë(
sz
)) >> 18) <= 2) ? 124 + ((() (sz)) >> 18) :\

1491 126)

	)

1496 
	#œrgebö_ödex_64
(
sz
) \

1497 (((((Ë(
sz
)) >> 6) <= 48) ? 48 + ((() (sz)) >> 6) :\

1498 ((((Ë(
sz
)) >> 9) <= 20) ? 91 + ((() (sz)) >> 9) :\

1499 ((((Ë(
sz
)) >> 12) <= 10) ? 110 + ((() (sz)) >> 12) :\

1500 ((((Ë(
sz
)) >> 15) <= 4) ? 119 + ((() (sz)) >> 15) :\

1501 ((((Ë(
sz
)) >> 18) <= 2) ? 124 + ((() (sz)) >> 18) :\

1502 126)

	)

1504 
	#œrgebö_ödex
(
sz
) \

1505 (
SIZE_SZ
 =8 ? 
	`œrgebö_ödex_64
 (
sz
) \

1506 : 
MALLOC_ALIGNMENT
 =16 ? 
	`œrgebö_ödex_32_big
 (
sz
) \

1507 : 
	`œrgebö_ödex_32
 (
sz
))

	)

1509 
	#bö_ödex
(
sz
) \

1510 ((
	`ö_smÆlbö_ønge
 (
sz
)Ë? 
	`smÆlbö_ödex
 (szË: 
	`œrgebö_ödex
 (sz))

	)

1528 
	#uns‹ãd_chunks
(
M
Ë(
	`bö_©
 (M, 1))

	)

1549 
	#öôül_t›
(
M
Ë(
	`uns‹ãd_chunks
 (M))

	)

1563 
	#BINMAPSHIFT
 5

	)

1564 
	#BITSPERMAP
 (1U << 
BINMAPSHIFT
)

	)

1565 
	#BINMAPSIZE
 (
NBINS
 / 
BITSPERMAP
)

	)

1567 
	#idx2block
(
i
Ë((iË>> 
BINMAPSHIFT
)

	)

1568 
	#idx2bô
(
i
Ë((1U << ((iË& ((1U << 
BINMAPSHIFT
Ë- 1))))

	)

1570 
	#m¨k_bö
(
m
, 
i
Ë((m)->
böm≠
[
	`idx2block
 (i)] |
	`idx2bô
 (i))

	)

1571 
	#unm¨k_bö
(
m
, 
i
Ë((m)->
böm≠
[
	`idx2block
 (i)] &~(
	`idx2bô
 (i)))

	)

1572 
	#gë_böm≠
(
m
, 
i
Ë((m)->
böm≠
[
	`idx2block
 (i)] & 
	`idx2bô
 (i))

	)

1591 
mÆloc_chunk
 *
	tmÁ°bö±r
;

1592 
	#Á°bö
(
¨_±r
, 
idx
Ë(◊r_±r)->
Á°bösY
[idx])

	)

1595 
	#Á°bö_ödex
(
sz
) \

1596 ((((Ë(
sz
)Ë>> (
SIZE_SZ
 =8 ? 4 : 3)Ë- 2)

	)

1600 
	#MAX_FAST_SIZE
 (80 * 
SIZE_SZ
 / 4)

	)

1602 
	#NFASTBINS
 (
	`Á°bö_ödex
 (
	`ªque°2size
 (
MAX_FAST_SIZE
)Ë+ 1)

	)

1615 
	#FASTBIN_CONSOLIDATION_THRESHOLD
 (65536UL)

	)

1632 
	#FASTCHUNKS_BIT
 (1U)

	)

1634 
	#have_Á°chunks
(
M
Ë(((M)->
Êags
 & 
FASTCHUNKS_BIT
Ë=0)

	)

1635 
	#˛ór_Á°chunks
(
M
Ë
	`ˇtomic_‹
 (&(M)->
Êags
, 
FASTCHUNKS_BIT
)

	)

1636 
	#£t_Á°chunks
(
M
Ë
	`ˇtomic_™d
 (&(M)->
Êags
, ~
FASTCHUNKS_BIT
)

	)

1647 
	#NONCONTIGUOUS_BIT
 (2U)

	)

1649 
	#c⁄tiguous
(
M
Ë(((M)->
Êags
 & 
NONCONTIGUOUS_BIT
Ë=0)

	)

1650 
	#n⁄c⁄tiguous
(
M
Ë(((M)->
Êags
 & 
NONCONTIGUOUS_BIT
Ë!0)

	)

1651 
	#£t_n⁄c⁄tiguous
(
M
Ë((M)->
Êags
 |
NONCONTIGUOUS_BIT
)

	)

1652 
	#£t_c⁄tiguous
(
M
Ë((M)->
Êags
 &~
NONCONTIGUOUS_BIT
)

	)

1661 
	#£t_max_Á°
(
s
) \

1662 
globÆ_max_Á°
 = (((
s
) == 0) \

1663 ? 
SMALLBIN_WIDTH
 : ((
s
 + 
SIZE_SZ
Ë& ~
MALLOC_ALIGN_MASK
))

	)

1664 
	#gë_max_Á°
(Ë
globÆ_max_Á°


	)

1671 
	smÆloc_°©e


1674 
muãx_t
 
	mmuãx
;

1677 
	mÊags
;

1680 
mÁ°bö±r
 
	mÁ°bösY
[
NFASTBINS
];

1683 
mchunk±r
 
	mt›
;

1686 
mchunk±r
 
	mœ°_ªmaödî
;

1689 
mchunk±r
 
	mbös
[
NBINS
 * 2 - 2];

1692 
	mböm≠
[
BINMAPSIZE
];

1695 
mÆloc_°©e
 *
	m√xt
;

1698 
mÆloc_°©e
 *
	m√xt_‰ì
;

1701 
INTERNAL_SIZE_T
 
	msy°em_mem
;

1702 
INTERNAL_SIZE_T
 
	mmax_sy°em_mem
;

1705 
	smÆloc_∑r


1708 
	måim_thªshﬁd
;

1709 
INTERNAL_SIZE_T
 
	mt›_∑d
;

1710 
INTERNAL_SIZE_T
 
	mmm≠_thªshﬁd
;

1711 
INTERNAL_SIZE_T
 
	m¨ía_ã°
;

1712 
INTERNAL_SIZE_T
 
	m¨ía_max
;

1715 
	mn_mm≠s
;

1716 
	mn_mm≠s_max
;

1717 
	mmax_n_mm≠s
;

1721 
	mno_dyn_thªshﬁd
;

1724 
INTERNAL_SIZE_T
 
	mmm≠≥d_mem
;

1727 
INTERNAL_SIZE_T
 
	mmax_mm≠≥d_mem
;

1728 
INTERNAL_SIZE_T
 
	mmax_tŸÆ_mem
;

1731 *
	msbrk_ba£
;

1740 
mÆloc_°©e
 
	gmaö_¨ía
 =

1742 .
muãx
 = 
MUTEX_INITIALIZER
,

1743 .
	g√xt
 = &
maö_¨ía


1748 
mÆloc_∑r
 
	gmp_
 =

1750 .
t›_∑d
 = 
DEFAULT_TOP_PAD
,

1751 .
	gn_mm≠s_max
 = 
DEFAULT_MMAP_MAX
,

1752 .
	gmm≠_thªshﬁd
 = 
DEFAULT_MMAP_THRESHOLD
,

1753 .
	gåim_thªshﬁd
 = 
DEFAULT_TRIM_THRESHOLD
,

1754 
	#NARENAS_FROM_NCORES
(
n
Ë(“Ë* ( (Ë=4 ? 2 : 8))

	)

1755 .
	g¨ía_ã°
 = 
NARENAS_FROM_NCORES
 (1)

1760 
	#M_ARENA_TEST
 -7

	)

1761 
	#M_ARENA_MAX
 -8

	)

1765 
INTERNAL_SIZE_T
 
	gglobÆ_max_Á°
;

1778 
	$mÆloc_öô_°©e
 (
m°©e
 
av
)

1780 
i
;

1781 
mbö±r
 
bö
;

1784 
i
 = 1; i < 
NBINS
; ++i)

1786 
bö
 = 
	`bö_©
 (
av
, 
i
);

1787 
bö
->
fd
 = bö->
bk
 = bin;

1790 #i‡
MORECORE_CONTIGUOUS


1791 i‡(
av
 !&
maö_¨ía
)

1793 
	`£t_n⁄c⁄tiguous
 (
av
);

1794 i‡(
av
 =&
maö_¨ía
)

1795 
	`£t_max_Á°
 (
DEFAULT_MXFAST
);

1796 
av
->
Êags
 |
FASTCHUNKS_BIT
;

1798 
av
->
t›
 = 
	`öôül_t›
 (av);

1799 
	}
}

1805 *
sysmÆloc
 (
INTERNAL_SIZE_T
, 
m°©e
);

1806 
sy°rim
 (
size_t
, 
m°©e
);

1807 
mÆloc_c⁄sﬁid©e
 (
m°©e
);

1814 #i‚de‡
wók_v¨übÀ


1817 
	#wók_v¨übÀ
 
wók_fun˘i⁄


	)

1821 *
	$mÆloc_hook_öi
 (
size_t
 
sz
,

1822 c⁄° *
ˇŒî
Ë
__THROW
;

1823 *
	$ªÆloc_hook_öi
 (*
±r
, 
size_t
 
sz
,

1824 c⁄° *
ˇŒî
Ë
__THROW
;

1825 *
	$memÆign_hook_öi
 (
size_t
 
Æignmít
, size_à
sz
,

1826 c⁄° *
ˇŒî
Ë
__THROW
;

1828 
	$wók_v¨übÀ
 (*
__mÆloc_öôülize_hook
Ë(Ë
NULL
;

1829 
	$wók_v¨übÀ
 (*
__‰ì_hook
Ë(*
__±r
,

1830 c⁄° *Ë
NULL
;

1831 *
	$wók_v¨übÀ
 (*
__mÆloc_hook
)

1832 (
size_t
 
__size
, c⁄° *Ë
mÆloc_hook_öi
;

1833 *
	$wók_v¨übÀ
 (*
__ªÆloc_hook
)

1834 (*
__±r
, 
size_t
 
__size
, const *)

1835 
ªÆloc_hook_öi
;

1836 *
	$wók_v¨übÀ
 (*
__memÆign_hook
)

1837 (
size_t
 
__Æignmít
, size_à
__size
, const *)

1838 
memÆign_hook_öi
;

1839 
	$wók_v¨übÀ
 (*
__a·î_m‹ec‹e_hook
Ë(Ë
NULL
;

1844 #i‚de‡
DEFAULT_CHECK_ACTION


1845 
	#DEFAULT_CHECK_ACTION
 3

	)

1848 
check_a˘i⁄
 = 
DEFAULT_CHECK_ACTION
;

1853 
≥πurb_byã
;

1855 
ölöe
 

1856 
	$Æloc_≥πurb
 (*
p
, 
size_t
 
n
)

1858 i‡(
	`__glibc_u∆ikñy
 (
≥πurb_byã
))

1859 
	`mem£t
 (
p
, 
≥πurb_byã
 ^ 0xff, 
n
);

1860 
	}
}

1862 
ölöe
 

1863 
	$‰ì_≥πurb
 (*
p
, 
size_t
 
n
)

1865 i‡(
	`__glibc_u∆ikñy
 (
≥πurb_byã
))

1866 
	`mem£t
 (
p
, 
≥πurb_byã
, 
n
);

1867 
	}
}

1871 
	~<°≠-¥obe.h
>

1874 
	~"¨ía.c
"

1886 #i‡!
MALLOC_DEBUG


1888 
	#check_chunk
(
A
, 
P
)

	)

1889 
	#check_‰ì_chunk
(
A
, 
P
)

	)

1890 
	#check_öu£_chunk
(
A
, 
P
)

	)

1891 
	#check_ªmÆlo˚d_chunk
(
A
, 
P
, 
N
)

	)

1892 
	#check_mÆlo˚d_chunk
(
A
, 
P
, 
N
)

	)

1893 
	#check_mÆloc_°©e
(
A
)

	)

1897 
	#check_chunk
(
A
, 
P
Ë
	`do_check_chunk
 (A, P)

	)

1898 
	#check_‰ì_chunk
(
A
, 
P
Ë
	`do_check_‰ì_chunk
 (A, P)

	)

1899 
	#check_öu£_chunk
(
A
, 
P
Ë
	`do_check_öu£_chunk
 (A, P)

	)

1900 
	#check_ªmÆlo˚d_chunk
(
A
, 
P
, 
N
Ë
	`do_check_ªmÆlo˚d_chunk
 (A, P, N)

	)

1901 
	#check_mÆlo˚d_chunk
(
A
, 
P
, 
N
Ë
	`do_check_mÆlo˚d_chunk
 (A, P, N)

	)

1902 
	#check_mÆloc_°©e
(
A
Ë
	`do_check_mÆloc_°©e
 (A)

	)

1909 
	$do_check_chunk
 (
m°©e
 
av
, 
mchunk±r
 
p
)

1911 
sz
 = 
	`chunksize
 (
p
);

1913 *
max_addªss
 = (*Ë(
av
->
t›
Ë+ 
	`chunksize
 (av->top);

1914 *
mö_addªss
 = 
max_addªss
 - 
av
->
sy°em_mem
;

1916 i‡(!
	`chunk_is_mm≠≥d
 (
p
))

1919 i‡(
p
 !
av
->
t›
)

1921 i‡(
	`c⁄tiguous
 (
av
))

1923 
	`as£π
 (((*Ë
p
Ë>
mö_addªss
);

1924 
	`as£π
 (((*Ë
p
 + 
sz
Ë<((*Ë(
av
->
t›
)));

1930 
	`as£π
 ((Ë(
sz
Ë>
MINSIZE
);

1932 
	`as£π
 (
	`¥ev_öu£
 (
p
));

1938 i‡(
	`c⁄tiguous
 (
av
Ë&&áv->
t›
 !
	`öôül_t›
 (av))

1940 
	`as£π
 (((*Ë
p
Ë< 
mö_addªss
 || ((*ËpË>
max_addªss
);

1943 
	`as£π
 (((
p
->
¥ev_size
 + 
sz
Ë& (
	`GLRO
 (
dl_∑gesize
) - 1)) == 0);

1945 
	`as£π
 (
	`Æig√d_OK
 (
	`chunk2mem
 (
p
)));

1947 
	}
}

1954 
	$do_check_‰ì_chunk
 (
m°©e
 
av
, 
mchunk±r
 
p
)

1956 
INTERNAL_SIZE_T
 
sz
 = 
p
->
size
 & ~(
PREV_INUSE
 | 
NON_MAIN_ARENA
);

1957 
mchunk±r
 
√xt
 = 
	`chunk_©_off£t
 (
p
, 
sz
);

1959 
	`do_check_chunk
 (
av
, 
p
);

1962 
	`as£π
 (!
	`öu£
 (
p
));

1963 
	`as£π
 (!
	`chunk_is_mm≠≥d
 (
p
));

1966 i‡((Ë(
sz
Ë>
MINSIZE
)

1968 
	`as£π
 ((
sz
 & 
MALLOC_ALIGN_MASK
) == 0);

1969 
	`as£π
 (
	`Æig√d_OK
 (
	`chunk2mem
 (
p
)));

1971 
	`as£π
 (
√xt
->
¥ev_size
 =
sz
);

1973 
	`as£π
 (
	`¥ev_öu£
 (
p
));

1974 
	`as£π
 (
√xt
 =
av
->
t›
 || 
	`öu£
 (next));

1977 
	`as£π
 (
p
->
fd
->
bk
 ==Ö);

1978 
	`as£π
 (
p
->
bk
->
fd
 ==Ö);

1981 
	`as£π
 (
sz
 =
SIZE_SZ
);

1982 
	}
}

1989 
	$do_check_öu£_chunk
 (
m°©e
 
av
, 
mchunk±r
 
p
)

1991 
mchunk±r
 
√xt
;

1993 
	`do_check_chunk
 (
av
, 
p
);

1995 i‡(
	`chunk_is_mm≠≥d
 (
p
))

1999 
	`as£π
 (
	`öu£
 (
p
));

2001 
√xt
 = 
	`√xt_chunk
 (
p
);

2007 i‡(!
	`¥ev_öu£
 (
p
))

2010 
mchunk±r
 
¥v
 = 
	`¥ev_chunk
 (
p
);

2011 
	`as£π
 (
	`√xt_chunk
 (
¥v
Ë=
p
);

2012 
	`do_check_‰ì_chunk
 (
av
, 
¥v
);

2015 i‡(
√xt
 =
av
->
t›
)

2017 
	`as£π
 (
	`¥ev_öu£
 (
√xt
));

2018 
	`as£π
 (
	`chunksize
 (
√xt
Ë>
MINSIZE
);

2020 i‡(!
	`öu£
 (
√xt
))

2021 
	`do_check_‰ì_chunk
 (
av
, 
√xt
);

2022 
	}
}

2029 
	$do_check_ªmÆlo˚d_chunk
 (
m°©e
 
av
, 
mchunk±r
 
p
, 
INTERNAL_SIZE_T
 
s
)

2031 
INTERNAL_SIZE_T
 
sz
 = 
p
->
size
 & ~(
PREV_INUSE
 | 
NON_MAIN_ARENA
);

2033 i‡(!
	`chunk_is_mm≠≥d
 (
p
))

2035 
	`as£π
 (
av
 =
	`¨ía_f‹_chunk
 (
p
));

2036 i‡(
	`chunk_n⁄_maö_¨ía
 (
p
))

2037 
	`as£π
 (
av
 !&
maö_¨ía
);

2039 
	`as£π
 (
av
 =&
maö_¨ía
);

2042 
	`do_check_öu£_chunk
 (
av
, 
p
);

2045 
	`as£π
 ((
sz
 & 
MALLOC_ALIGN_MASK
) == 0);

2046 
	`as£π
 ((Ë(
sz
Ë>
MINSIZE
);

2048 
	`as£π
 (
	`Æig√d_OK
 (
	`chunk2mem
 (
p
)));

2050 
	`as£π
 ((Ë(
sz
Ë- (Ë(
s
) >= 0);

2051 
	`as£π
 ((Ë(
sz
Ë- (Ë(
s
 + 
MINSIZE
) < 0);

2052 
	}
}

2059 
	$do_check_mÆlo˚d_chunk
 (
m°©e
 
av
, 
mchunk±r
 
p
, 
INTERNAL_SIZE_T
 
s
)

2062 
	`do_check_ªmÆlo˚d_chunk
 (
av
, 
p
, 
s
);

2074 
	`as£π
 (
	`¥ev_öu£
 (
p
));

2075 
	}
}

2090 
	$do_check_mÆloc_°©e
 (
m°©e
 
av
)

2092 
i
;

2093 
mchunk±r
 
p
;

2094 
mchunk±r
 
q
;

2095 
mbö±r
 
b
;

2096 
idx
;

2097 
INTERNAL_SIZE_T
 
size
;

2098 
tŸÆ
 = 0;

2099 
max_Á°_bö
;

2102 
	`as£π
 ( (
INTERNAL_SIZE_T
) <=  (*));

2105 
	`as£π
 ((
MALLOC_ALIGNMENT
 & (MALLOC_ALIGNMENT - 1)) == 0);

2108 i‡(
av
->
t›
 =0 ||áv->t› =
	`öôül_t›
 (av))

2112 
	`as£π
 ((
	`GLRO
 (
dl_∑gesize
) & (GLRO (dl_pagesize) - 1)) == 0);

2115 i‡(
av
 =&
maö_¨ía
 && 
	`c⁄tiguous
 (av))

2116 
	`as£π
 ((*Ë
mp_
.
sbrk_ba£
 + 
av
->
sy°em_mem
 ==

2117 (*Ë
av
->
t›
 + 
	`chunksize
 (av->top));

2122 
	`as£π
 ((
	`gë_max_Á°
 (Ë& ~1Ë<
	`ªque°2size
 (
MAX_FAST_SIZE
));

2124 
max_Á°_bö
 = 
	`Á°bö_ödex
 (
	`gë_max_Á°
 ());

2126 
i
 = 0; i < 
NFASTBINS
; ++i)

2128 
p
 = 
	`Á°bö
 (
av
, 
i
);

2142 i‡(
av
 =&
maö_¨ía
 && 
i
 > 
max_Á°_bö
)

2143 
	`as£π
 (
p
 == 0);

2145 
p
 != 0)

2148 
	`do_check_öu£_chunk
 (
av
, 
p
);

2149 
tŸÆ
 +
	`chunksize
 (
p
);

2151 
	`as£π
 (
	`Á°bö_ödex
 (
	`chunksize
 (
p
)Ë=
i
);

2152 
p
 =Ö->
fd
;

2156 i‡(
tŸÆ
 != 0)

2157 
	`as£π
 (
	`have_Á°chunks
 (
av
));

2158 i‡(!
	`have_Á°chunks
 (
av
))

2159 
	`as£π
 (
tŸÆ
 == 0);

2162 
i
 = 1; i < 
NBINS
; ++i)

2164 
b
 = 
	`bö_©
 (
av
, 
i
);

2167 i‡(
i
 >= 2)

2169 
böbô
 = 
	`gë_böm≠
 (
av
, 
i
);

2170 
em±y
 = 
	`œ°
 (
b
) == b;

2171 i‡(!
böbô
)

2172 
	`as£π
 (
em±y
);

2173 i‡(!
em±y
)

2174 
	`as£π
 (
böbô
);

2177 
p
 = 
	`œ°
 (
b
);Ö !b;Ö =Ö->
bk
)

2180 
	`do_check_‰ì_chunk
 (
av
, 
p
);

2181 
size
 = 
	`chunksize
 (
p
);

2182 
tŸÆ
 +
size
;

2183 i‡(
i
 >= 2)

2186 
idx
 = 
	`bö_ödex
 (
size
);

2187 
	`as£π
 (
idx
 =
i
);

2189 
	`as£π
 (
p
->
bk
 =
b
 ||

2190 (Ë
	`chunksize
 (
p
->
bk
) >= () chunksize (p));

2192 i‡(!
	`ö_smÆlbö_ønge
 (
size
))

2194 i‡(
p
->
fd_√xtsize
 !
NULL
)

2196 i‡(
p
->
fd_√xtsize
 ==Ö)

2197 
	`as£π
 (
p
->
bk_√xtsize
 ==Ö);

2200 i‡(
p
->
fd_√xtsize
 =
	`fú°
 (
b
))

2201 
	`as£π
 (
	`chunksize
 (
p
Ë< chunksizê’->
fd_√xtsize
));

2203 
	`as£π
 (
	`chunksize
 (
p
Ë> chunksizê’->
fd_√xtsize
));

2205 i‡(
p
 =
	`fú°
 (
b
))

2206 
	`as£π
 (
	`chunksize
 (
p
Ë> chunksizê’->
bk_√xtsize
));

2208 
	`as£π
 (
	`chunksize
 (
p
Ë< chunksizê’->
bk_√xtsize
));

2212 
	`as£π
 (
p
->
bk_√xtsize
 =
NULL
);

2215 i‡(!
	`ö_smÆlbö_ønge
 (
size
))

2216 
	`as£π
 (
p
->
fd_√xtsize
 =
NULL
 &&Ö->
bk_√xtsize
 == NULL);

2218 
q
 = 
	`√xt_chunk
 (
p
);

2219 (
q
 !
av
->
t›
 && 
	`öu£
 (q) &&

2220 (Ë(
	`chunksize
 (
q
)Ë>
MINSIZE
);

2221 
q
 = 
	`√xt_chunk
 (q))

2222 
	`do_check_öu£_chunk
 (
av
, 
q
);

2227 
	`check_chunk
 (
av
,áv->
t›
);

2228 
	}
}

2233 
	~"hooks.c
"

2246 
	$sysmÆloc
 (
INTERNAL_SIZE_T
 
nb
, 
m°©e
 
av
)

2248 
mchunk±r
 
ﬁd_t›
;

2249 
INTERNAL_SIZE_T
 
ﬁd_size
;

2250 *
ﬁd_íd
;

2252 
size
;

2253 *
brk
;

2255 
c‹ª˘i⁄
;

2256 *
¢d_brk
;

2258 
INTERNAL_SIZE_T
 
‰⁄t_mißlign
;

2259 
INTERNAL_SIZE_T
 
íd_mißlign
;

2260 *
Æig√d_brk
;

2262 
mchunk±r
 
p
;

2263 
mchunk±r
 
ªmaödî
;

2264 
ªmaödî_size
;

2267 
size_t
 
∑gemask
 = 
	`GLRO
 (
dl_∑gesize
) - 1;

2268 
boﬁ
 
åõd_mm≠
 = 
Ál£
;

2278 i‡((Ë(
nb
Ë>(Ë(
mp_
.
mm≠_thªshﬁd
) &&

2279 (
mp_
.
n_mm≠s
 < mp_.
n_mm≠s_max
))

2281 *
mm
;

2283 
åy_mm≠
:

2292 i‡(
MALLOC_ALIGNMENT
 =2 * 
SIZE_SZ
)

2293 
size
 = (
nb
 + 
SIZE_SZ
 + 
∑gemask
) & ~pagemask;

2295 
size
 = (
nb
 + 
SIZE_SZ
 + 
MALLOC_ALIGN_MASK
 + 
∑gemask
) & ~pagemask;

2296 
åõd_mm≠
 = 
åue
;

2299 i‡((Ë(
size
Ë> (Ë(
nb
))

2301 
mm
 = (*Ë(
	`MMAP
 (0, 
size
, 
PROT_READ
 | 
PROT_WRITE
, 0));

2303 i‡(
mm
 !
MAP_FAILED
)

2313 i‡(
MALLOC_ALIGNMENT
 =2 * 
SIZE_SZ
)

2318 
	`as£π
 (((
INTERNAL_SIZE_T
Ë
	`chunk2mem
 (
mm
Ë& 
MALLOC_ALIGN_MASK
) == 0);

2319 
‰⁄t_mißlign
 = 0;

2322 
‰⁄t_mißlign
 = (
INTERNAL_SIZE_T
Ë
	`chunk2mem
 (
mm
Ë& 
MALLOC_ALIGN_MASK
;

2323 i‡(
‰⁄t_mißlign
 > 0)

2325 
c‹ª˘i⁄
 = 
MALLOC_ALIGNMENT
 - 
‰⁄t_mißlign
;

2326 
p
 = (
mchunk±r
Ë(
mm
 + 
c‹ª˘i⁄
);

2327 
p
->
¥ev_size
 = 
c‹ª˘i⁄
;

2328 
	`£t_hód
 (
p
, (
size
 - 
c‹ª˘i⁄
Ë| 
IS_MMAPPED
);

2332 
p
 = (
mchunk±r
Ë
mm
;

2333 
	`£t_hód
 (
p
, 
size
 | 
IS_MMAPPED
);

2338 
√w
 = 
	`©omic_exch™ge_™d_add
 (&
mp_
.
n_mm≠s
, 1) + 1;

2339 
	`©omic_max
 (&
mp_
.
max_n_mm≠s
, 
√w
);

2341 
sum
;

2342 
sum
 = 
	`©omic_exch™ge_™d_add
 (&
mp_
.
mm≠≥d_mem
, 
size
) + size;

2343 
	`©omic_max
 (&
mp_
.
max_mm≠≥d_mem
, 
sum
);

2345 
	`check_chunk
 (
av
, 
p
);

2347  
	`chunk2mem
 (
p
);

2354 
ﬁd_t›
 = 
av
->
t›
;

2355 
ﬁd_size
 = 
	`chunksize
 (
ﬁd_t›
);

2356 
ﬁd_íd
 = (*Ë(
	`chunk_©_off£t
 (
ﬁd_t›
, 
ﬁd_size
));

2358 
brk
 = 
¢d_brk
 = (*Ë(
MORECORE_FAILURE
);

2365 
	`as£π
 ((
ﬁd_t›
 =
	`öôül_t›
 (
av
Ë&& 
ﬁd_size
 == 0) ||

2366 ((Ë(
ﬁd_size
Ë>
MINSIZE
 &&

2367 
	`¥ev_öu£
 (
ﬁd_t›
) &&

2368 ((Ë
ﬁd_íd
 & 
∑gemask
) == 0));

2371 
	`as£π
 ((Ë(
ﬁd_size
Ë< (Ë(
nb
 + 
MINSIZE
));

2374 i‡(
av
 !&
maö_¨ía
)

2376 
hóp_öfo
 *
ﬁd_hóp
, *
hóp
;

2377 
size_t
 
ﬁd_hóp_size
;

2380 
ﬁd_hóp
 = 
	`hóp_f‹_±r
 (
ﬁd_t›
);

2381 
ﬁd_hóp_size
 = 
ﬁd_hóp
->
size
;

2382 i‡((Ë(
MINSIZE
 + 
nb
 - 
ﬁd_size
) > 0

2383 && 
	`grow_hóp
 (
ﬁd_hóp
, 
MINSIZE
 + 
nb
 - 
ﬁd_size
) == 0)

2385 
av
->
sy°em_mem
 +
ﬁd_hóp
->
size
 - 
ﬁd_hóp_size
;

2386 
¨ía_mem
 +
ﬁd_hóp
->
size
 - 
ﬁd_hóp_size
;

2387 
	`£t_hód
 (
ﬁd_t›
, (((*Ë
ﬁd_hóp
 + old_hóp->
size
) - (*) old_top)

2388 | 
PREV_INUSE
);

2390 i‡((
hóp
 = 
	`√w_hóp
 (
nb
 + (
MINSIZE
 +  (*hóp)), 
mp_
.
t›_∑d
)))

2393 
hóp
->
¨_±r
 = 
av
;

2394 
hóp
->
¥ev
 = 
ﬁd_hóp
;

2395 
av
->
sy°em_mem
 +
hóp
->
size
;

2396 
¨ía_mem
 +
hóp
->
size
;

2398 
	`t›
 (
av
Ë
	`chunk_©_off£t
 (
hóp
,  (*heap));

2399 
	`£t_hód
 (
	`t›
 (
av
), (
hóp
->
size
 -  (*hóp)Ë| 
PREV_INUSE
);

2406 
ﬁd_size
 = (ﬁd_sizê- 
MINSIZE
Ë& ~
MALLOC_ALIGN_MASK
;

2407 
	`£t_hód
 (
	`chunk_©_off£t
 (
ﬁd_t›
, 
ﬁd_size
 + 2 * 
SIZE_SZ
), 0 | 
PREV_INUSE
);

2408 i‡(
ﬁd_size
 >
MINSIZE
)

2410 
	`£t_hód
 (
	`chunk_©_off£t
 (
ﬁd_t›
, 
ﬁd_size
), (2 * 
SIZE_SZ
Ë| 
PREV_INUSE
);

2411 
	`£t_foŸ
 (
	`chunk_©_off£t
 (
ﬁd_t›
, 
ﬁd_size
), (2 * 
SIZE_SZ
));

2412 
	`£t_hód
 (
ﬁd_t›
, 
ﬁd_size
 | 
PREV_INUSE
 | 
NON_MAIN_ARENA
);

2413 
	`_öt_‰ì
 (
av
, 
ﬁd_t›
, 1);

2417 
	`£t_hód
 (
ﬁd_t›
, (
ﬁd_size
 + 2 * 
SIZE_SZ
Ë| 
PREV_INUSE
);

2418 
	`£t_foŸ
 (
ﬁd_t›
, (
ﬁd_size
 + 2 * 
SIZE_SZ
));

2421 i‡(!
åõd_mm≠
)

2423 
åy_mm≠
;

2429 
size
 = 
nb
 + 
mp_
.
t›_∑d
 + 
MINSIZE
;

2437 i‡(
	`c⁄tiguous
 (
av
))

2438 
size
 -
ﬁd_size
;

2448 
size
 = (sizê+ 
∑gemask
) & ~pagemask;

2456 i‡(
size
 > 0)

2458 
brk
 = (*Ë(
	`MORECORE
 (
size
));

2459 
	`LIBC_PROBE
 (
mem‹y_sbrk_m‹e
, 2, 
brk
, 
size
);

2462 i‡(
brk
 !(*Ë(
MORECORE_FAILURE
))

2465 (*
hook
Ë(Ë
	`©omic_f‹˚d_ªad
 (
__a·î_m‹ec‹e_hook
);

2466 i‡(
	`__buûtö_ex≥˘
 (
hook
 !
NULL
, 0))

2467 (*
hook
)();

2481 i‡(
	`c⁄tiguous
 (
av
))

2482 
size
 = (sizê+ 
ﬁd_size
 + 
∑gemask
) & ~pagemask;

2485 i‡((Ë(
size
Ë< (Ë(
MMAP_AS_MORECORE_SIZE
))

2486 
size
 = 
MMAP_AS_MORECORE_SIZE
;

2489 i‡((Ë(
size
Ë> (Ë(
nb
))

2491 *
mbrk
 = (*Ë(
	`MMAP
 (0, 
size
, 
PROT_READ
 | 
PROT_WRITE
, 0));

2493 i‡(
mbrk
 !
MAP_FAILED
)

2496 
brk
 = 
mbrk
;

2497 
¢d_brk
 = 
brk
 + 
size
;

2505 
	`£t_n⁄c⁄tiguous
 (
av
);

2510 i‡(
brk
 !(*Ë(
MORECORE_FAILURE
))

2512 i‡(
mp_
.
sbrk_ba£
 == 0)

2513 
mp_
.
sbrk_ba£
 = 
brk
;

2514 
av
->
sy°em_mem
 +
size
;

2520 i‡(
brk
 =
ﬁd_íd
 && 
¢d_brk
 =(*Ë(
MORECORE_FAILURE
))

2521 
	`£t_hód
 (
ﬁd_t›
, (
size
 + 
ﬁd_size
Ë| 
PREV_INUSE
);

2523 i‡(
	`c⁄tiguous
 (
av
Ë&& 
ﬁd_size
 && 
brk
 < 
ﬁd_íd
)

2526 
	`mÆloc_¥öãº
 (3, "bªakádju°edÅÿ‰ì mÆlo¯•a˚", 
brk
);

2550 
‰⁄t_mißlign
 = 0;

2551 
íd_mißlign
 = 0;

2552 
c‹ª˘i⁄
 = 0;

2553 
Æig√d_brk
 = 
brk
;

2556 i‡(
	`c⁄tiguous
 (
av
))

2559 i‡(
ﬁd_size
)

2560 
av
->
sy°em_mem
 +
brk
 - 
ﬁd_íd
;

2564 
‰⁄t_mißlign
 = (
INTERNAL_SIZE_T
Ë
	`chunk2mem
 (
brk
Ë& 
MALLOC_ALIGN_MASK
;

2565 i‡(
‰⁄t_mißlign
 > 0)

2575 
c‹ª˘i⁄
 = 
MALLOC_ALIGNMENT
 - 
‰⁄t_mißlign
;

2576 
Æig√d_brk
 +
c‹ª˘i⁄
;

2584 
c‹ª˘i⁄
 +
ﬁd_size
;

2587 
íd_mißlign
 = (
INTERNAL_SIZE_T
Ë(
brk
 + 
size
 + 
c‹ª˘i⁄
);

2588 
c‹ª˘i⁄
 +((
íd_mißlign
 + 
∑gemask
) & ~pagemask) -Énd_misalign;

2590 
	`as£π
 (
c‹ª˘i⁄
 >= 0);

2591 
¢d_brk
 = (*Ë(
	`MORECORE
 (
c‹ª˘i⁄
));

2603 i‡(
¢d_brk
 =(*Ë(
MORECORE_FAILURE
))

2605 
c‹ª˘i⁄
 = 0;

2606 
¢d_brk
 = (*Ë(
	`MORECORE
 (0));

2611 (*
hook
Ë(Ë
	`©omic_f‹˚d_ªad
 (
__a·î_m‹ec‹e_hook
);

2612 i‡(
	`__buûtö_ex≥˘
 (
hook
 !
NULL
, 0))

2613 (*
hook
)();

2620 i‡(
MALLOC_ALIGNMENT
 =2 * 
SIZE_SZ
)

2622 
	`as£π
 (((Ë
	`chunk2mem
 (
brk
Ë& 
MALLOC_ALIGN_MASK
) == 0);

2625 
‰⁄t_mißlign
 = (
INTERNAL_SIZE_T
Ë
	`chunk2mem
 (
brk
Ë& 
MALLOC_ALIGN_MASK
;

2626 i‡(
‰⁄t_mißlign
 > 0)

2636 
Æig√d_brk
 +
MALLOC_ALIGNMENT
 - 
‰⁄t_mißlign
;

2641 i‡(
¢d_brk
 =(*Ë(
MORECORE_FAILURE
))

2643 
¢d_brk
 = (*Ë(
	`MORECORE
 (0));

2648 i‡(
¢d_brk
 !(*Ë(
MORECORE_FAILURE
))

2650 
av
->
t›
 = (
mchunk±r
Ë
Æig√d_brk
;

2651 
	`£t_hód
 (
av
->
t›
, (
¢d_brk
 - 
Æig√d_brk
 + 
c‹ª˘i⁄
Ë| 
PREV_INUSE
);

2652 
av
->
sy°em_mem
 +
c‹ª˘i⁄
;

2663 i‡(
ﬁd_size
 != 0)

2670 
ﬁd_size
 = (ﬁd_sizê- 4 * 
SIZE_SZ
Ë& ~
MALLOC_ALIGN_MASK
;

2671 
	`£t_hód
 (
ﬁd_t›
, 
ﬁd_size
 | 
PREV_INUSE
);

2679 
	`chunk_©_off£t
 (
ﬁd_t›
, 
ﬁd_size
)->
size
 =

2680 (2 * 
SIZE_SZ
Ë| 
PREV_INUSE
;

2682 
	`chunk_©_off£t
 (
ﬁd_t›
, 
ﬁd_size
 + 2 * 
SIZE_SZ
)->
size
 =

2683 (2 * 
SIZE_SZ
Ë| 
PREV_INUSE
;

2686 i‡(
ﬁd_size
 >
MINSIZE
)

2688 
	`_öt_‰ì
 (
av
, 
ﬁd_t›
, 1);

2696 i‡((Ë
av
->
sy°em_mem
 > (Ë◊v->
max_sy°em_mem
))

2697 
av
->
max_sy°em_mem
 =áv->
sy°em_mem
;

2698 
	`check_mÆloc_°©e
 (
av
);

2701 
p
 = 
av
->
t›
;

2702 
size
 = 
	`chunksize
 (
p
);

2705 i‡((Ë(
size
Ë>(Ë(
nb
 + 
MINSIZE
))

2707 
ªmaödî_size
 = 
size
 - 
nb
;

2708 
ªmaödî
 = 
	`chunk_©_off£t
 (
p
, 
nb
);

2709 
av
->
t›
 = 
ªmaödî
;

2710 
	`£t_hód
 (
p
, 
nb
 | 
PREV_INUSE
 | (
av
 !&
maö_¨ía
 ? 
NON_MAIN_ARENA
 : 0));

2711 
	`£t_hód
 (
ªmaödî
, 
ªmaödî_size
 | 
PREV_INUSE
);

2712 
	`check_mÆlo˚d_chunk
 (
av
, 
p
, 
nb
);

2713  
	`chunk2mem
 (
p
);

2717 
	`__£t_î∫o
 (
ENOMEM
);

2719 
	}
}

2732 
	$sy°rim
 (
size_t
 
∑d
, 
m°©e
 
av
)

2734 
t›_size
;

2735 
exåa
;

2736 
ªÀa£d
;

2737 *
cuºít_brk
;

2738 *
√w_brk
;

2739 
size_t
 
∑gesz
;

2740 
t›_¨ó
;

2742 
∑gesz
 = 
	`GLRO
 (
dl_∑gesize
);

2743 
t›_size
 = 
	`chunksize
 (
av
->
t›
);

2745 
t›_¨ó
 = 
t›_size
 - 
MINSIZE
 - 1;

2746 i‡(
t›_¨ó
 <
∑d
)

2750 
exåa
 = (
t›_¨ó
 - 
∑d
Ë& ~(
∑gesz
 - 1);

2752 i‡(
exåa
 == 0)

2759 
cuºít_brk
 = (*Ë(
	`MORECORE
 (0));

2760 i‡(
cuºít_brk
 =(*Ë(
av
->
t›
Ë+ 
t›_size
)

2772 
	`MORECORE
 (-
exåa
);

2774 (*
hook
Ë(Ë
	`©omic_f‹˚d_ªad
 (
__a·î_m‹ec‹e_hook
);

2775 i‡(
	`__buûtö_ex≥˘
 (
hook
 !
NULL
, 0))

2776 (*
hook
)();

2777 
√w_brk
 = (*Ë(
	`MORECORE
 (0));

2779 
	`LIBC_PROBE
 (
mem‹y_sbrk_Àss
, 2, 
√w_brk
, 
exåa
);

2781 i‡(
√w_brk
 !(*Ë
MORECORE_FAILURE
)

2783 
ªÀa£d
 = (Ë(
cuºít_brk
 - 
√w_brk
);

2785 i‡(
ªÀa£d
 != 0)

2788 
av
->
sy°em_mem
 -
ªÀa£d
;

2789 
	`£t_hód
 (
av
->
t›
, (
t›_size
 - 
ªÀa£d
Ë| 
PREV_INUSE
);

2790 
	`check_mÆloc_°©e
 (
av
);

2796 
	}
}

2799 
öã∫Æ_fun˘i⁄


2800 
	$munm≠_chunk
 (
mchunk±r
 
p
)

2802 
INTERNAL_SIZE_T
 
size
 = 
	`chunksize
 (
p
);

2804 
	`as£π
 (
	`chunk_is_mm≠≥d
 (
p
));

2806 
uöçå_t
 
block
 = (uöçå_tË
p
 -Ö->
¥ev_size
;

2807 
size_t
 
tŸÆ_size
 = 
p
->
¥ev_size
 + 
size
;

2813 i‡(
	`__buûtö_ex≥˘
 (((
block
 | 
tŸÆ_size
Ë& (
	`GLRO
 (
dl_∑gesize
) - 1)) != 0, 0))

2815 
	`mÆloc_¥öãº
 (
check_a˘i⁄
, "munmap_chunk(): invalidÖointer",

2816 
	`chunk2mem
 (
p
));

2820 
	`©omic_de¸emít
 (&
mp_
.
n_mm≠s
);

2821 
	`©omic_add
 (&
mp_
.
mm≠≥d_mem
, -
tŸÆ_size
);

2826 
	`__munm≠
 ((*Ë
block
, 
tŸÆ_size
);

2827 
	}
}

2829 #i‡
HAVE_MREMAP


2831 
mchunk±r


2832 
öã∫Æ_fun˘i⁄


2833 
	$mªm≠_chunk
 (
mchunk±r
 
p
, 
size_t
 
√w_size
)

2835 
size_t
 
∑ge_mask
 = 
	`GLRO
 (
dl_∑gesize
) - 1;

2836 
INTERNAL_SIZE_T
 
off£t
 = 
p
->
¥ev_size
;

2837 
INTERNAL_SIZE_T
 
size
 = 
	`chunksize
 (
p
);

2838 *
˝
;

2840 
	`as£π
 (
	`chunk_is_mm≠≥d
 (
p
));

2841 
	`as£π
 (((
size
 + 
off£t
Ë& (
	`GLRO
 (
dl_∑gesize
) - 1)) == 0);

2844 
√w_size
 = (√w_sizê+ 
off£t
 + 
SIZE_SZ
 + 
∑ge_mask
) & ~page_mask;

2847 i‡(
size
 + 
off£t
 =
√w_size
)

2848  
p
;

2850 
˝
 = (*Ë
	`__mªm≠
 ((*Ë
p
 - 
off£t
, 
size
 + off£t, 
√w_size
,

2851 
MREMAP_MAYMOVE
);

2853 i‡(
˝
 =
MAP_FAILED
)

2856 
p
 = (
mchunk±r
Ë(
˝
 + 
off£t
);

2858 
	`as£π
 (
	`Æig√d_OK
 (
	`chunk2mem
 (
p
)));

2860 
	`as£π
 ((
p
->
¥ev_size
 =
off£t
));

2861 
	`£t_hód
 (
p
, (
√w_size
 - 
off£t
Ë| 
IS_MMAPPED
);

2863 
INTERNAL_SIZE_T
 
√w
;

2864 
√w
 = 
	`©omic_exch™ge_™d_add
 (&
mp_
.
mm≠≥d_mem
, 
√w_size
 - 
size
 - 
off£t
)

2865 + 
√w_size
 - 
size
 - 
off£t
;

2866 
	`©omic_max
 (&
mp_
.
max_mm≠≥d_mem
, 
√w
);

2867  
p
;

2868 
	}
}

2874 
	$__libc_mÆloc
 (
size_t
 
byãs
)

2876 
m°©e
 
¨_±r
;

2877 *
vi˘im
;

2879 *(*
hook
Ë(
size_t
, const *)

2880 
	`©omic_f‹˚d_ªad
 (
__mÆloc_hook
);

2881 i‡(
	`__buûtö_ex≥˘
 (
hook
 !
NULL
, 0))

2882  (*
hook
)(
byãs
, 
	`RETURN_ADDRESS
 (0));

2884 
	`¨ía_lookup
 (
¨_±r
);

2886 
	`¨ía_lock
 (
¨_±r
, 
byãs
);

2887 i‡(!
¨_±r
)

2890 
vi˘im
 = 
	`_öt_mÆloc
 (
¨_±r
, 
byãs
);

2891 i‡(!
vi˘im
)

2893 
	`LIBC_PROBE
 (
mem‹y_mÆloc_ªåy
, 1, 
byãs
);

2894 
¨_±r
 = 
	`¨ía_gë_ªåy
 (¨_±r, 
byãs
);

2895 i‡(
	`__buûtö_ex≥˘
 (
¨_±r
 !
NULL
, 1))

2897 
vi˘im
 = 
	`_öt_mÆloc
 (
¨_±r
, 
byãs
);

2898 (Ë
	`muãx_u∆ock
 (&
¨_±r
->
muãx
);

2902 (Ë
	`muãx_u∆ock
 (&
¨_±r
->
muãx
);

2903 
	`as£π
 (!
vi˘im
 || 
	`chunk_is_mm≠≥d
 (
	`mem2chunk
 (victim)) ||

2904 
¨_±r
 =
	`¨ía_f‹_chunk
 (
	`mem2chunk
 (
vi˘im
)));

2905  
vi˘im
;

2906 
	}
}

2907 
	$libc_hiddí_def
 (
__libc_mÆloc
)

2910 
	$__libc_‰ì
 (*
mem
)

2912 
m°©e
 
¨_±r
;

2913 
mchunk±r
 
p
;

2915 (*
hook
) (*, const *)

2916 
	`©omic_f‹˚d_ªad
 (
__‰ì_hook
);

2917 i‡(
	`__buûtö_ex≥˘
 (
hook
 !
NULL
, 0))

2919 (*
hook
)(
mem
, 
	`RETURN_ADDRESS
 (0));

2923 i‡(
mem
 == 0)

2926 
p
 = 
	`mem2chunk
 (
mem
);

2928 i‡(
	`chunk_is_mm≠≥d
 (
p
))

2931 i‡(!
mp_
.
no_dyn_thªshﬁd


2932 && 
p
->
size
 > 
mp_
.
mm≠_thªshﬁd


2933 && 
p
->
size
 <
DEFAULT_MMAP_THRESHOLD_MAX
)

2935 
mp_
.
mm≠_thªshﬁd
 = 
	`chunksize
 (
p
);

2936 
mp_
.
åim_thªshﬁd
 = 2 * mp_.
mm≠_thªshﬁd
;

2937 
	`LIBC_PROBE
 (
mem‹y_mÆl›t_‰ì_dyn_thªshﬁds
, 2,

2938 
mp_
.
mm≠_thªshﬁd
, mp_.
åim_thªshﬁd
);

2940 
	`munm≠_chunk
 (
p
);

2944 
¨_±r
 = 
	`¨ía_f‹_chunk
 (
p
);

2945 
	`_öt_‰ì
 (
¨_±r
, 
p
, 0);

2946 
	}
}

2947 
	$libc_hiddí_def
 (
__libc_‰ì
)

2950 
	$__libc_ªÆloc
 (*
ﬁdmem
, 
size_t
 
byãs
)

2952 
m°©e
 
¨_±r
;

2953 
INTERNAL_SIZE_T
 
nb
;

2955 *
√wp
;

2957 *(*
hook
Ë(*, 
size_t
, const *) =

2958 
	`©omic_f‹˚d_ªad
 (
__ªÆloc_hook
);

2959 i‡(
	`__buûtö_ex≥˘
 (
hook
 !
NULL
, 0))

2960  (*
hook
)(
ﬁdmem
, 
byãs
, 
	`RETURN_ADDRESS
 (0));

2962 #i‡
REALLOC_ZERO_BYTES_FREES


2963 i‡(
byãs
 =0 && 
ﬁdmem
 !
NULL
)

2965 
	`__libc_‰ì
 (
ﬁdmem
);  0;

2970 i‡(
ﬁdmem
 == 0)

2971  
	`__libc_mÆloc
 (
byãs
);

2974 c⁄° 
mchunk±r
 
ﬁdp
 = 
	`mem2chunk
 (
ﬁdmem
);

2976 c⁄° 
INTERNAL_SIZE_T
 
ﬁdsize
 = 
	`chunksize
 (
ﬁdp
);

2982 i‡(
	`__buûtö_ex≥˘
 ((
uöçå_t
Ë
ﬁdp
 > (uöçå_tË-
ﬁdsize
, 0)

2983 || 
	`__buûtö_ex≥˘
 (
	`mißlig√d_chunk
 (
ﬁdp
), 0))

2985 
	`mÆloc_¥öãº
 (
check_a˘i⁄
, "ªÆloc(): invÆidÖoöãr", 
ﬁdmem
);

2986  
NULL
;

2989 
	`checked_ªque°2size
 (
byãs
, 
nb
);

2991 i‡(
	`chunk_is_mm≠≥d
 (
ﬁdp
))

2993 *
√wmem
;

2995 #i‡
HAVE_MREMAP


2996 
√wp
 = 
	`mªm≠_chunk
 (
ﬁdp
, 
nb
);

2997 i‡(
√wp
)

2998  
	`chunk2mem
 (
√wp
);

3001 i‡(
ﬁdsize
 - 
SIZE_SZ
 >
nb
)

3002  
ﬁdmem
;

3005 
√wmem
 = 
	`__libc_mÆloc
 (
byãs
);

3006 i‡(
√wmem
 == 0)

3009 
	`mem˝y
 (
√wmem
, 
ﬁdmem
, 
ﬁdsize
 - 2 * 
SIZE_SZ
);

3010 
	`munm≠_chunk
 (
ﬁdp
);

3011  
√wmem
;

3014 
¨_±r
 = 
	`¨ía_f‹_chunk
 (
ﬁdp
);

3015 (Ë
	`muãx_lock
 (&
¨_±r
->
muãx
);

3018 
√wp
 = 
	`_öt_ªÆloc
 (
¨_±r
, 
ﬁdp
, 
ﬁdsize
, 
nb
);

3020 (Ë
	`muãx_u∆ock
 (&
¨_±r
->
muãx
);

3021 
	`as£π
 (!
√wp
 || 
	`chunk_is_mm≠≥d
 (
	`mem2chunk
 (newp)) ||

3022 
¨_±r
 =
	`¨ía_f‹_chunk
 (
	`mem2chunk
 (
√wp
)));

3024 i‡(
√wp
 =
NULL
)

3027 
	`LIBC_PROBE
 (
mem‹y_ªÆloc_ªåy
, 2, 
byãs
, 
ﬁdmem
);

3028 
√wp
 = 
	`__libc_mÆloc
 (
byãs
);

3029 i‡(
√wp
 !
NULL
)

3031 
	`mem˝y
 (
√wp
, 
ﬁdmem
, 
ﬁdsize
 - 
SIZE_SZ
);

3032 
	`_öt_‰ì
 (
¨_±r
, 
ﬁdp
, 0);

3036  
√wp
;

3037 
	}
}

3038 
	$libc_hiddí_def
 (
__libc_ªÆloc
)

3041 
	$__libc_memÆign
 (
size_t
 
Æignmít
, size_à
byãs
)

3043 *
addªss
 = 
	`RETURN_ADDRESS
 (0);

3044  
	`_mid_memÆign
 (
Æignmít
, 
byãs
, 
addªss
);

3045 
	}
}

3048 
	$_mid_memÆign
 (
size_t
 
Æignmít
, size_à
byãs
, *
addªss
)

3050 
m°©e
 
¨_±r
;

3051 *
p
;

3053 *(*
hook
Ë(
size_t
, size_t, const *) =

3054 
	`©omic_f‹˚d_ªad
 (
__memÆign_hook
);

3055 i‡(
	`__buûtö_ex≥˘
 (
hook
 !
NULL
, 0))

3056  (*
hook
)(
Æignmít
, 
byãs
, 
addªss
);

3059 i‡(
Æignmít
 <
MALLOC_ALIGNMENT
)

3060  
	`__libc_mÆloc
 (
byãs
);

3063 i‡(
Æignmít
 < 
MINSIZE
)

3064 
Æignmít
 = 
MINSIZE
;

3068 i‡(
Æignmít
 > 
SIZE_MAX
 / 2 + 1)

3070 
	`__£t_î∫o
 (
EINVAL
);

3075 i‡(
byãs
 > 
SIZE_MAX
 - 
Æignmít
 - 
MINSIZE
)

3077 
	`__£t_î∫o
 (
ENOMEM
);

3083 i‡(!
	`powîof2
 (
Æignmít
))

3085 
size_t
 
a
 = 
MALLOC_ALIGNMENT
 * 2;

3086 
a
 < 
Æignmít
)

3087 
a
 <<= 1;

3088 
Æignmít
 = 
a
;

3091 
	`¨ía_gë
 (
¨_±r
, 
byãs
 + 
Æignmít
 + 
MINSIZE
);

3092 i‡(!
¨_±r
)

3095 
p
 = 
	`_öt_memÆign
 (
¨_±r
, 
Æignmít
, 
byãs
);

3096 i‡(!
p
)

3098 
	`LIBC_PROBE
 (
mem‹y_memÆign_ªåy
, 2, 
byãs
, 
Æignmít
);

3099 
¨_±r
 = 
	`¨ía_gë_ªåy
 (¨_±r, 
byãs
);

3100 i‡(
	`__buûtö_ex≥˘
 (
¨_±r
 !
NULL
, 1))

3102 
p
 = 
	`_öt_memÆign
 (
¨_±r
, 
Æignmít
, 
byãs
);

3103 (Ë
	`muãx_u∆ock
 (&
¨_±r
->
muãx
);

3107 (Ë
	`muãx_u∆ock
 (&
¨_±r
->
muãx
);

3108 
	`as£π
 (!
p
 || 
	`chunk_is_mm≠≥d
 (
	`mem2chunk
 (p)) ||

3109 
¨_±r
 =
	`¨ía_f‹_chunk
 (
	`mem2chunk
 (
p
)));

3110  
p
;

3111 
	}
}

3113 
	$wók_Æüs
 (
__libc_memÆign
, 
Æig√d_Æloc
)

3114 
	$libc_hiddí_def
 (
__libc_memÆign
)

3117 
	$__libc_vÆloc
 (
size_t
 
byãs
)

3119 i‡(
__mÆloc_öôülized
 < 0)

3120 
	`±mÆloc_öô
 ();

3122 *
addªss
 = 
	`RETURN_ADDRESS
 (0);

3123 
size_t
 
∑gesz
 = 
	`GLRO
 (
dl_∑gesize
);

3124  
	`_mid_memÆign
 (
∑gesz
, 
byãs
, 
addªss
);

3125 
	}
}

3128 
	$__libc_pvÆloc
 (
size_t
 
byãs
)

3130 i‡(
__mÆloc_öôülized
 < 0)

3131 
	`±mÆloc_öô
 ();

3133 *
addªss
 = 
	`RETURN_ADDRESS
 (0);

3134 
size_t
 
∑gesz
 = 
	`GLRO
 (
dl_∑gesize
);

3135 
size_t
 
∑ge_mask
 = 
	`GLRO
 (
dl_∑gesize
) - 1;

3136 
size_t
 
rounded_byãs
 = (
byãs
 + 
∑ge_mask
) & ~(page_mask);

3139 i‡(
byãs
 > 
SIZE_MAX
 - 2 * 
∑gesz
 - 
MINSIZE
)

3141 
	`__£t_î∫o
 (
ENOMEM
);

3145  
	`_mid_memÆign
 (
∑gesz
, 
rounded_byãs
, 
addªss
);

3146 
	}
}

3149 
	$__libc_ˇŒoc
 (
size_t
 
n
, size_à
ñem_size
)

3151 
m°©e
 
av
;

3152 
mchunk±r
 
ﬁdt›
, 
p
;

3153 
INTERNAL_SIZE_T
 
byãs
, 
sz
, 
csz
, 
ﬁdt›size
;

3154 *
mem
;

3155 
˛órsize
;

3156 
n˛órs
;

3157 
INTERNAL_SIZE_T
 *
d
;

3160 
byãs
 = 
n
 * 
ñem_size
;

3161 
	#HALF_INTERNAL_SIZE_T
 \

3162 (((
INTERNAL_SIZE_T
Ë1Ë<< (8 *  (INTERNAL_SIZE_TË/ 2))

	)

3163 i‡(
	`__buûtö_ex≥˘
 ((
n
 | 
ñem_size
Ë>
HALF_INTERNAL_SIZE_T
, 0))

3165 i‡(
ñem_size
 !0 && 
byãs
 /ÉÀm_sizê!
n
)

3167 
	`__£t_î∫o
 (
ENOMEM
);

3172 *(*
hook
Ë(
size_t
, const *) =

3173 
	`©omic_f‹˚d_ªad
 (
__mÆloc_hook
);

3174 i‡(
	`__buûtö_ex≥˘
 (
hook
 !
NULL
, 0))

3176 
sz
 = 
byãs
;

3177 
mem
 = (*
hook
)(
sz
, 
	`RETURN_ADDRESS
 (0));

3178 i‡(
mem
 == 0)

3181  
	`mem£t
 (
mem
, 0, 
sz
);

3184 
sz
 = 
byãs
;

3186 
	`¨ía_gë
 (
av
, 
sz
);

3187 i‡(!
av
)

3192 #i‡
MORECORE_CLEARS


3193 
ﬁdt›
 = 
	`t›
 (
av
);

3194 
ﬁdt›size
 = 
	`chunksize
 (
	`t›
 (
av
));

3195 #i‡
MORECORE_CLEARS
 < 2

3197 i‡(
av
 =&
maö_¨ía
 &&

3198 
ﬁdt›size
 < 
mp_
.
sbrk_ba£
 + 
av
->
max_sy°em_mem
 - (*Ë
ﬁdt›
)

3199 
ﬁdt›size
 = (
mp_
.
sbrk_ba£
 + 
av
->
max_sy°em_mem
 - (*Ë
ﬁdt›
);

3201 i‡(
av
 !&
maö_¨ía
)

3203 
hóp_öfo
 *
hóp
 = 
	`hóp_f‹_±r
 (
ﬁdt›
);

3204 i‡(
ﬁdt›size
 < (*Ë
hóp
 + hóp->
m¥Ÿe˘_size
 - (*Ë
ﬁdt›
)

3205 
ﬁdt›size
 = (*Ë
hóp
 + hóp->
m¥Ÿe˘_size
 - (*Ë
ﬁdt›
;

3208 
mem
 = 
	`_öt_mÆloc
 (
av
, 
sz
);

3211 
	`as£π
 (!
mem
 || 
	`chunk_is_mm≠≥d
 (
	`mem2chunk
 (mem)) ||

3212 
av
 =
	`¨ía_f‹_chunk
 (
	`mem2chunk
 (
mem
)));

3214 i‡(
mem
 == 0)

3216 
	`LIBC_PROBE
 (
mem‹y_ˇŒoc_ªåy
, 1, 
sz
);

3217 
av
 = 
	`¨ía_gë_ªåy
 (av, 
sz
);

3218 i‡(
	`__buûtö_ex≥˘
 (
av
 !
NULL
, 1))

3220 
mem
 = 
	`_öt_mÆloc
 (
av
, 
sz
);

3221 (Ë
	`muãx_u∆ock
 (&
av
->
muãx
);

3223 i‡(
mem
 == 0)

3227 (Ë
	`muãx_u∆ock
 (&
av
->
muãx
);

3228 
p
 = 
	`mem2chunk
 (
mem
);

3231 i‡(
	`chunk_is_mm≠≥d
 (
p
))

3233 i‡(
	`__buûtö_ex≥˘
 (
≥πurb_byã
, 0))

3234  
	`mem£t
 (
mem
, 0, 
sz
);

3236  
mem
;

3239 
csz
 = 
	`chunksize
 (
p
);

3241 #i‡
MORECORE_CLEARS


3242 i‡(
≥πurb_byã
 =0 && (
p
 =
ﬁdt›
 && 
csz
 > 
ﬁdt›size
))

3245 
csz
 = 
ﬁdt›size
;

3252 
d
 = (
INTERNAL_SIZE_T
 *Ë
mem
;

3253 
˛órsize
 = 
csz
 - 
SIZE_SZ
;

3254 
n˛órs
 = 
˛órsize
 /  (
INTERNAL_SIZE_T
);

3255 
	`as£π
 (
n˛órs
 >= 3);

3257 i‡(
n˛órs
 > 9)

3258  
	`mem£t
 (
d
, 0, 
˛órsize
);

3262 *(
d
 + 0) = 0;

3263 *(
d
 + 1) = 0;

3264 *(
d
 + 2) = 0;

3265 i‡(
n˛órs
 > 4)

3267 *(
d
 + 3) = 0;

3268 *(
d
 + 4) = 0;

3269 i‡(
n˛órs
 > 6)

3271 *(
d
 + 5) = 0;

3272 *(
d
 + 6) = 0;

3273 i‡(
n˛órs
 > 8)

3275 *(
d
 + 7) = 0;

3276 *(
d
 + 8) = 0;

3282  
mem
;

3283 
	}
}

3290 
	$_öt_mÆloc
 (
m°©e
 
av
, 
size_t
 
byãs
)

3292 
INTERNAL_SIZE_T
 
nb
;

3293 
idx
;

3294 
mbö±r
 
bö
;

3296 
mchunk±r
 
vi˘im
;

3297 
INTERNAL_SIZE_T
 
size
;

3298 
vi˘im_ödex
;

3300 
mchunk±r
 
ªmaödî
;

3301 
ªmaödî_size
;

3303 
block
;

3304 
bô
;

3305 
m≠
;

3307 
mchunk±r
 
fwd
;

3308 
mchunk±r
 
bck
;

3310 c⁄° *
îr°r
 = 
NULL
;

3312 
	`¥ötf
("Inside malloc\n");

3322 
	`checked_ªque°2size
 (
byãs
, 
nb
);

3330 i‡((Ë(
nb
Ë<(Ë(
	`gë_max_Á°
 ()))

3332 
idx
 = 
	`Á°bö_ödex
 (
nb
);

3333 
mÁ°bö±r
 *
fb
 = &
	`Á°bö
 (
av
, 
idx
);

3334 
mchunk±r
 
µ
 = *
fb
;

3337 
vi˘im
 = 
µ
;

3338 i‡(
vi˘im
 =
NULL
)

3341 (
µ
 = 
	`ˇtomic_com∑ª_™d_exch™ge_vÆ_acq
 (
fb
, 
vi˘im
->
fd
, victim))

3342 !
vi˘im
);

3343 i‡(
vi˘im
 != 0)

3345 i‡(
	`__buûtö_ex≥˘
 (
	`Á°bö_ödex
 (
	`chunksize
 (
vi˘im
)Ë!
idx
, 0))

3347 
îr°r
 = "malloc(): memory corruption (fast)";

3348 
îrout
:

3349 
	`mÆloc_¥öãº
 (
check_a˘i⁄
, 
îr°r
, 
	`chunk2mem
 (
vi˘im
));

3350  
NULL
;

3352 
	`check_ªmÆlo˚d_chunk
 (
av
, 
vi˘im
, 
nb
);

3353 *
p
 = 
	`chunk2mem
 (
vi˘im
);

3354 
	`Æloc_≥πurb
 (
p
, 
byãs
);

3355  
p
;

3367 i‡(
	`ö_smÆlbö_ønge
 (
nb
))

3369 
idx
 = 
	`smÆlbö_ödex
 (
nb
);

3370 
bö
 = 
	`bö_©
 (
av
, 
idx
);

3372 i‡((
vi˘im
 = 
	`œ°
 (
bö
)) != bin)

3374 i‡(
vi˘im
 == 0)

3375 
	`mÆloc_c⁄sﬁid©e
 (
av
);

3378 
bck
 = 
vi˘im
->
bk
;

3379 i‡(
	`__glibc_u∆ikñy
 (
bck
->
fd
 !
vi˘im
))

3381 
îr°r
 = "malloc(): smallbin doubleÜinkedÜist corrupted";

3382 
îrout
;

3384 
	`£t_öu£_bô_©_off£t
 (
vi˘im
, 
nb
);

3385 
bö
->
bk
 = 
bck
;

3386 
bck
->
fd
 = 
bö
;

3388 i‡(
av
 !&
maö_¨ía
)

3389 
vi˘im
->
size
 |
NON_MAIN_ARENA
;

3390 
	`check_mÆlo˚d_chunk
 (
av
, 
vi˘im
, 
nb
);

3391 *
p
 = 
	`chunk2mem
 (
vi˘im
);

3392 
	`Æloc_≥πurb
 (
p
, 
byãs
);

3393  
p
;

3411 
idx
 = 
	`œrgebö_ödex
 (
nb
);

3412 i‡(
	`have_Á°chunks
 (
av
))

3413 
	`mÆloc_c⁄sﬁid©e
 (
av
);

3431 
ôîs
 = 0;

3432 (
vi˘im
 = 
	`uns‹ãd_chunks
 (
av
)->
bk
) != unsorted_chunks (av))

3434 
bck
 = 
vi˘im
->
bk
;

3435 i‡(
	`__buûtö_ex≥˘
 (
vi˘im
->
size
 <2 * 
SIZE_SZ
, 0)

3436 || 
	`__buûtö_ex≥˘
 (
vi˘im
->
size
 > 
av
->
sy°em_mem
, 0))

3437 
	`mÆloc_¥öãº
 (
check_a˘i⁄
, "malloc(): memory corruption",

3438 
	`chunk2mem
 (
vi˘im
));

3439 
size
 = 
	`chunksize
 (
vi˘im
);

3449 i‡(
	`ö_smÆlbö_ønge
 (
nb
) &&

3450 
bck
 =
	`uns‹ãd_chunks
 (
av
) &&

3451 
vi˘im
 =
av
->
œ°_ªmaödî
 &&

3452 (Ë(
size
Ë> (Ë(
nb
 + 
MINSIZE
))

3455 
ªmaödî_size
 = 
size
 - 
nb
;

3456 
ªmaödî
 = 
	`chunk_©_off£t
 (
vi˘im
, 
nb
);

3457 
	`uns‹ãd_chunks
 (
av
)->
bk
 = uns‹ãd_chunk†◊v)->
fd
 = 
ªmaödî
;

3458 
av
->
œ°_ªmaödî
 = 
ªmaödî
;

3459 
ªmaödî
->
bk
 =Ñemaödî->
fd
 = 
	`uns‹ãd_chunks
 (
av
);

3460 i‡(!
	`ö_smÆlbö_ønge
 (
ªmaödî_size
))

3462 
ªmaödî
->
fd_√xtsize
 = 
NULL
;

3463 
ªmaödî
->
bk_√xtsize
 = 
NULL
;

3466 
	`£t_hód
 (
vi˘im
, 
nb
 | 
PREV_INUSE
 |

3467 (
av
 !&
maö_¨ía
 ? 
NON_MAIN_ARENA
 : 0));

3468 
	`£t_hód
 (
ªmaödî
, 
ªmaödî_size
 | 
PREV_INUSE
);

3469 
	`£t_foŸ
 (
ªmaödî
, 
ªmaödî_size
);

3471 
	`check_mÆlo˚d_chunk
 (
av
, 
vi˘im
, 
nb
);

3472 *
p
 = 
	`chunk2mem
 (
vi˘im
);

3473 
	`Æloc_≥πurb
 (
p
, 
byãs
);

3474  
p
;

3478 
	`uns‹ãd_chunks
 (
av
)->
bk
 = 
bck
;

3479 
bck
->
fd
 = 
	`uns‹ãd_chunks
 (
av
);

3483 i‡(
size
 =
nb
)

3485 
	`£t_öu£_bô_©_off£t
 (
vi˘im
, 
size
);

3486 i‡(
av
 !&
maö_¨ía
)

3487 
vi˘im
->
size
 |
NON_MAIN_ARENA
;

3488 
	`check_mÆlo˚d_chunk
 (
av
, 
vi˘im
, 
nb
);

3489 *
p
 = 
	`chunk2mem
 (
vi˘im
);

3490 
	`Æloc_≥πurb
 (
p
, 
byãs
);

3491  
p
;

3496 i‡(
	`ö_smÆlbö_ønge
 (
size
))

3498 
vi˘im_ödex
 = 
	`smÆlbö_ödex
 (
size
);

3499 
bck
 = 
	`bö_©
 (
av
, 
vi˘im_ödex
);

3500 
fwd
 = 
bck
->
fd
;

3504 
vi˘im_ödex
 = 
	`œrgebö_ödex
 (
size
);

3505 
bck
 = 
	`bö_©
 (
av
, 
vi˘im_ödex
);

3506 
fwd
 = 
bck
->
fd
;

3509 i‡(
fwd
 !
bck
)

3512 
size
 |
PREV_INUSE
;

3514 
	`as£π
 ((
bck
->
bk
->
size
 & 
NON_MAIN_ARENA
) == 0);

3515 i‡((Ë(
size
Ë< (Ë(
bck
->
bk
->size))

3517 
fwd
 = 
bck
;

3518 
bck
 = bck->
bk
;

3520 
vi˘im
->
fd_√xtsize
 = 
fwd
->
fd
;

3521 
vi˘im
->
bk_√xtsize
 = 
fwd
->
fd
->bk_nextsize;

3522 
fwd
->
fd
->
bk_√xtsize
 = 
vi˘im
->bk_√xtsize->
fd_√xtsize
 = victim;

3526 
	`as£π
 ((
fwd
->
size
 & 
NON_MAIN_ARENA
) == 0);

3527 (Ë
size
 < 
fwd
->size)

3529 
fwd
 = fwd->
fd_√xtsize
;

3530 
	`as£π
 ((
fwd
->
size
 & 
NON_MAIN_ARENA
) == 0);

3533 i‡((Ë
size
 =(Ë
fwd
->size)

3535 
fwd
 = fwd->
fd
;

3538 
vi˘im
->
fd_√xtsize
 = 
fwd
;

3539 
vi˘im
->
bk_√xtsize
 = 
fwd
->bk_nextsize;

3540 
fwd
->
bk_√xtsize
 = 
vi˘im
;

3541 
vi˘im
->
bk_√xtsize
->
fd_√xtsize
 = victim;

3543 
bck
 = 
fwd
->
bk
;

3547 
vi˘im
->
fd_√xtsize
 = vi˘im->
bk_√xtsize
 = victim;

3550 
	`m¨k_bö
 (
av
, 
vi˘im_ödex
);

3551 
vi˘im
->
bk
 = 
bck
;

3552 
vi˘im
->
fd
 = 
fwd
;

3553 
fwd
->
bk
 = 
vi˘im
;

3554 
bck
->
fd
 = 
vi˘im
;

3556 
	#MAX_ITERS
 10000

	)

3557 i‡(++
ôîs
 >
MAX_ITERS
)

3566 i‡(!
	`ö_smÆlbö_ønge
 (
nb
))

3568 
bö
 = 
	`bö_©
 (
av
, 
idx
);

3571 i‡((
vi˘im
 = 
	`fú°
 (
bö
)) != bin &&

3572 (Ë(
vi˘im
->
size
Ë>(Ë(
nb
))

3574 
vi˘im
 = vi˘im->
bk_√xtsize
;

3575 ((Ë(
size
 = 
	`chunksize
 (
vi˘im
)) <

3576 (Ë(
nb
)))

3577 
vi˘im
 = vi˘im->
bk_√xtsize
;

3581 i‡(
vi˘im
 !
	`œ°
 (
bö
Ë&& vi˘im->
size
 =vi˘im->
fd
->size)

3582 
vi˘im
 = vi˘im->
fd
;

3584 
ªmaödî_size
 = 
size
 - 
nb
;

3585 
	`u∆ök
 (
vi˘im
, 
bck
, 
fwd
);

3588 i‡(
ªmaödî_size
 < 
MINSIZE
)

3590 
	`£t_öu£_bô_©_off£t
 (
vi˘im
, 
size
);

3591 i‡(
av
 !&
maö_¨ía
)

3592 
vi˘im
->
size
 |
NON_MAIN_ARENA
;

3597 
ªmaödî
 = 
	`chunk_©_off£t
 (
vi˘im
, 
nb
);

3600 
bck
 = 
	`uns‹ãd_chunks
 (
av
);

3601 
fwd
 = 
bck
->
fd
;

3602 i‡(
	`__glibc_u∆ikñy
 (
fwd
->
bk
 !
bck
))

3604 
îr°r
 = "malloc(): corrupted unsorted chunks";

3605 
îrout
;

3607 
ªmaödî
->
bk
 = 
bck
;

3608 
ªmaödî
->
fd
 = 
fwd
;

3609 
bck
->
fd
 = 
ªmaödî
;

3610 
fwd
->
bk
 = 
ªmaödî
;

3611 i‡(!
	`ö_smÆlbö_ønge
 (
ªmaödî_size
))

3613 
ªmaödî
->
fd_√xtsize
 = 
NULL
;

3614 
ªmaödî
->
bk_√xtsize
 = 
NULL
;

3616 
	`£t_hód
 (
vi˘im
, 
nb
 | 
PREV_INUSE
 |

3617 (
av
 !&
maö_¨ía
 ? 
NON_MAIN_ARENA
 : 0));

3618 
	`£t_hód
 (
ªmaödî
, 
ªmaödî_size
 | 
PREV_INUSE
);

3619 
	`£t_foŸ
 (
ªmaödî
, 
ªmaödî_size
);

3621 
	`check_mÆlo˚d_chunk
 (
av
, 
vi˘im
, 
nb
);

3622 *
p
 = 
	`chunk2mem
 (
vi˘im
);

3623 
	`Æloc_≥πurb
 (
p
, 
byãs
);

3624  
p
;

3639 ++
idx
;

3640 
bö
 = 
	`bö_©
 (
av
, 
idx
);

3641 
block
 = 
	`idx2block
 (
idx
);

3642 
m≠
 = 
av
->
böm≠
[
block
];

3643 
bô
 = 
	`idx2bô
 (
idx
);

3648 i‡(
bô
 > 
m≠
 || bit == 0)

3652 i‡(++
block
 >
BINMAPSIZE
)

3653 
u£_t›
;

3655 (
m≠
 = 
av
->
böm≠
[
block
]) == 0);

3657 
bö
 = 
	`bö_©
 (
av
, (
block
 << 
BINMAPSHIFT
));

3658 
bô
 = 1;

3662 (
bô
 & 
m≠
) == 0)

3664 
bö
 = 
	`√xt_bö
 (bin);

3665 
bô
 <<= 1;

3666 
	`as£π
 (
bô
 != 0);

3670 
vi˘im
 = 
	`œ°
 (
bö
);

3673 i‡(
vi˘im
 =
bö
)

3675 
av
->
böm≠
[
block
] = 
m≠
 &~
bô
;

3676 
bö
 = 
	`√xt_bö
 (bin);

3677 
bô
 <<= 1;

3682 
size
 = 
	`chunksize
 (
vi˘im
);

3685 
	`as£π
 ((Ë(
size
Ë>(Ë(
nb
));

3687 
ªmaödî_size
 = 
size
 - 
nb
;

3690 
	`u∆ök
 (
vi˘im
, 
bck
, 
fwd
);

3693 i‡(
ªmaödî_size
 < 
MINSIZE
)

3695 
	`£t_öu£_bô_©_off£t
 (
vi˘im
, 
size
);

3696 i‡(
av
 !&
maö_¨ía
)

3697 
vi˘im
->
size
 |
NON_MAIN_ARENA
;

3703 
ªmaödî
 = 
	`chunk_©_off£t
 (
vi˘im
, 
nb
);

3707 
bck
 = 
	`uns‹ãd_chunks
 (
av
);

3708 
fwd
 = 
bck
->
fd
;

3709 i‡(
	`__glibc_u∆ikñy
 (
fwd
->
bk
 !
bck
))

3711 
îr°r
 = "malloc(): corrupted unsorted chunks 2";

3712 
îrout
;

3714 
ªmaödî
->
bk
 = 
bck
;

3715 
ªmaödî
->
fd
 = 
fwd
;

3716 
bck
->
fd
 = 
ªmaödî
;

3717 
fwd
->
bk
 = 
ªmaödî
;

3720 i‡(
	`ö_smÆlbö_ønge
 (
nb
))

3721 
av
->
œ°_ªmaödî
 = 
ªmaödî
;

3722 i‡(!
	`ö_smÆlbö_ønge
 (
ªmaödî_size
))

3724 
ªmaödî
->
fd_√xtsize
 = 
NULL
;

3725 
ªmaödî
->
bk_√xtsize
 = 
NULL
;

3727 
	`£t_hód
 (
vi˘im
, 
nb
 | 
PREV_INUSE
 |

3728 (
av
 !&
maö_¨ía
 ? 
NON_MAIN_ARENA
 : 0));

3729 
	`£t_hód
 (
ªmaödî
, 
ªmaödî_size
 | 
PREV_INUSE
);

3730 
	`£t_foŸ
 (
ªmaödî
, 
ªmaödî_size
);

3732 
	`check_mÆlo˚d_chunk
 (
av
, 
vi˘im
, 
nb
);

3733 *
p
 = 
	`chunk2mem
 (
vi˘im
);

3734 
	`Æloc_≥πurb
 (
p
, 
byãs
);

3735  
p
;

3739 
u£_t›
:

3755 
vi˘im
 = 
av
->
t›
;

3756 
size
 = 
	`chunksize
 (
vi˘im
);

3758 i‡((Ë(
size
Ë>(Ë(
nb
 + 
MINSIZE
))

3760 
ªmaödî_size
 = 
size
 - 
nb
;

3761 
ªmaödî
 = 
	`chunk_©_off£t
 (
vi˘im
, 
nb
);

3762 
av
->
t›
 = 
ªmaödî
;

3763 
	`£t_hód
 (
vi˘im
, 
nb
 | 
PREV_INUSE
 |

3764 (
av
 !&
maö_¨ía
 ? 
NON_MAIN_ARENA
 : 0));

3765 
	`£t_hód
 (
ªmaödî
, 
ªmaödî_size
 | 
PREV_INUSE
);

3767 
	`check_mÆlo˚d_chunk
 (
av
, 
vi˘im
, 
nb
);

3768 *
p
 = 
	`chunk2mem
 (
vi˘im
);

3769 
	`Æloc_≥πurb
 (
p
, 
byãs
);

3770  
p
;

3775 i‡(
	`have_Á°chunks
 (
av
))

3777 
	`mÆloc_c⁄sﬁid©e
 (
av
);

3779 i‡(
	`ö_smÆlbö_ønge
 (
nb
))

3780 
idx
 = 
	`smÆlbö_ödex
 (
nb
);

3782 
idx
 = 
	`œrgebö_ödex
 (
nb
);

3790 *
p
 = 
	`sysmÆloc
 (
nb
, 
av
);

3791 i‡(
p
 !
NULL
)

3792 
	`Æloc_≥πurb
 (
p
, 
byãs
);

3793  
p
;

3796 
	}
}

3803 
	$_öt_‰ì
 (
m°©e
 
av
, 
mchunk±r
 
p
, 
have_lock
)

3805 
INTERNAL_SIZE_T
 
size
;

3806 
mÁ°bö±r
 *
fb
;

3807 
mchunk±r
 
√xtchunk
;

3808 
INTERNAL_SIZE_T
 
√xtsize
;

3809 
√xtöu£
;

3810 
INTERNAL_SIZE_T
 
¥evsize
;

3811 
mchunk±r
 
bck
;

3812 
mchunk±r
 
fwd
;

3814 c⁄° *
îr°r
 = 
NULL
;

3815 
locked
 = 0;

3817 
size
 = 
	`chunksize
 (
p
);

3823 i‡(
	`__buûtö_ex≥˘
 ((
uöçå_t
Ë
p
 > (uöçå_tË-
size
, 0)

3824 || 
	`__buûtö_ex≥˘
 (
	`mißlig√d_chunk
 (
p
), 0))

3826 
îr°r
 = "free(): invalidÖointer";

3827 
îrout
:

3828 i‡(!
have_lock
 && 
locked
)

3829 (Ë
	`muãx_u∆ock
 (&
av
->
muãx
);

3830 
	`mÆloc_¥öãº
 (
check_a˘i⁄
, 
îr°r
, 
	`chunk2mem
 (
p
));

3835 i‡(
	`__glibc_u∆ikñy
 (
size
 < 
MINSIZE
 || !
	`Æig√d_OK
 (size)))

3837 
îr°r
 = "free(): invalid size";

3838 
îrout
;

3841 
	`check_öu£_chunk
(
av
, 
p
);

3848 i‡(()(
size
Ë<()(
	`gë_max_Á°
 ())

3850 #i‡
TRIM_FASTBINS


3855 && (
	`chunk_©_off£t
(
p
, 
size
Ë!
av
->
t›
)

3859 i‡(
	`__buûtö_ex≥˘
 (
	`chunk_©_off£t
 (
p
, 
size
)->sizê<2 * 
SIZE_SZ
, 0)

3860 || 
	`__buûtö_ex≥˘
 (
	`chunksize
 (
	`chunk_©_off£t
 (
p
, 
size
))

3861 >
av
->
sy°em_mem
, 0))

3866 i‡(
have_lock


3867 || ({ 
	`as£π
 (
locked
 == 0);

3868 
	`muãx_lock
(&
av
->
muãx
);

3869 
locked
 = 1;

3870 
	`chunk_©_off£t
 (
p
, 
size
)->sizê<2 * 
SIZE_SZ


3871 || 
	`chunksize
 (
	`chunk_©_off£t
 (
p
, 
size
)Ë>
av
->
sy°em_mem
;

3874 
îr°r
 = "free(): invalidÇext size (fast)";

3875 
îrout
;

3877 i‡(! 
have_lock
)

3879 ()
	`muãx_u∆ock
(&
av
->
muãx
);

3880 
locked
 = 0;

3884 
	`‰ì_≥πurb
 (
	`chunk2mem
(
p
), 
size
 - 2 * 
SIZE_SZ
);

3886 
	`£t_Á°chunks
(
av
);

3887 
idx
 = 
	`Á°bö_ödex
(
size
);

3888 
fb
 = &
	`Á°bö
 (
av
, 
idx
);

3891 
mchunk±r
 
ﬁd
 = *
fb
, 
ﬁd2
;

3892 
ﬁd_idx
 = ~0u;

3897 i‡(
	`__buûtö_ex≥˘
 (
ﬁd
 =
p
, 0))

3899 
îr°r
 = "double free or corruption (fasttop)";

3900 
îrout
;

3906 i‡(
have_lock
 && 
ﬁd
 !
NULL
)

3907 
ﬁd_idx
 = 
	`Á°bö_ödex
(
	`chunksize
(
ﬁd
));

3908 
p
->
fd
 = 
ﬁd2
 = 
ﬁd
;

3910 (
ﬁd
 = 
	`ˇtomic_com∑ª_™d_exch™ge_vÆ_ªl
 (
fb
, 
p
, 
ﬁd2
)) != old2);

3912 i‡(
have_lock
 && 
ﬁd
 !
NULL
 && 
	`__buûtö_ex≥˘
 (
ﬁd_idx
 !
idx
, 0))

3914 
îr°r
 = "invalid fastbinÉntry (free)";

3915 
îrout
;

3923 i‡(!
	`chunk_is_mm≠≥d
(
p
)) {

3924 i‡(! 
have_lock
) {

3925 ()
	`muãx_lock
(&
av
->
muãx
);

3926 
locked
 = 1;

3929 
√xtchunk
 = 
	`chunk_©_off£t
(
p
, 
size
);

3933 i‡(
	`__glibc_u∆ikñy
 (
p
 =
av
->
t›
))

3935 
îr°r
 = "double free or corruption (top)";

3936 
îrout
;

3939 i‡(
	`__buûtö_ex≥˘
 (
	`c⁄tiguous
 (
av
)

3940 && (*Ë
√xtchunk


3941 >((*Ë
av
->
t›
 + 
	`chunksize
(av->top)), 0))

3943 
îr°r
 = "double free or corruption (out)";

3944 
îrout
;

3947 i‡(
	`__glibc_u∆ikñy
 (!
	`¥ev_öu£
(
√xtchunk
)))

3949 
îr°r
 = "double free or corruption (!prev)";

3950 
îrout
;

3953 
√xtsize
 = 
	`chunksize
(
√xtchunk
);

3954 i‡(
	`__buûtö_ex≥˘
 (
√xtchunk
->
size
 <2 * 
SIZE_SZ
, 0)

3955 || 
	`__buûtö_ex≥˘
 (
√xtsize
 >
av
->
sy°em_mem
, 0))

3957 
îr°r
 = "free(): invalidÇext size (normal)";

3958 
îrout
;

3961 
	`‰ì_≥πurb
 (
	`chunk2mem
(
p
), 
size
 - 2 * 
SIZE_SZ
);

3964 i‡(!
	`¥ev_öu£
(
p
)) {

3965 
¥evsize
 = 
p
->
¥ev_size
;

3966 
size
 +
¥evsize
;

3967 
p
 = 
	`chunk_©_off£t
’, -((Ë
¥evsize
));

3968 
	`u∆ök
(
p
, 
bck
, 
fwd
);

3971 i‡(
√xtchunk
 !
av
->
t›
) {

3973 
√xtöu£
 = 
	`öu£_bô_©_off£t
(
√xtchunk
, 
√xtsize
);

3976 i‡(!
√xtöu£
) {

3977 
	`u∆ök
(
√xtchunk
, 
bck
, 
fwd
);

3978 
size
 +
√xtsize
;

3980 
	`˛ór_öu£_bô_©_off£t
(
√xtchunk
, 0);

3988 
bck
 = 
	`uns‹ãd_chunks
(
av
);

3989 
fwd
 = 
bck
->
fd
;

3990 i‡(
	`__glibc_u∆ikñy
 (
fwd
->
bk
 !
bck
))

3992 
îr°r
 = "free(): corrupted unsorted chunks";

3993 
îrout
;

3995 
p
->
fd
 = 
fwd
;

3996 
p
->
bk
 = 
bck
;

3997 i‡(!
	`ö_smÆlbö_ønge
(
size
))

3999 
p
->
fd_√xtsize
 = 
NULL
;

4000 
p
->
bk_√xtsize
 = 
NULL
;

4002 
bck
->
fd
 = 
p
;

4003 
fwd
->
bk
 = 
p
;

4005 
	`£t_hód
(
p
, 
size
 | 
PREV_INUSE
);

4006 
	`£t_foŸ
(
p
, 
size
);

4008 
	`check_‰ì_chunk
(
av
, 
p
);

4017 
size
 +
√xtsize
;

4018 
	`£t_hód
(
p
, 
size
 | 
PREV_INUSE
);

4019 
av
->
t›
 = 
p
;

4020 
	`check_chunk
(
av
, 
p
);

4036 i‡(()(
size
Ë>
FASTBIN_CONSOLIDATION_THRESHOLD
) {

4037 i‡(
	`have_Á°chunks
(
av
))

4038 
	`mÆloc_c⁄sﬁid©e
(
av
);

4040 i‡(
av
 =&
maö_¨ía
) {

4041 #i‚de‡
MORECORE_CANNOT_TRIM


4042 i‡(()(
	`chunksize
(
av
->
t›
)) >=

4043 ()(
mp_
.
åim_thªshﬁd
))

4044 
	`sy°rim
(
mp_
.
t›_∑d
, 
av
);

4049 
hóp_öfo
 *
hóp
 = 
	`hóp_f‹_±r
(
	`t›
(
av
));

4051 
	`as£π
(
hóp
->
¨_±r
 =
av
);

4052 
	`hóp_åim
(
hóp
, 
mp_
.
t›_∑d
);

4056 i‡(! 
have_lock
) {

4057 
	`as£π
 (
locked
);

4058 ()
	`muãx_u∆ock
(&
av
->
muãx
);

4066 
	`munm≠_chunk
 (
p
);

4068 
	}
}

4084 
	$mÆloc_c⁄sﬁid©e
(
m°©e
 
av
)

4086 
mÁ°bö±r
* 
fb
;

4087 
mÁ°bö±r
* 
maxfb
;

4088 
mchunk±r
 
p
;

4089 
mchunk±r
 
√xç
;

4090 
mchunk±r
 
uns‹ãd_bö
;

4091 
mchunk±r
 
fú°_uns‹ãd
;

4094 
mchunk±r
 
√xtchunk
;

4095 
INTERNAL_SIZE_T
 
size
;

4096 
INTERNAL_SIZE_T
 
√xtsize
;

4097 
INTERNAL_SIZE_T
 
¥evsize
;

4098 
√xtöu£
;

4099 
mchunk±r
 
bck
;

4100 
mchunk±r
 
fwd
;

4107 i‡(
	`gë_max_Á°
 () != 0) {

4108 
	`˛ór_Á°chunks
(
av
);

4110 
uns‹ãd_bö
 = 
	`uns‹ãd_chunks
(
av
);

4120 
maxfb
 = &
	`Á°bö
 (
av
, 
NFASTBINS
 - 1);

4121 
fb
 = &
	`Á°bö
 (
av
, 0);

4123 
p
 = 
	`©omic_exch™ge_acq
 (
fb
, 0);

4124 i‡(
p
 != 0) {

4126 
	`check_öu£_chunk
(
av
, 
p
);

4127 
√xç
 = 
p
->
fd
;

4130 
size
 = 
p
->sizê& ~(
PREV_INUSE
|
NON_MAIN_ARENA
);

4131 
√xtchunk
 = 
	`chunk_©_off£t
(
p
, 
size
);

4132 
√xtsize
 = 
	`chunksize
(
√xtchunk
);

4134 i‡(!
	`¥ev_öu£
(
p
)) {

4135 
¥evsize
 = 
p
->
¥ev_size
;

4136 
size
 +
¥evsize
;

4137 
p
 = 
	`chunk_©_off£t
’, -((Ë
¥evsize
));

4138 
	`u∆ök
(
p
, 
bck
, 
fwd
);

4141 i‡(
√xtchunk
 !
av
->
t›
) {

4142 
√xtöu£
 = 
	`öu£_bô_©_off£t
(
√xtchunk
, 
√xtsize
);

4144 i‡(!
√xtöu£
) {

4145 
size
 +
√xtsize
;

4146 
	`u∆ök
(
√xtchunk
, 
bck
, 
fwd
);

4148 
	`˛ór_öu£_bô_©_off£t
(
√xtchunk
, 0);

4150 
fú°_uns‹ãd
 = 
uns‹ãd_bö
->
fd
;

4151 
uns‹ãd_bö
->
fd
 = 
p
;

4152 
fú°_uns‹ãd
->
bk
 = 
p
;

4154 i‡(!
	`ö_smÆlbö_ønge
 (
size
)) {

4155 
p
->
fd_√xtsize
 = 
NULL
;

4156 
p
->
bk_√xtsize
 = 
NULL
;

4159 
	`£t_hód
(
p
, 
size
 | 
PREV_INUSE
);

4160 
p
->
bk
 = 
uns‹ãd_bö
;

4161 
p
->
fd
 = 
fú°_uns‹ãd
;

4162 
	`£t_foŸ
(
p
, 
size
);

4166 
size
 +
√xtsize
;

4167 
	`£t_hód
(
p
, 
size
 | 
PREV_INUSE
);

4168 
av
->
t›
 = 
p
;

4171 }  (
p
 = 
√xç
) != 0);

4174 } 
fb
++ !
maxfb
);

4177 
	`mÆloc_öô_°©e
(
av
);

4178 
	`check_mÆloc_°©e
(
av
);

4180 
	}
}

4187 
	$_öt_ªÆloc
(
m°©e
 
av
, 
mchunk±r
 
ﬁdp
, 
INTERNAL_SIZE_T
 
ﬁdsize
,

4188 
INTERNAL_SIZE_T
 
nb
)

4190 
mchunk±r
 
√wp
;

4191 
INTERNAL_SIZE_T
 
√wsize
;

4192 * 
√wmem
;

4194 
mchunk±r
 
√xt
;

4196 
mchunk±r
 
ªmaödî
;

4197 
ªmaödî_size
;

4199 
mchunk±r
 
bck
;

4200 
mchunk±r
 
fwd
;

4202 
c›ysize
;

4203 
nc›õs
;

4204 
INTERNAL_SIZE_T
* 
s
;

4205 
INTERNAL_SIZE_T
* 
d
;

4207 c⁄° *
îr°r
 = 
NULL
;

4210 i‡(
	`__buûtö_ex≥˘
 (
ﬁdp
->
size
 <2 * 
SIZE_SZ
, 0)

4211 || 
	`__buûtö_ex≥˘
 (
ﬁdsize
 >
av
->
sy°em_mem
, 0))

4213 
îr°r
 = "realloc(): invalid old size";

4214 
îrout
:

4215 
	`mÆloc_¥öãº
 (
check_a˘i⁄
, 
îr°r
, 
	`chunk2mem
 (
ﬁdp
));

4216  
NULL
;

4219 
	`check_öu£_chunk
 (
av
, 
ﬁdp
);

4222 
	`as£π
 (!
	`chunk_is_mm≠≥d
 (
ﬁdp
));

4224 
√xt
 = 
	`chunk_©_off£t
 (
ﬁdp
, 
ﬁdsize
);

4225 
INTERNAL_SIZE_T
 
√xtsize
 = 
	`chunksize
 (
√xt
);

4226 i‡(
	`__buûtö_ex≥˘
 (
√xt
->
size
 <2 * 
SIZE_SZ
, 0)

4227 || 
	`__buûtö_ex≥˘
 (
√xtsize
 >
av
->
sy°em_mem
, 0))

4229 
îr°r
 = "realloc(): invalidÇext size";

4230 
îrout
;

4233 i‡((Ë(
ﬁdsize
Ë>(Ë(
nb
))

4236 
√wp
 = 
ﬁdp
;

4237 
√wsize
 = 
ﬁdsize
;

4243 i‡(
√xt
 =
av
->
t›
 &&

4244 (Ë(
√wsize
 = 
ﬁdsize
 + 
√xtsize
) >=

4245 (Ë(
nb
 + 
MINSIZE
))

4247 
	`£t_hód_size
 (
ﬁdp
, 
nb
 | (
av
 !&
maö_¨ía
 ? 
NON_MAIN_ARENA
 : 0));

4248 
av
->
t›
 = 
	`chunk_©_off£t
 (
ﬁdp
, 
nb
);

4249 
	`£t_hód
 (
av
->
t›
, (
√wsize
 - 
nb
Ë| 
PREV_INUSE
);

4250 
	`check_öu£_chunk
 (
av
, 
ﬁdp
);

4251  
	`chunk2mem
 (
ﬁdp
);

4255 i‡(
√xt
 !
av
->
t›
 &&

4256 !
	`öu£
 (
√xt
) &&

4257 (Ë(
√wsize
 = 
ﬁdsize
 + 
√xtsize
) >=

4258 (Ë(
nb
))

4260 
√wp
 = 
ﬁdp
;

4261 
	`u∆ök
 (
√xt
, 
bck
, 
fwd
);

4267 
√wmem
 = 
	`_öt_mÆloc
 (
av
, 
nb
 - 
MALLOC_ALIGN_MASK
);

4268 i‡(
√wmem
 == 0)

4271 
√wp
 = 
	`mem2chunk
 (
√wmem
);

4272 
√wsize
 = 
	`chunksize
 (
√wp
);

4277 i‡(
√wp
 =
√xt
)

4279 
√wsize
 +
ﬁdsize
;

4280 
√wp
 = 
ﬁdp
;

4290 
c›ysize
 = 
ﬁdsize
 - 
SIZE_SZ
;

4291 
s
 = (
INTERNAL_SIZE_T
 *Ë(
	`chunk2mem
 (
ﬁdp
));

4292 
d
 = (
INTERNAL_SIZE_T
 *Ë(
√wmem
);

4293 
nc›õs
 = 
c›ysize
 /  (
INTERNAL_SIZE_T
);

4294 
	`as£π
 (
nc›õs
 >= 3);

4296 i‡(
nc›õs
 > 9)

4297 
	`mem˝y
 (
d
, 
s
, 
c›ysize
);

4301 *(
d
 + 0Ë*(
s
 + 0);

4302 *(
d
 + 1Ë*(
s
 + 1);

4303 *(
d
 + 2Ë*(
s
 + 2);

4304 i‡(
nc›õs
 > 4)

4306 *(
d
 + 3Ë*(
s
 + 3);

4307 *(
d
 + 4Ë*(
s
 + 4);

4308 i‡(
nc›õs
 > 6)

4310 *(
d
 + 5Ë*(
s
 + 5);

4311 *(
d
 + 6Ë*(
s
 + 6);

4312 i‡(
nc›õs
 > 8)

4314 *(
d
 + 7Ë*(
s
 + 7);

4315 *(
d
 + 8Ë*(
s
 + 8);

4321 
	`_öt_‰ì
 (
av
, 
ﬁdp
, 1);

4322 
	`check_öu£_chunk
 (
av
, 
√wp
);

4323  
	`chunk2mem
 (
√wp
);

4330 
	`as£π
 ((Ë(
√wsize
Ë>(Ë(
nb
));

4332 
ªmaödî_size
 = 
√wsize
 - 
nb
;

4334 i‡(
ªmaödî_size
 < 
MINSIZE
)

4336 
	`£t_hód_size
 (
√wp
, 
√wsize
 | (
av
 !&
maö_¨ía
 ? 
NON_MAIN_ARENA
 : 0));

4337 
	`£t_öu£_bô_©_off£t
 (
√wp
, 
√wsize
);

4341 
ªmaödî
 = 
	`chunk_©_off£t
 (
√wp
, 
nb
);

4342 
	`£t_hód_size
 (
√wp
, 
nb
 | (
av
 !&
maö_¨ía
 ? 
NON_MAIN_ARENA
 : 0));

4343 
	`£t_hód
 (
ªmaödî
, 
ªmaödî_size
 | 
PREV_INUSE
 |

4344 (
av
 !&
maö_¨ía
 ? 
NON_MAIN_ARENA
 : 0));

4346 
	`£t_öu£_bô_©_off£t
 (
ªmaödî
, 
ªmaödî_size
);

4347 
	`_öt_‰ì
 (
av
, 
ªmaödî
, 1);

4350 
	`check_öu£_chunk
 (
av
, 
√wp
);

4351  
	`chunk2mem
 (
√wp
);

4352 
	}
}

4359 
	$_öt_memÆign
 (
m°©e
 
av
, 
size_t
 
Æignmít
, size_à
byãs
)

4361 
INTERNAL_SIZE_T
 
nb
;

4362 *
m
;

4363 
mchunk±r
 
p
;

4364 *
brk
;

4365 
mchunk±r
 
√wp
;

4366 
INTERNAL_SIZE_T
 
√wsize
;

4367 
INTERNAL_SIZE_T
 
Àadsize
;

4368 
mchunk±r
 
ªmaödî
;

4369 
ªmaödî_size
;

4370 
INTERNAL_SIZE_T
 
size
;

4374 
	`checked_ªque°2size
 (
byãs
, 
nb
);

4384 
m
 = (*Ë(
	`_öt_mÆloc
 (
av
, 
nb
 + 
Æignmít
 + 
MINSIZE
));

4386 i‡(
m
 == 0)

4389 
p
 = 
	`mem2chunk
 (
m
);

4391 i‡((((Ë(
m
)Ë% 
Æignmít
) != 0)

4400 
brk
 = (*Ë
	`mem2chunk
 (((Ë(
m
 + 
Æignmít
 - 1)) &

4401 - ((sig√d Ë
Æignmít
));

4402 i‡((Ë(
brk
 - (*Ë(
p
)Ë< 
MINSIZE
)

4403 
brk
 +
Æignmít
;

4405 
√wp
 = (
mchunk±r
Ë
brk
;

4406 
Àadsize
 = 
brk
 - (*Ë(
p
);

4407 
√wsize
 = 
	`chunksize
 (
p
Ë- 
Àadsize
;

4410 i‡(
	`chunk_is_mm≠≥d
 (
p
))

4412 
√wp
->
¥ev_size
 = 
p
->¥ev_sizê+ 
Àadsize
;

4413 
	`£t_hód
 (
√wp
, 
√wsize
 | 
IS_MMAPPED
);

4414  
	`chunk2mem
 (
√wp
);

4418 
	`£t_hód
 (
√wp
, 
√wsize
 | 
PREV_INUSE
 |

4419 (
av
 !&
maö_¨ía
 ? 
NON_MAIN_ARENA
 : 0));

4420 
	`£t_öu£_bô_©_off£t
 (
√wp
, 
√wsize
);

4421 
	`£t_hód_size
 (
p
, 
Àadsize
 | (
av
 !&
maö_¨ía
 ? 
NON_MAIN_ARENA
 : 0));

4422 
	`_öt_‰ì
 (
av
, 
p
, 1);

4423 
p
 = 
√wp
;

4425 
	`as£π
 (
√wsize
 >
nb
 &&

4426 (((Ë(
	`chunk2mem
 (
p
))Ë% 
Æignmít
) == 0);

4430 i‡(!
	`chunk_is_mm≠≥d
 (
p
))

4432 
size
 = 
	`chunksize
 (
p
);

4433 i‡((Ë(
size
Ë> (Ë(
nb
 + 
MINSIZE
))

4435 
ªmaödî_size
 = 
size
 - 
nb
;

4436 
ªmaödî
 = 
	`chunk_©_off£t
 (
p
, 
nb
);

4437 
	`£t_hód
 (
ªmaödî
, 
ªmaödî_size
 | 
PREV_INUSE
 |

4438 (
av
 !&
maö_¨ía
 ? 
NON_MAIN_ARENA
 : 0));

4439 
	`£t_hód_size
 (
p
, 
nb
);

4440 
	`_öt_‰ì
 (
av
, 
ªmaödî
, 1);

4444 
	`check_öu£_chunk
 (
av
, 
p
);

4445  
	`chunk2mem
 (
p
);

4446 
	}
}

4454 
	$måim
 (
m°©e
 
av
, 
size_t
 
∑d
)

4457 
	`mÆloc_c⁄sﬁid©e
 (
av
);

4459 c⁄° 
size_t
 
ps
 = 
	`GLRO
 (
dl_∑gesize
);

4460 
psödex
 = 
	`bö_ödex
 (
ps
);

4461 c⁄° 
size_t
 
psm1
 = 
ps
 - 1;

4463 
ªsu…
 = 0;

4464 
i
 = 1; i < 
NBINS
; ++i)

4465 i‡(
i
 =1 || i >
psödex
)

4467 
mbö±r
 
bö
 = 
	`bö_©
 (
av
, 
i
);

4469 
mchunk±r
 
p
 = 
	`œ°
 (
bö
);Ö !bö;Ö =Ö->
bk
)

4471 
INTERNAL_SIZE_T
 
size
 = 
	`chunksize
 (
p
);

4473 i‡(
size
 > 
psm1
 +  (
mÆloc_chunk
))

4476 *
∑lig√d_mem
 = (*Ë(((
uöçå_t
Ë
p


4477 +  (
mÆloc_chunk
)

4478 + 
psm1
) & ~psm1);

4480 
	`as£π
 ((*Ë
	`chunk2mem
 (
p
Ë+ 4 * 
SIZE_SZ
 <
∑lig√d_mem
);

4481 
	`as£π
 ((*Ë
p
 + 
size
 > 
∑lig√d_mem
);

4484 
size
 -
∑lig√d_mem
 - (*Ë
p
;

4486 i‡(
size
 > 
psm1
)

4488 #i‡
MALLOC_DEBUG


4491 
	`mem£t
 (
∑lig√d_mem
, 0x89, 
size
 & ~
psm1
);

4493 
	`__madvi£
 (
∑lig√d_mem
, 
size
 & ~
psm1
, 
MADV_DONTNEED
);

4495 
ªsu…
 = 1;

4501 #i‚de‡
MORECORE_CANNOT_TRIM


4502  
ªsu…
 | (
av
 =&
maö_¨ía
 ? 
	`sy°rim
 (
∑d
,áv) : 0);

4505  
ªsu…
;

4507 
	}
}

4511 
	$__mÆloc_åim
 (
size_t
 
s
)

4513 
ªsu…
 = 0;

4515 i‡(
__mÆloc_öôülized
 < 0)

4516 
	`±mÆloc_öô
 ();

4518 
m°©e
 
¨_±r
 = &
maö_¨ía
;

4521 (Ë
	`muãx_lock
 (&
¨_±r
->
muãx
);

4522 
ªsu…
 |
	`måim
 (
¨_±r
, 
s
);

4523 (Ë
	`muãx_u∆ock
 (&
¨_±r
->
muãx
);

4525 
¨_±r
 =ár_±r->
√xt
;

4527 
¨_±r
 !&
maö_¨ía
);

4529  
ªsu…
;

4530 
	}
}

4537 
size_t


4538 
	$mußbÀ
 (*
mem
)

4540 
mchunk±r
 
p
;

4541 i‡(
mem
 != 0)

4543 
p
 = 
	`mem2chunk
 (
mem
);

4545 i‡(
	`__buûtö_ex≥˘
 (
usög_mÆloc_checkög
 == 1, 0))

4546  
	`mÆloc_check_gë_size
 (
p
);

4548 i‡(
	`chunk_is_mm≠≥d
 (
p
))

4549  
	`chunksize
 (
p
Ë- 2 * 
SIZE_SZ
;

4550 i‡(
	`öu£
 (
p
))

4551  
	`chunksize
 (
p
Ë- 
SIZE_SZ
;

4554 
	}
}

4557 
size_t


4558 
	$__mÆloc_ußbÀ_size
 (*
m
)

4560 
size_t
 
ªsu…
;

4562 
ªsu…
 = 
	`mußbÀ
 (
m
);

4563  
ªsu…
;

4564 
	}
}

4572 
	$öt_mÆlöfo
 (
m°©e
 
av
, 
mÆlöfo
 *
m
)

4574 
size_t
 
i
;

4575 
mbö±r
 
b
;

4576 
mchunk±r
 
p
;

4577 
INTERNAL_SIZE_T
 
avaû
;

4578 
INTERNAL_SIZE_T
 
Á°avaû
;

4579 
nblocks
;

4580 
nÁ°blocks
;

4583 i‡(
av
->
t›
 == 0)

4584 
	`mÆloc_c⁄sﬁid©e
 (
av
);

4586 
	`check_mÆloc_°©e
 (
av
);

4589 
avaû
 = 
	`chunksize
 (
av
->
t›
);

4590 
nblocks
 = 1;

4593 
nÁ°blocks
 = 0;

4594 
Á°avaû
 = 0;

4596 
i
 = 0; i < 
NFASTBINS
; ++i)

4598 
p
 = 
	`Á°bö
 (
av
, 
i
);Ö !0;Ö =Ö->
fd
)

4600 ++
nÁ°blocks
;

4601 
Á°avaû
 +
	`chunksize
 (
p
);

4605 
avaû
 +
Á°avaû
;

4608 
i
 = 1; i < 
NBINS
; ++i)

4610 
b
 = 
	`bö_©
 (
av
, 
i
);

4611 
p
 = 
	`œ°
 (
b
);Ö !b;Ö =Ö->
bk
)

4613 ++
nblocks
;

4614 
avaû
 +
	`chunksize
 (
p
);

4618 
m
->
smblks
 +
nÁ°blocks
;

4619 
m
->
‹dblks
 +
nblocks
;

4620 
m
->
f‹dblks
 +
avaû
;

4621 
m
->
u‹dblks
 +
av
->
sy°em_mem
 - 
avaû
;

4622 
m
->
¨ía
 +
av
->
sy°em_mem
;

4623 
m
->
fsmblks
 +
Á°avaû
;

4624 i‡(
av
 =&
maö_¨ía
)

4626 
m
->
hblks
 = 
mp_
.
n_mm≠s
;

4627 
m
->
hblkhd
 = 
mp_
.
mm≠≥d_mem
;

4628 
m
->
usmblks
 = 
mp_
.
max_tŸÆ_mem
;

4629 
m
->
kìpco°
 = 
	`chunksize
 (
av
->
t›
);

4631 
	}
}

4634 
mÆlöfo


4635 
	$__libc_mÆlöfo
 ()

4637 
mÆlöfo
 
m
;

4638 
m°©e
 
¨_±r
;

4640 i‡(
__mÆloc_öôülized
 < 0)

4641 
	`±mÆloc_öô
 ();

4643 
	`mem£t
 (&
m
, 0,  (m));

4644 
¨_±r
 = &
maö_¨ía
;

4647 (Ë
	`muãx_lock
 (&
¨_±r
->
muãx
);

4648 
	`öt_mÆlöfo
 (
¨_±r
, &
m
);

4649 (Ë
	`muãx_u∆ock
 (&
¨_±r
->
muãx
);

4651 
¨_±r
 =ár_±r->
√xt
;

4653 
¨_±r
 !&
maö_¨ía
);

4655  
m
;

4656 
	}
}

4663 
	$__mÆloc_°©s
 ()

4665 
i
;

4666 
m°©e
 
¨_±r
;

4667 
ö_u£_b
 = 
mp_
.
mm≠≥d_mem
, 
sy°em_b
 = in_use_b;

4669 i‡(
__mÆloc_öôülized
 < 0)

4670 
	`±mÆloc_öô
 ();

4671 
	`_IO_Êockfûe
 (
°dîr
);

4672 
ﬁd_Êags2
 = ((
_IO_FILE
 *Ë
°dîr
)->
_Êags2
;

4673 ((
_IO_FILE
 *Ë
°dîr
)->
_Êags2
 |
_IO_FLAGS2_NOTCANCEL
;

4674 
i
 = 0, 
¨_±r
 = &
maö_¨ía
;; i++)

4676 
mÆlöfo
 
mi
;

4678 
	`mem£t
 (&
mi
, 0,  (mi));

4679 (Ë
	`muãx_lock
 (&
¨_±r
->
muãx
);

4680 
	`öt_mÆlöfo
 (
¨_±r
, &
mi
);

4681 
	`Ârötf
 (
°dîr
, "Aª« %d:\n", 
i
);

4682 
	`Ârötf
 (
°dîr
, "sy°em byã† = %10u\n", (Ë
mi
.
¨ía
);

4683 
	`Ârötf
 (
°dîr
, "ö u£ byã† = %10u\n", (Ë
mi
.
u‹dblks
);

4684 #i‡
MALLOC_DEBUG
 > 1

4685 i‡(
i
 > 0)

4686 
	`dump_hóp
 (
	`hóp_f‹_±r
 (
	`t›
 (
¨_±r
)));

4688 
sy°em_b
 +
mi
.
¨ía
;

4689 
ö_u£_b
 +
mi
.
u‹dblks
;

4690 (Ë
	`muãx_u∆ock
 (&
¨_±r
->
muãx
);

4691 
¨_±r
 =ár_±r->
√xt
;

4692 i‡(
¨_±r
 =&
maö_¨ía
)

4695 
	`Ârötf
 (
°dîr
, "Total (incl. mmap):\n");

4696 
	`Ârötf
 (
°dîr
, "sy°em byã† = %10u\n", 
sy°em_b
);

4697 
	`Ârötf
 (
°dîr
, "ö u£ byã† = %10u\n", 
ö_u£_b
);

4698 
	`Ârötf
 (
°dîr
, "max mm≠Ñegi⁄†%10u\n", (Ë
mp_
.
max_n_mm≠s
);

4699 
	`Ârötf
 (
°dîr
, "max mmap bytes = %10lu\n",

4700 (Ë
mp_
.
max_mm≠≥d_mem
);

4701 ((
_IO_FILE
 *Ë
°dîr
)->
_Êags2
 |
ﬁd_Êags2
;

4702 
	`_IO_fu∆ockfûe
 (
°dîr
);

4703 
	}
}

4711 
	$__libc_mÆl›t
 (
∑øm_numbî
, 
vÆue
)

4713 
m°©e
 
av
 = &
maö_¨ía
;

4714 
ªs
 = 1;

4716 i‡(
__mÆloc_öôülized
 < 0)

4717 
	`±mÆloc_öô
 ();

4718 (Ë
	`muãx_lock
 (&
av
->
muãx
);

4720 
	`mÆloc_c⁄sﬁid©e
 (
av
);

4722 
	`LIBC_PROBE
 (
mem‹y_mÆl›t
, 2, 
∑øm_numbî
, 
vÆue
);

4724 
∑øm_numbî
)

4726 
M_MXFAST
:

4727 i‡(
vÆue
 >0 && vÆuê<
MAX_FAST_SIZE
)

4729 
	`LIBC_PROBE
 (
mem‹y_mÆl›t_mxÁ°
, 2, 
vÆue
, 
	`gë_max_Á°
 ());

4730 
	`£t_max_Á°
 (
vÆue
);

4733 
ªs
 = 0;

4736 
M_TRIM_THRESHOLD
:

4737 
	`LIBC_PROBE
 (
mem‹y_mÆl›t_åim_thªshﬁd
, 3, 
vÆue
,

4738 
mp_
.
åim_thªshﬁd
, mp_.
no_dyn_thªshﬁd
);

4739 
mp_
.
åim_thªshﬁd
 = 
vÆue
;

4740 
mp_
.
no_dyn_thªshﬁd
 = 1;

4743 
M_TOP_PAD
:

4744 
	`LIBC_PROBE
 (
mem‹y_mÆl›t_t›_∑d
, 3, 
vÆue
,

4745 
mp_
.
t›_∑d
, mp_.
no_dyn_thªshﬁd
);

4746 
mp_
.
t›_∑d
 = 
vÆue
;

4747 
mp_
.
no_dyn_thªshﬁd
 = 1;

4750 
M_MMAP_THRESHOLD
:

4752 i‡((Ë
vÆue
 > 
HEAP_MAX_SIZE
 / 2)

4753 
ªs
 = 0;

4756 
	`LIBC_PROBE
 (
mem‹y_mÆl›t_mm≠_thªshﬁd
, 3, 
vÆue
,

4757 
mp_
.
mm≠_thªshﬁd
, mp_.
no_dyn_thªshﬁd
);

4758 
mp_
.
mm≠_thªshﬁd
 = 
vÆue
;

4759 
mp_
.
no_dyn_thªshﬁd
 = 1;

4763 
M_MMAP_MAX
:

4764 
	`LIBC_PROBE
 (
mem‹y_mÆl›t_mm≠_max
, 3, 
vÆue
,

4765 
mp_
.
n_mm≠s_max
, mp_.
no_dyn_thªshﬁd
);

4766 
mp_
.
n_mm≠s_max
 = 
vÆue
;

4767 
mp_
.
no_dyn_thªshﬁd
 = 1;

4770 
M_CHECK_ACTION
:

4771 
	`LIBC_PROBE
 (
mem‹y_mÆl›t_check_a˘i⁄
, 2, 
vÆue
, 
check_a˘i⁄
);

4772 
check_a˘i⁄
 = 
vÆue
;

4775 
M_PERTURB
:

4776 
	`LIBC_PROBE
 (
mem‹y_mÆl›t_≥πurb
, 2, 
vÆue
, 
≥πurb_byã
);

4777 
≥πurb_byã
 = 
vÆue
;

4780 
M_ARENA_TEST
:

4781 i‡(
vÆue
 > 0)

4783 
	`LIBC_PROBE
 (
mem‹y_mÆl›t_¨ía_ã°
, 2, 
vÆue
, 
mp_
.
¨ía_ã°
);

4784 
mp_
.
¨ía_ã°
 = 
vÆue
;

4788 
M_ARENA_MAX
:

4789 i‡(
vÆue
 > 0)

4791 
	`LIBC_PROBE
 (
mem‹y_mÆl›t_¨ía_max
, 2, 
vÆue
, 
mp_
.
¨ía_max
);

4792 
mp_
.
¨ía_max
 = 
vÆue
;

4796 (Ë
	`muãx_u∆ock
 (&
av
->
muãx
);

4797  
ªs
;

4798 
	}
}

4799 
	$libc_hiddí_def
 (
__libc_mÆl›t
)

4943 **
__libc_¨gv
 
©åibuã_hiddí
;

4946 
	$mÆloc_¥öãº
 (
a˘i⁄
, c⁄° *
°r
, *
±r
)

4948 i‡((
a˘i⁄
 & 5) == 5)

4949 
	`__libc_mesßge
 (
a˘i⁄
 & 2, "%s\n", 
°r
);

4950 i‡(
a˘i⁄
 & 1)

4952 
buf
[2 *  (
uöçå_t
) + 1];

4954 
buf
[ (buf) - 1] = '\0';

4955 *
˝
 = 
	`_ôﬂ_w‹d
 ((
uöçå_t
Ë
±r
, &
buf
[ (buf) - 1], 16, 0);

4956 
˝
 > 
buf
)

4957 *--
˝
 = '0';

4959 
	`__libc_mesßge
 (
a˘i⁄
 & 2, "*** Error in `%s': %s: 0x%s ***\n",

4960 
__libc_¨gv
[0] ? : "<unknown>", 
°r
, 
˝
);

4962 i‡(
a˘i⁄
 & 2)

4963 
	`ab‹t
 ();

4964 
	}
}

4968 
	$__posix_memÆign
 (**
mem±r
, 
size_t
 
Æignmít
, size_à
size
)

4970 *
mem
;

4974 i‡(
Æignmít
 %  (*) != 0

4975 || !
	`powîof2
 (
Æignmít
 /  (*)) != 0

4976 || 
Æignmít
 == 0)

4977  
EINVAL
;

4980 *
addªss
 = 
	`RETURN_ADDRESS
 (0);

4981 
mem
 = 
	`_mid_memÆign
 (
Æignmít
, 
size
, 
addªss
);

4983 i‡(
mem
 !
NULL
)

4985 *
mem±r
 = 
mem
;

4989  
ENOMEM
;

4990 
	}
}

4991 
	$wók_Æüs
 (
__posix_memÆign
, 
posix_memÆign
)

4995 
	$mÆloc_öfo
 (
›ti⁄s
, 
FILE
 *
Â
)

4998 i‡(
›ti⁄s
 != 0)

4999  
EINVAL
;

5001 
n
 = 0;

5002 
size_t
 
tŸÆ_nblocks
 = 0;

5003 
size_t
 
tŸÆ_nÁ°blocks
 = 0;

5004 
size_t
 
tŸÆ_avaû
 = 0;

5005 
size_t
 
tŸÆ_Á°avaû
 = 0;

5006 
size_t
 
tŸÆ_sy°em
 = 0;

5007 
size_t
 
tŸÆ_max_sy°em
 = 0;

5008 
size_t
 
tŸÆ_a•a˚
 = 0;

5009 
size_t
 
tŸÆ_a•a˚_m¥Ÿe˘
 = 0;

5013 i‡(
__mÆloc_öôülized
 < 0)

5014 
	`±mÆloc_öô
 ();

5016 
	`Âuts
 ("<mÆlo¯vîsi⁄=\"1\">\n", 
Â
);

5019 
m°©e
 
¨_±r
 = &
maö_¨ía
;

5022 
	`Ârötf
 (
Â
, "<hó∞ƒ=\"%d\">\n<sizes>\n", 
n
++);

5024 
size_t
 
nblocks
 = 0;

5025 
size_t
 
nÁ°blocks
 = 0;

5026 
size_t
 
avaû
 = 0;

5027 
size_t
 
Á°avaû
 = 0;

5030 
size_t
 
‰om
;

5031 
size_t
 
to
;

5032 
size_t
 
tŸÆ
;

5033 
size_t
 
cou¡
;

5034 } 
sizes
[
NFASTBINS
 + 
NBINS
 - 1];

5035 
	#nsizes
 ( (
sizes
Ë/  (sizes[0]))

	)

5037 
	`muãx_lock
 (&
¨_±r
->
muãx
);

5039 
size_t
 
i
 = 0; i < 
NFASTBINS
; ++i)

5041 
mchunk±r
 
p
 = 
	`Á°bö
 (
¨_±r
, 
i
);

5042 i‡(
p
 !
NULL
)

5044 
size_t
 
¡hissize
 = 0;

5045 
size_t
 
thissize
 = 
	`chunksize
 (
p
);

5047 
p
 !
NULL
)

5049 ++
¡hissize
;

5050 
p
 =Ö->
fd
;

5053 
Á°avaû
 +
¡hissize
 * 
thissize
;

5054 
nÁ°blocks
 +
¡hissize
;

5055 
sizes
[
i
].
‰om
 = 
thissize
 - (
MALLOC_ALIGNMENT
 - 1);

5056 
sizes
[
i
].
to
 = 
thissize
;

5057 
sizes
[
i
].
cou¡
 = 
¡hissize
;

5060 
sizes
[
i
].
‰om
 = sizes[i].
to
 = sizes[i].
cou¡
 = 0;

5062 
sizes
[
i
].
tŸÆ
 = sizes[i].
cou¡
 * sizes[i].
to
;

5066 
mbö±r
 
bö
;

5067 
mÆloc_chunk
 *
r
;

5069 
size_t
 
i
 = 1; i < 
NBINS
; ++i)

5071 
bö
 = 
	`bö_©
 (
¨_±r
, 
i
);

5072 
r
 = 
bö
->
fd
;

5073 
sizes
[
NFASTBINS
 - 1 + 
i
].
‰om
 = ~((
size_t
) 0);

5074 
sizes
[
NFASTBINS
 - 1 + 
i
].
to
 = sizes[NFASTBINS - 1 + i].
tŸÆ


5075 
sizes
[
NFASTBINS
 - 1 + 
i
].
cou¡
 = 0;

5077 i‡(
r
 !
NULL
)

5078 
r
 !
bö
)

5080 ++
sizes
[
NFASTBINS
 - 1 + 
i
].
cou¡
;

5081 
sizes
[
NFASTBINS
 - 1 + 
i
].
tŸÆ
 +
r
->
size
;

5082 
sizes
[
NFASTBINS
 - 1 + 
i
].
‰om


5083 
	`MIN
 (
sizes
[
NFASTBINS
 - 1 + 
i
].
‰om
, 
r
->
size
);

5084 
sizes
[
NFASTBINS
 - 1 + 
i
].
to
 = 
	`MAX
 (sizes[NFASTBINS - 1 + i].to,

5085 
r
->
size
);

5087 
r
 =Ñ->
fd
;

5090 i‡(
sizes
[
NFASTBINS
 - 1 + 
i
].
cou¡
 == 0)

5091 
sizes
[
NFASTBINS
 - 1 + 
i
].
‰om
 = 0;

5092 
nblocks
 +
sizes
[
NFASTBINS
 - 1 + 
i
].
cou¡
;

5093 
avaû
 +
sizes
[
NFASTBINS
 - 1 + 
i
].
tŸÆ
;

5096 
	`muãx_u∆ock
 (&
¨_±r
->
muãx
);

5098 
tŸÆ_nÁ°blocks
 +
nÁ°blocks
;

5099 
tŸÆ_Á°avaû
 +
Á°avaû
;

5101 
tŸÆ_nblocks
 +
nblocks
;

5102 
tŸÆ_avaû
 +
avaû
;

5104 
size_t
 
i
 = 0; i < 
nsizes
; ++i)

5105 i‡(
sizes
[
i
].
cou¡
 !0 && i !
NFASTBINS
)

5106 
	`Ârötf
 (
Â
, " \
<size from=\"%zu\"Åo=\"%zu\"Åotal=\"%zu\" count=\"%zu\"/>\n",

5108 
sizes
[
i
].
‰om
, sizes[i].
to
, sizes[i].
tŸÆ
, sizes[i].
cou¡
);

5110 i‡(
sizes
[
NFASTBINS
].
cou¡
 != 0)

5111 
	`Ârötf
 (
Â
, "\
<unsorted from=\"%zu\"Åo=\"%zu\"Åotal=\"%zu\" count=\"%zu\"/>\n",

5113 
sizes
[
NFASTBINS
].
‰om
, sizes[NFASTBINS].
to
,

5114 
sizes
[
NFASTBINS
].
tŸÆ
, sizes[NFASTBINS].
cou¡
);

5116 
tŸÆ_sy°em
 +
¨_±r
->
sy°em_mem
;

5117 
tŸÆ_max_sy°em
 +
¨_±r
->
max_sy°em_mem
;

5119 
	`Ârötf
 (
Â
,

5124 
nÁ°blocks
, 
Á°avaû
, 
nblocks
, 
avaû
,

5125 
¨_±r
->
sy°em_mem
,ár_±r->
max_sy°em_mem
);

5127 i‡(
¨_±r
 !&
maö_¨ía
)

5129 
hóp_öfo
 *
hóp
 = 
	`hóp_f‹_±r
 (
	`t›
 (
¨_±r
));

5130 
	`Ârötf
 (
Â
,

5133 
hóp
->
size
, hóp->
m¥Ÿe˘_size
);

5134 
tŸÆ_a•a˚
 +
hóp
->
size
;

5135 
tŸÆ_a•a˚_m¥Ÿe˘
 +
hóp
->
m¥Ÿe˘_size
;

5139 
	`Ârötf
 (
Â
,

5142 
¨_±r
->
sy°em_mem
,ár_ptr->system_mem);

5143 
tŸÆ_a•a˚
 +
¨_±r
->
sy°em_mem
;

5144 
tŸÆ_a•a˚_m¥Ÿe˘
 +
¨_±r
->
sy°em_mem
;

5147 
	`Âuts
 ("</hóp>\n", 
Â
);

5148 
¨_±r
 =ár_±r->
√xt
;

5150 
¨_±r
 !&
maö_¨ía
);

5152 
	`Ârötf
 (
Â
,

5161 
tŸÆ_nÁ°blocks
, 
tŸÆ_Á°avaû
, 
tŸÆ_nblocks
, 
tŸÆ_avaû
,

5162 
mp_
.
n_mm≠s
, mp_.
mm≠≥d_mem
,

5163 
tŸÆ_sy°em
, 
tŸÆ_max_sy°em
,

5164 
tŸÆ_a•a˚
, 
tŸÆ_a•a˚_m¥Ÿe˘
);

5167 
	}
}

5170 
	$°r⁄g_Æüs
 (
__libc_ˇŒoc
, 
__ˇŒoc
Ë
	$wók_Æüs
 (
__libc_ˇŒoc
, 
ˇŒoc
)

5171 
	$°r⁄g_Æüs
 (
__libc_‰ì
, 
__c‰ì
Ë
	$wók_Æüs
 (
__libc_‰ì
, 
c‰ì
)

5172 
	$°r⁄g_Æüs
 (
__libc_‰ì
, 
__‰ì
Ë
	$°r⁄g_Æüs
 (
__libc_‰ì
, 
‰ì
)

5173 
	$°r⁄g_Æüs
 (
__libc_mÆloc
, 
__mÆloc
Ë
	$°r⁄g_Æüs
 (
__libc_mÆloc
, 
mÆloc
)

5174 
	$°r⁄g_Æüs
 (
__libc_memÆign
, 
__memÆign
)

5175 
	$wók_Æüs
 (
__libc_memÆign
, 
memÆign
)

5176 
	$°r⁄g_Æüs
 (
__libc_ªÆloc
, 
__ªÆloc
Ë
	$°r⁄g_Æüs
 (
__libc_ªÆloc
, 
ªÆloc
)

5177 
	$°r⁄g_Æüs
 (
__libc_vÆloc
, 
__vÆloc
Ë
	$wók_Æüs
 (
__libc_vÆloc
, 
vÆloc
)

5178 
	$°r⁄g_Æüs
 (
__libc_pvÆloc
, 
__pvÆloc
Ë
	$wók_Æüs
 (
__libc_pvÆloc
, 
pvÆloc
)

5179 
	$°r⁄g_Æüs
 (
__libc_mÆlöfo
, 
__mÆlöfo
)

5180 
	$wók_Æüs
 (
__libc_mÆlöfo
, 
mÆlöfo
)

5181 
	$°r⁄g_Æüs
 (
__libc_mÆl›t
, 
__mÆl›t
Ë
	$wók_Æüs
 (
__libc_mÆl›t
, 
mÆl›t
)

5183 
	$wók_Æüs
 (
__mÆloc_°©s
, 
mÆloc_°©s
)

5184 
	$wók_Æüs
 (
__mÆloc_ußbÀ_size
, 
mÆloc_ußbÀ_size
)

5185 
	$wók_Æüs
 (
__mÆloc_åim
, 
mÆloc_åim
)

5186 
	$wók_Æüs
 (
__mÆloc_gë_°©e
, 
mÆloc_gë_°©e
)

5187 
	`wók_Æüs
 (
__mÆloc_£t_°©e
, 
mÆloc_£t_°©e
)

	@malloc.h

19 #i‚de‡
_MALLOC_H


20 
	#_MALLOC_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<°ddef.h
>

24 
	~<°dio.h
>

26 #ifde‡
_LIBC


27 
	#__MALLOC_HOOK_VOLATILE


	)

28 
	#__MALLOC_DEPRECATED


	)

30 
	#__MALLOC_HOOK_VOLATILE
 vﬁ©ûe

	)

31 
	#__MALLOC_DEPRECATED
 
__©åibuã_dïªˇãd__


	)

35 
__BEGIN_DECLS


38 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

41 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

42 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

49 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

50 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

53 
	$‰ì
 (*
__±r
Ë
__THROW
;

56 
	$c‰ì
 (*
__±r
Ë
__THROW
;

59 *
	$memÆign
 (
size_t
 
__Æignmít
, size_à
__size
)

60 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

63 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

67 *
	$pvÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

71 *(*
__m‹ec‹e
Ë(
±rdiff_t
 
__size
);

74 *
	$__deÁu…_m‹ec‹e
 (
±rdiff_t
 
__size
)

75 
__THROW
 
__©åibuã_mÆloc__
;

79 
	smÆlöfo


81 
¨ía
;

82 
‹dblks
;

83 
smblks
;

84 
hblks
;

85 
hblkhd
;

86 
usmblks
;

87 
fsmblks
;

88 
u‹dblks
;

89 
f‹dblks
;

90 
kìpco°
;

94 
mÆlöfo
 
	$mÆlöfo
 (Ë
__THROW
;

97 #i‚de‡
M_MXFAST


98 
	#M_MXFAST
 1

	)

100 #i‚de‡
M_NLBLKS


101 
	#M_NLBLKS
 2

	)

103 #i‚de‡
M_GRAIN


104 
	#M_GRAIN
 3

	)

106 #i‚de‡
M_KEEP


107 
	#M_KEEP
 4

	)

111 
	#M_TRIM_THRESHOLD
 -1

	)

112 
	#M_TOP_PAD
 -2

	)

113 
	#M_MMAP_THRESHOLD
 -3

	)

114 
	#M_MMAP_MAX
 -4

	)

115 
	#M_CHECK_ACTION
 -5

	)

116 
	#M_PERTURB
 -6

	)

117 
	#M_ARENA_TEST
 -7

	)

118 
	#M_ARENA_MAX
 -8

	)

121 
	$mÆl›t
 (
__∑øm
, 
__vÆ
Ë
__THROW
;

125 
	$mÆloc_åim
 (
size_t
 
__∑d
Ë
__THROW
;

129 
size_t
 
	$mÆloc_ußbÀ_size
 (*
__±r
Ë
__THROW
;

132 
	$mÆloc_°©s
 (Ë
__THROW
;

135 
	$mÆloc_öfo
 (
__›ti⁄s
, 
FILE
 *
__Â
Ë
__THROW
;

138 *
	$mÆloc_gë_°©e
 (Ë
__THROW
;

142 
	$mÆloc_£t_°©e
 (*
__±r
Ë
__THROW
;

147 (*
__MALLOC_HOOK_VOLATILE
 
__mÆloc_öôülize_hook
) ()

148 
__MALLOC_DEPRECATED
;

150 (*
__MALLOC_HOOK_VOLATILE
 
__‰ì_hook
Ë(*
__±r
,

152 
__MALLOC_DEPRECATED
;

153 *(*
__MALLOC_HOOK_VOLATILE
 
__mÆloc_hook
)(
size_t
 
__size
,

155 
__MALLOC_DEPRECATED
;

156 *(*
__MALLOC_HOOK_VOLATILE
 
__ªÆloc_hook
)(*
__±r
,

157 
size_t
 
__size
,

159 
__MALLOC_DEPRECATED
;

160 *(*
__MALLOC_HOOK_VOLATILE
 
__memÆign_hook
)(
size_t
 
__Æignmít
,

161 
size_t
 
__size
,

163 
__MALLOC_DEPRECATED
;

164 (*
__MALLOC_HOOK_VOLATILE
 
__a·î_m‹ec‹e_hook
) ();

167 
	$__mÆloc_check_öô
 (Ë
__THROW
 
__MALLOC_DEPRECATED
;

170 
__END_DECLS


	@mallocbug.c

2 
	~<mÆloc.h
>

3 
	~<°dio.h
>

4 
	~<°rög.h
>

6 
	#size_t
 

	)

9 *
	gdummy0
;

10 *
	gdummy1
;

11 *
	gfûl_öfo_èbÀ1
;

15 
	$maö
 (
¨gc
, *
¨gv
[])

17 *
ovî_t›
;

18 
size_t
 
ovî_t›_size
 = 0x3000;

19 *
ovî_t›_dup
;

20 
size_t
 
ovî_t›_dup_size
 = 0x7000;

21 *
x
;

22 
size_t
 
i
;

34 
dummy0
 = 
	`mÆloc
 (0x3fa000);

36 
dummy1
 = 
	`mÆloc
 (0x3fa000);

38 
fûl_öfo_èbÀ1
 = 
	`mÆloc
 (0x3000);

41 
x
 = 
	`mÆloc
 (0x1000);

42 
	`‰ì
 (
x
);

49 
ovî_t›
 = 
	`mÆloc
 (
ovî_t›_size
);

50 
ovî_t›_dup
 = 
	`mÆloc
 (
ovî_t›_dup_size
);

51 
	`mem£t
 (
ovî_t›
, 0, 
ovî_t›_size
);

52 
	`mem£t
 (
ovî_t›_dup
, 1, 
ovî_t›_dup_size
);

54 
i
 = 0; i < 
ovî_t›_size
; ++i)

55 i‡(
ovî_t›
[
i
] != 0)

57 
	`¥ötf
 ("FAIL: mallocÉxpands infoÅable\n");

61 
i
 = 0; i < 
ovî_t›_dup_size
; ++i)

62 i‡(
ovî_t›_dup
[
i
] != 1)

64 
	`¥ötf
 ("FAIL: mallocÉxpands infoÅable\n");

68 
	`¥ötf
 ("PASS: mallocÉxpands infoÅable\n");

70 
	}
}

	@mcheck-init.c

21 
	~<mÆloc.h
>

22 
	~<mcheck.h
>

25 
	$tu∫_⁄_mcheck
 ()

27 
	`mcheck
 (
NULL
);

28 
	}
}

30 (*
__mÆloc_öôülize_hook
Ë(Ë
tu∫_⁄_mcheck
;

	@mcheck.c

20 #i‚de‡
_MALLOC_INTERNAL


21 
	#_MALLOC_INTERNAL


	)

22 
	~<mÆloc.h
>

23 
	~<mcheck.h
>

24 
	~<°döt.h
>

25 
	~<°dio.h
>

26 
	~<liböé.h
>

27 
	~<î∫o.h
>

31 (*
ﬁd_‰ì_hook
)(
__±r_t
 
±r
, const __ptr_t);

32 
	$__±r_t
 (*
ﬁd_mÆloc_hook
Ë(
size_t
 
size
, c⁄° 
__±r_t
);

33 
	$__±r_t
 (*
ﬁd_memÆign_hook
Ë(
size_t
 
Æignmít
, size_à
size
,

34 c⁄° 
__±r_t
);

35 
	$__±r_t
 (*
ﬁd_ªÆloc_hook
Ë(
__±r_t
 
±r
, 
size_t
 
size
,

36 c⁄° 
__±r_t
);

39 (*
ab‹tfunc
Ë(
mcheck_°©us
);

42 
	#MAGICWORD
 0x„dabìb

	)

43 
	#MAGICFREE
 0xd8675309

	)

44 
	#MAGICBYTE
 ((Ë0xd7)

	)

45 
	#MALLOCFLOOD
 ((Ë0x93)

	)

46 
	#FREEFLOOD
 ((Ë0x95)

	)

48 
	shdr


50 
size_t
 
size
;

51 
magic
;

52 
hdr
 *
¥ev
;

53 
hdr
 *
√xt
;

54 
__±r_t
 
block
;

55 
magic2
;

60 
hdr
 *
roŸ
;

62 
mcheck_u£d
;

65 
≥d™tic
;

67 #i‡
deföed
 
_LIBC
 || deföed 
STDC_HEADERS
 || deföed 
USG


68 
	~<°rög.h
>

69 
	#Êood
 
mem£t


	)

71 
	`Êood
 (
__±r_t
, , 
size_t
);

72 
	$Êood
 (
±r
, 
vÆ
, 
size
)

73 
__±r_t
 
±r
;

74 
vÆ
;

75 
size_t
 
size
;

77 *
˝
 = 
±r
;

78 
size
--)

79 *
˝
++ = 
vÆ
;

80 
	}
}

83 
mcheck_°©us


84 
	$checkhdr
 (c⁄° 
hdr
 *hdr)

86 
mcheck_°©us
 
°©us
;

88 i‡(!
mcheck_u£d
)

91  
MCHECK_OK
;

93 
hdr
->
magic
 ^ ((
uöçå_t
Ëhdr->
¥ev
 + (uöçå_tËhdr->
√xt
))

96 
°©us
 = 
MCHECK_HEAD
;

98 
MAGICFREE
:

99 
°©us
 = 
MCHECK_FREE
;

101 
MAGICWORD
:

102 i‡(((*Ë&
hdr
[1])[hdr->
size
] !
MAGICBYTE
)

103 
°©us
 = 
MCHECK_TAIL
;

104 i‡((
hdr
->
magic2
 ^ (
uöçå_t
Ëhdr->
block
Ë!
MAGICWORD
)

105 
°©us
 = 
MCHECK_HEAD
;

107 
°©us
 = 
MCHECK_OK
;

110 i‡(
°©us
 !
MCHECK_OK
)

112 
mcheck_u£d
 = 0;

113 (*
ab‹tfunc
Ë(
°©us
);

114 
mcheck_u£d
 = 1;

116  
°©us
;

117 
	}
}

120 
	$mcheck_check_Æl
 ()

124 
hdr
 *
ru≈
 = 
roŸ
;

127 
≥d™tic
 = 0;

129 
ru≈
 !
NULL
)

131 (Ë
	`checkhdr
 (
ru≈
);

133 
ru≈
 =Ñu≈->
√xt
;

137 
≥d™tic
 = 1;

138 
	}
}

139 #ifde‡
_LIBC


140 
	$libc_hiddí_def
 (
mcheck_check_Æl
)

144 
	$u∆ök_blk
 (
hdr
 *
±r
)

146 i‡(
±r
->
√xt
 !
NULL
)

148 
±r
->
√xt
->
¥ev
 =Ötr->prev;

149 
±r
->
√xt
->
magic
 = 
MAGICWORD
 ^ ((
uöçå_t
Ë±r->√xt->
¥ev


150 + (
uöçå_t
Ë
±r
->
√xt
->next);

152 i‡(
±r
->
¥ev
 !
NULL
)

154 
±r
->
¥ev
->
√xt
 =Ötr->next;

155 
±r
->
¥ev
->
magic
 = 
MAGICWORD
 ^ ((
uöçå_t
)Ötr->prev->prev

156 + (
uöçå_t
Ë
±r
->
¥ev
->
√xt
);

159 
roŸ
 = 
±r
->
√xt
;

160 
	}
}

163 
	$lök_blk
 (
hdr
 *hdr)

165 
hdr
->
¥ev
 = 
NULL
;

166 
hdr
->
√xt
 = 
roŸ
;

167 
roŸ
 = 
hdr
;

168 
hdr
->
magic
 = 
MAGICWORD
 ^ (
uöçå_t
Ëhdr->
√xt
;

171 i‡(
hdr
->
√xt
 !
NULL
)

173 
hdr
->
√xt
->
¥ev
 = hdr;

174 
hdr
->
√xt
->
magic
 = 
MAGICWORD
 ^ ((
uöçå_t
) hdr

175 + (
uöçå_t
Ë
hdr
->
√xt
->next);

177 
	}
}

179 
	$‰ìhook
 (
__±r_t
 
±r
, c⁄° __±r_à
ˇŒî
)

181 i‡(
≥d™tic
)

182 
	`mcheck_check_Æl
 ();

183 i‡(
±r
)

185 
hdr
 *hd∏((hd∏*Ë
±r
) - 1;

186 
	`checkhdr
 (
hdr
);

187 
hdr
->
magic
 = 
MAGICFREE
;

188 
hdr
->
magic2
 = 
MAGICFREE
;

189 
	`u∆ök_blk
 (
hdr
);

190 
hdr
->
¥ev
 = hdr->
√xt
 = 
NULL
;

191 
	`Êood
 (
±r
, 
FREEFLOOD
, 
hdr
->
size
);

192 
±r
 = 
hdr
->
block
;

194 
__‰ì_hook
 = 
ﬁd_‰ì_hook
;

195 i‡(
ﬁd_‰ì_hook
 !
NULL
)

196 (*
ﬁd_‰ì_hook
)(
±r
, 
ˇŒî
);

198 
	`‰ì
 (
±r
);

199 
__‰ì_hook
 = 
‰ìhook
;

200 
	}
}

202 
__±r_t


203 
	$mÆlochook
 (
size_t
 
size
, c⁄° 
__±r_t
 
ˇŒî
)

205 
hdr
 *hdr;

207 i‡(
≥d™tic
)

208 
	`mcheck_check_Æl
 ();

210 i‡(
size
 > ~((
size_t
Ë0Ë- ( (
hdr
) + 1))

212 
	`__£t_î∫o
 (
ENOMEM
);

213  
NULL
;

216 
__mÆloc_hook
 = 
ﬁd_mÆloc_hook
;

217 i‡(
ﬁd_mÆloc_hook
 !
NULL
)

218 
hdr
 = (hd∏*Ë(*
ﬁd_mÆloc_hook
)( (hdrË+ 
size
 + 1,

219 
ˇŒî
);

221 
hdr
 = (hd∏*Ë
	`mÆloc
 ( (hdrË+ 
size
 + 1);

222 
__mÆloc_hook
 = 
mÆlochook
;

223 i‡(
hdr
 =
NULL
)

224  
NULL
;

226 
hdr
->
size
 = size;

227 
	`lök_blk
 (
hdr
);

228 
hdr
->
block
 = hdr;

229 
hdr
->
magic2
 = (
uöçå_t
Ëhd∏^ 
MAGICWORD
;

230 ((*Ë&
hdr
[1])[
size
] = 
MAGICBYTE
;

231 
	`Êood
 ((
__±r_t
Ë(
hdr
 + 1), 
MALLOCFLOOD
, 
size
);

232  (
__±r_t
Ë(
hdr
 + 1);

233 
	}
}

235 
__±r_t


236 
	$memÆignhook
 (
size_t
 
Æignmít
, size_à
size
,

237 c⁄° 
__±r_t
 
ˇŒî
)

239 
hdr
 *hdr;

240 
size_t
 
¶›
;

241 *
block
;

243 i‡(
≥d™tic
)

244 
	`mcheck_check_Æl
 ();

246 
¶›
 = ( *
hdr
 + 
Æignmít
 - 1) & -álignment;

248 i‡(
size
 > ~((
size_t
Ë0Ë- (
¶›
 + 1))

250 
	`__£t_î∫o
 (
ENOMEM
);

251  
NULL
;

254 
__memÆign_hook
 = 
ﬁd_memÆign_hook
;

255 i‡(
ﬁd_memÆign_hook
 !
NULL
)

256 
block
 = (*
ﬁd_memÆign_hook
)(
Æignmít
, 
¶›
 + 
size
 + 1, 
ˇŒî
);

258 
block
 = 
	`memÆign
 (
Æignmít
, 
¶›
 + 
size
 + 1);

259 
__memÆign_hook
 = 
memÆignhook
;

260 i‡(
block
 =
NULL
)

261  
NULL
;

263 
hdr
 = ((hd∏*Ë(
block
 + 
¶›
)) - 1;

265 
hdr
->
size
 = size;

266 
	`lök_blk
 (
hdr
);

267 
hdr
->
block
 = (
__±r_t
) block;

268 
hdr
->
magic2
 = (
uöçå_t
Ë
block
 ^ 
MAGICWORD
;

269 ((*Ë&
hdr
[1])[
size
] = 
MAGICBYTE
;

270 
	`Êood
 ((
__±r_t
Ë(
hdr
 + 1), 
MALLOCFLOOD
, 
size
);

271  (
__±r_t
Ë(
hdr
 + 1);

272 
	}
}

274 
__±r_t


275 
	$ªÆlochook
 (
__±r_t
 
±r
, 
size_t
 
size
, c⁄° __±r_à
ˇŒî
)

277 i‡(
size
 == 0)

279 
	`‰ìhook
 (
±r
, 
ˇŒî
);

280  
NULL
;

283 
hdr
 *hdr;

284 
size_t
 
osize
;

286 i‡(
≥d™tic
)

287 
	`mcheck_check_Æl
 ();

289 i‡(
size
 > ~((
size_t
Ë0Ë- ( (
hdr
) + 1))

291 
	`__£t_î∫o
 (
ENOMEM
);

292  
NULL
;

295 i‡(
±r
)

297 
hdr
 = ((hd∏*Ë
±r
) - 1;

298 
osize
 = 
hdr
->
size
;

300 
	`checkhdr
 (
hdr
);

301 
	`u∆ök_blk
 (
hdr
);

302 i‡(
size
 < 
osize
)

303 
	`Êood
 ((*Ë
±r
 + 
size
, 
FREEFLOOD
, 
osize
 - size);

307 
osize
 = 0;

308 
hdr
 = 
NULL
;

310 
__‰ì_hook
 = 
ﬁd_‰ì_hook
;

311 
__mÆloc_hook
 = 
ﬁd_mÆloc_hook
;

312 
__memÆign_hook
 = 
ﬁd_memÆign_hook
;

313 
__ªÆloc_hook
 = 
ﬁd_ªÆloc_hook
;

314 i‡(
ﬁd_ªÆloc_hook
 !
NULL
)

315 
hdr
 = (hd∏*Ë(*
ﬁd_ªÆloc_hook
)((
__±r_t
) hdr,

316  (
hdr
Ë+ 
size
 + 1,

317 
ˇŒî
);

319 
hdr
 = (hd∏*Ë
	`ªÆloc
 ((
__±r_t
) hdr,

320  (
hdr
Ë+ 
size
 + 1);

321 
__‰ì_hook
 = 
‰ìhook
;

322 
__mÆloc_hook
 = 
mÆlochook
;

323 
__memÆign_hook
 = 
memÆignhook
;

324 
__ªÆloc_hook
 = 
ªÆlochook
;

325 i‡(
hdr
 =
NULL
)

326  
NULL
;

328 
hdr
->
size
 = size;

329 
	`lök_blk
 (
hdr
);

330 
hdr
->
block
 = hdr;

331 
hdr
->
magic2
 = (
uöçå_t
Ëhd∏^ 
MAGICWORD
;

332 ((*Ë&
hdr
[1])[
size
] = 
MAGICBYTE
;

333 i‡(
size
 > 
osize
)

334 
	`Êood
 ((*Ë(
hdr
 + 1Ë+ 
osize
, 
MALLOCFLOOD
, 
size
 - osize);

335  (
__±r_t
Ë(
hdr
 + 1);

336 
	}
}

338 
__©åibuã__
 ((
n‹ëu∫
))

340 
	$mab‹t
 (
mcheck_°©us
 
°©us
)

342 c⁄° *
msg
;

343 
°©us
)

345 
MCHECK_OK
:

346 
msg
 = 
	`_
 ("memory is consistent,Üibrary is buggy\n");

348 
MCHECK_HEAD
:

349 
msg
 = 
	`_
 ("memory clobbered beforeállocated block\n");

351 
MCHECK_TAIL
:

352 
msg
 = 
	`_
 ("memory clobberedÖastÉnd ofállocated block\n");

354 
MCHECK_FREE
:

355 
msg
 = 
	`_
 ("block freedÅwice\n");

358 
msg
 = 
	`_
 ("bogus mcheck_status,Üibrary is buggy\n");

361 #ifde‡
_LIBC


362 
	`__libc_Áèl
 (
msg
);

364 
	`Ârötf
 (
°dîr
, "mcheck: %s", 
msg
);

365 
	`fÊush
 (
°dîr
);

366 
	`ab‹t
 ();

368 
	}
}

371 
	#mÆloc_›t_b¨rõr
(
x
) \

372 ({ 
	`__ty≥of
 (
x
Ë
__x
 = x; 
	`__asm
 ("" : "+m" (__x)); __x; })

	)

374 
	$mcheck
 (
func
)

375 (*
func
)(
mcheck_°©us
);

377 
ab‹tfunc
 = (
func
 !
NULL
Ë? fun¯: &
mab‹t
;

380 i‡(
__mÆloc_öôülized
 <0 && !
mcheck_u£d
)

383 *
p
 = 
	`mÆloc
 (0);

385 
p
 = 
	`mÆloc_›t_b¨rõr
 (p);

386 
	`‰ì
 (
p
);

388 
ﬁd_‰ì_hook
 = 
__‰ì_hook
;

389 
__‰ì_hook
 = 
‰ìhook
;

390 
ﬁd_mÆloc_hook
 = 
__mÆloc_hook
;

391 
__mÆloc_hook
 = 
mÆlochook
;

392 
ﬁd_memÆign_hook
 = 
__memÆign_hook
;

393 
__memÆign_hook
 = 
memÆignhook
;

394 
ﬁd_ªÆloc_hook
 = 
__ªÆloc_hook
;

395 
__ªÆloc_hook
 = 
ªÆlochook
;

396 
mcheck_u£d
 = 1;

399  
mcheck_u£d
 ? 0 : -1;

400 
	}
}

401 #ifde‡
_LIBC


402 
	$libc_hiddí_def
 (
mcheck
)

405 
	$mcheck_≥d™tic
 (
func
)

406 (*
func
)(
mcheck_°©us
);

408 
ªs
 = 
	`mcheck
 (
func
);

409 i‡(
ªs
 == 0)

410 
≥d™tic
 = 1;

411  
ªs
;

412 
	}
}

414 
mcheck_°©us


415 
	$m¥obe
 (
__±r_t
 
±r
)

417  
mcheck_u£d
 ? 
	`checkhdr
 (((
hdr
 *Ë
±r
Ë- 1Ë: 
MCHECK_DISABLED
;

418 
	}
}

	@mcheck.h

18 #i‚de‡
_MCHECK_H


19 
	#_MCHECK_H
 1

	)

21 
	~<„©uªs.h
>

23 
__BEGIN_DECLS


27 
	emcheck_°©us


29 
	mMCHECK_DISABLED
 = -1,

30 
	mMCHECK_OK
,

31 
	mMCHECK_FREE
,

32 
	mMCHECK_HEAD
,

33 
	mMCHECK_TAIL


41 
mcheck
 ((*
__ab‹tfunc
)(
mcheck_°©us
)Ë
__THROW
;

45 
	`mcheck_≥d™tic
 ((*
__ab‹tfunc
)(
mcheck_°©us
)Ë
__THROW
;

48 
	`mcheck_check_Æl
 ();

53 
mcheck_°©us
 
	$m¥obe
 (*
__±r
Ë
__THROW
;

56 
	$måa˚
 (Ë
__THROW
;

57 
	$mu¡ø˚
 (Ë
__THROW
;

59 
__END_DECLS


	@memusage.c

20 
	~<as£π.h
>

21 
	~<©omic.h
>

22 
	~<dlf˙.h
>

23 
	~<î∫o.h
>

24 
	~<f˙é.h
>

25 
	~<öây≥s.h
>

26 
	~<sig«l.h
>

27 
	~<°d¨g.h
>

28 
	~<°dboﬁ.h
>

29 
	~<°dio.h
>

30 
	~<°dlib.h
>

31 
	~<°rög.h
>

32 
	~<uni°d.h
>

33 
	~<°döt.h
>

34 
	~<sys/mm™.h
>

35 
	~<sys/time.h
>

37 
	~<memußge.h
>

41 *(*
	gmÆlo˝
)(
	gsize_t
);

42 *(*
	gªÆlo˝
Ë(*, 
	gsize_t
);

43 *(*
	gˇŒo˝
Ë(
	gsize_t
, size_t);

44 (*
‰ìp
) (*);

46 *(*
mm≠p
Ë(*, 
size_t
, , , , 
off_t
);

47 *(*
mm≠64p
Ë(*, 
size_t
, , , , 
off64_t
);

48 (*
munm≠p
Ë(*, 
size_t
);

49 *(*
mªm≠p
Ë(*, 
size_t
, size_t, , *);

53 
idx_mÆloc
 = 0,

54 
idx_ªÆloc
,

55 
idx_ˇŒoc
,

56 
idx_‰ì
,

57 
idx_mm≠_r
,

58 
idx_mm≠_w
,

59 
idx_mm≠_a
,

60 
idx_mªm≠
,

61 
idx_munm≠
,

62 
idx_œ°


66 
	shódî


68 
size_t
 
Àngth
;

69 
size_t
 
magic
;

72 
	#MAGIC
 0x„edbóf

	)

75 
memußge_˙å_t
 
ˇŒs
[
idx_œ°
];

76 
memußge_˙å_t
 
Áûed
[
idx_œ°
];

77 
memußge_size_t
 
tŸÆ
[
idx_œ°
];

78 
memußge_size_t
 
gønd_tŸÆ
;

79 
memußge_˙å_t
 
hi°ogøm
[65536 / 16];

80 
memußge_˙å_t
 
œrge
;

81 
memußge_˙å_t
 
ˇŒs_tŸÆ
;

82 
memußge_˙å_t
 
ö∂a˚
;

83 
memußge_˙å_t
 
de¸ósög
;

84 
memußge_˙å_t
 
ªÆloc_‰ì
;

85 
memußge_˙å_t
 
ö∂a˚_mªm≠
;

86 
memußge_˙å_t
 
de¸ósög_mªm≠
;

87 
memußge_size_t
 
cuºít_hóp
;

88 
memußge_size_t
 
≥ak_u£
[3];

89 
__thªad
 
uöçå_t
 
°¨t_•
;

92 
	#≥ak_hóp
 
≥ak_u£
[0]

	)

93 
	#≥ak_°ack
 
≥ak_u£
[1]

	)

94 
	#≥ak_tŸÆ
 
≥ak_u£
[2]

	)

96 
	#DEFAULT_BUFFER_SIZE
 32768

	)

97 
size_t
 
buf„r_size
;

99 
fd
 = -1;

101 
boﬁ
 
nŸ_me
;

102 
öôülized
;

103 
boﬁ
 
åa˚_mm≠
;

104 c⁄° *
__¥og«me
;

106 
	síåy


108 
uöt64_t
 
hóp
;

109 
uöt64_t
 
°ack
;

110 
uöt32_t
 
time_low
;

111 
uöt32_t
 
time_high
;

114 
íåy
 
buf„r
[2 * 
DEFAULT_BUFFER_SIZE
];

115 
u©omic32_t
 
buf„r_˙t
;

116 
íåy
 
fú°
;

121 
	$upd©e_d©a
 (
hódî
 *
ªsu…
, 
size_t
 
Àn
, size_à
ﬁd_Àn
)

123 i‡(
ªsu…
 !
NULL
)

127 
ªsu…
->
Àngth
 = 
Àn
;

128 
ªsu…
->
magic
 = 
MAGIC
;

132 
memußge_size_t
 
hóp


133 
	`ˇtomic_exch™ge_™d_add
 (&
cuºít_hóp
, 
Àn
 - 
ﬁd_Àn
) +Üen - old_len;

134 
	`ˇtomic_max
 (&
≥ak_hóp
, 
hóp
);

140 i‡(
	`__glibc_u∆ikñy
 (!
°¨t_•
))

141 
°¨t_•
 = 
	`GETSP
 ();

143 
uöçå_t
 
•
 = 
	`GETSP
 ();

144 #ifde‡
STACK_GROWS_UPWARD


147 i‡(
	`__glibc_u∆ikñy
 (
•
 < 
°¨t_•
))

148 
°¨t_•
 = 
•
;

149 
size_t
 
cuºít_°ack
 = 
•
 - 
°¨t_•
;

153 i‡(
	`__glibc_u∆ikñy
 (
•
 > 
°¨t_•
))

154 
°¨t_•
 = 
•
;

155 
size_t
 
cuºít_°ack
 = 
°¨t_•
 - 
•
;

157 
	`ˇtomic_max
 (&
≥ak_°ack
, 
cuºít_°ack
);

160 
	`ˇtomic_max
 (&
≥ak_tŸÆ
, 
hóp
 + 
cuºít_°ack
);

163 i‡(
fd
 != -1)

165 
u©omic32_t
 
idx
 = 
	`ˇtomic_exch™ge_™d_add
 (&
buf„r_˙t
, 1);

166 i‡(
idx
 + 1 >2 * 
buf„r_size
)

172 
u©omic32_t
 
ª£t
 = (
idx
 + 1Ë% (2 * 
buf„r_size
);

173 
	`ˇtomic_com∑ª_™d_exch™ge_vÆ_acq
 (&
buf„r_˙t
, 
ª£t
, 
idx
 + 1);

174 i‡(
idx
 >2 * 
buf„r_size
)

175 
idx
 = 
ª£t
 - 1;

177 
	`as£π
 (
idx
 < 2 * 
DEFAULT_BUFFER_SIZE
);

179 
buf„r
[
idx
].
hóp
 = 
cuºít_hóp
;

180 
buf„r
[
idx
].
°ack
 = 
cuºít_°ack
;

181 
	`GETTIME
 (
buf„r
[
idx
].
time_low
, buf„r[idx].
time_high
);

184 i‡(
idx
 + 1 =
buf„r_size
)

185 
	`wrôe
 (
fd
, 
buf„r
, 
buf„r_size
 *  (
íåy
));

186 i‡(
idx
 + 1 =2 * 
buf„r_size
)

187 
	`wrôe
 (
fd
, &
buf„r
[
buf„r_size
], buf„r_sizê*  (
íåy
));

189 
	}
}

194 
	$öt_h™dÀr
 (
signo
)

197 
	`upd©e_d©a
 (
NULL
, 0, 0);

198 
	}
}

218 
	$me
 ()

220 c⁄° *
ív
 = 
	`gëív
 ("MEMUSAGE_PROG_NAME");

221 
size_t
 
¥og_Àn
 = 
	`°æí
 (
__¥og«me
);

223 
öôülized
 = -1;

224 
mÆlo˝
 = (*(*)(
size_t
))
	`dlsym
 (
RTLD_NEXT
, "malloc");

225 
ªÆlo˝
 = (*(*)(*, 
size_t
))
	`dlsym
 (
RTLD_NEXT
, "realloc");

226 
ˇŒo˝
 = (*(*)(
size_t
, size_t))
	`dlsym
 (
RTLD_NEXT
, "calloc");

227 
‰ìp
 = ((*)(*))
	`dlsym
 (
RTLD_NEXT
, "free");

229 
mm≠p
 = (*(*)(*, 
size_t
, , , , 
off_t
))
	`dlsym
 (
RTLD_NEXT
,

231 
mm≠64p
 =

232 (*(*)(*, 
size_t
, , , , 
off64_t
))
	`dlsym
 (
RTLD_NEXT
,

234 
mªm≠p
 = (*(*)(*, 
size_t
, size_t, , *))
	`dlsym
 (
RTLD_NEXT
,

236 
munm≠p
 = ((*)(*, 
size_t
))
	`dlsym
 (
RTLD_NEXT
, "munmap");

237 
öôülized
 = 1;

239 i‡(
ív
 !
NULL
)

242 
size_t
 
Àn
 = 
	`°æí
 (
ív
);

243 i‡(
Àn
 > 
¥og_Àn
 || 
	`°rcmp
 (
ív
, &
__¥og«me
[prog_len -Üen]) != 0

244 || (
¥og_Àn
 !
Àn
 && 
__¥og«me
[prog_len -Üen - 1] != '/'))

245 
nŸ_me
 = 
åue
;

249 i‡(!
nŸ_me
 && 
fd
 == -1)

251 c⁄° *
ouäame
;

253 i‡(!
°¨t_•
)

254 
°¨t_•
 = 
	`GETSP
 ();

256 
ouäame
 = 
	`gëív
 ("MEMUSAGE_OUTPUT");

257 i‡(
ouäame
 !
NULL
 && outname[0] != '\0'

258 && (
	`ac˚ss
 (
ouäame
, 
R_OK
 | 
W_OK
Ë=0 || 
î∫o
 =
ENOENT
))

260 
fd
 = 
	`¸ót64
 (
ouäame
, 0666);

262 i‡(
fd
 == -1)

265 
nŸ_me
 = 
åue
;

269 
fú°
.
hóp
 = 0;

270 
fú°
.
°ack
 = 0;

271 
	`GETTIME
 (
fú°
.
time_low
, fú°.
time_high
);

273 
	`wrôe
 (
fd
, &
fú°
,  (first));

274 
	`wrôe
 (
fd
, &
fú°
,  (first));

278 
buf„r_size
 = 
DEFAULT_BUFFER_SIZE
;

279 i‡(
	`gëív
 ("MEMUSAGE_BUFFER_SIZE"Ë!
NULL
)

281 
buf„r_size
 = 
	`©oi
 (
	`gëív
 ("MEMUSAGE_BUFFER_SIZE"));

282 i‡(
buf„r_size
 =0 || buf„r_sizê> 
DEFAULT_BUFFER_SIZE
)

283 
buf„r_size
 = 
DEFAULT_BUFFER_SIZE
;

287 i‡(
	`gëív
 ("MEMUSAGE_NO_TIMER"Ë=
NULL
)

289 
siga˘i⁄
 
a˘
;

291 
a˘
.
ß_h™dÀr
 = (
sigh™dÀr_t
Ë&
öt_h™dÀr
;

292 
a˘
.
ß_Êags
 = 
SA_RESTART
;

293 
	`sigfûl£t
 (&
a˘
.
ß_mask
);

295 i‡(
	`siga˘i⁄
 (
SIGPROF
, &
a˘
, 
NULL
) >= 0)

297 
ôimîvÆ
 
timî
;

299 
timî
.
ô_vÆue
.
tv_£c
 = 0;

300 
timî
.
ô_vÆue
.
tv_u£c
 = 1;

301 
timî
.
ô_öãrvÆ
 =Åimî.
ô_vÆue
;

302 
	`£tôimî
 (
ITIMER_PROF
, &
timî
, 
NULL
);

308 i‡(!
nŸ_me
 && 
	`gëív
 ("MEMUSAGE_TRACE_MMAP"Ë!
NULL
)

309 
åa˚_mm≠
 = 
åue
;

311 
	}
}

316 
__©åibuã__
 ((
c⁄°ru˘‹
))

317 
	$öô
 ()

319 
°¨t_•
 = 
	`GETSP
 ();

320 i‡(!
öôülized
)

321 
	`me
 ();

322 
	}
}

328 
	$mÆloc
 (
size_t
 
Àn
)

330 
hódî
 *
ªsu…
 = 
NULL
;

333 i‡(
	`__glibc_u∆ikñy
 (
öôülized
 <= 0))

335 i‡(
öôülized
 == -1)

336  
NULL
;

338 
	`me
 ();

342 i‡(
nŸ_me
)

343  (*
mÆlo˝
)(
Àn
);

346 
	`ˇtomic_ö¸emít
 (&
ˇŒs
[
idx_mÆloc
]);

348 
	`ˇtomic_add
 (&
tŸÆ
[
idx_mÆloc
], 
Àn
);

350 
	`ˇtomic_add
 (&
gønd_tŸÆ
, 
Àn
);

352 i‡(
Àn
 < 65536)

353 
	`ˇtomic_ö¸emít
 (&
hi°ogøm
[
Àn
 / 16]);

355 
	`ˇtomic_ö¸emít
 (&
œrge
);

357 
	`ˇtomic_ö¸emít
 (&
ˇŒs_tŸÆ
);

360 
ªsu…
 = (
hódî
 *Ë(*
mÆlo˝
)(
Àn
 +  (header));

361 i‡(
ªsu…
 =
NULL
)

363 
	`ˇtomic_ö¸emít
 (&
Áûed
[
idx_mÆloc
]);

364  
NULL
;

368 
	`upd©e_d©a
 (
ªsu…
, 
Àn
, 0);

371  (*Ë(
ªsu…
 + 1);

372 
	}
}

378 
	$ªÆloc
 (*
ﬁd
, 
size_t
 
Àn
)

380 
hódî
 *
ªsu…
 = 
NULL
;

381 
hódî
 *
ªÆ
;

382 
size_t
 
ﬁd_Àn
;

385 i‡(
	`__glibc_u∆ikñy
 (
öôülized
 <= 0))

387 i‡(
öôülized
 == -1)

388  
NULL
;

390 
	`me
 ();

394 i‡(
nŸ_me
)

395  (*
ªÆlo˝
)(
ﬁd
, 
Àn
);

397 i‡(
ﬁd
 =
NULL
)

400 
ªÆ
 = 
NULL
;

401 
ﬁd_Àn
 = 0;

405 
ªÆ
 = ((
hódî
 *Ë
ﬁd
) - 1;

406 i‡(
ªÆ
->
magic
 !
MAGIC
)

408  (*
ªÆlo˝
)(
ﬁd
, 
Àn
);

410 
ﬁd_Àn
 = 
ªÆ
->
Àngth
;

414 
	`ˇtomic_ö¸emít
 (&
ˇŒs
[
idx_ªÆloc
]);

415 i‡(
Àn
 > 
ﬁd_Àn
)

418 
	`ˇtomic_add
 (&
tŸÆ
[
idx_ªÆloc
], 
Àn
 - 
ﬁd_Àn
);

420 
	`ˇtomic_add
 (&
gønd_tŸÆ
, 
Àn
 - 
ﬁd_Àn
);

423 i‡(
Àn
 =0 && 
ﬁd
 !
NULL
)

426 
	`ˇtomic_ö¸emít
 (&
ªÆloc_‰ì
);

428 
	`ˇtomic_add
 (&
tŸÆ
[
idx_‰ì
], 
ªÆ
->
Àngth
);

431 
	`upd©e_d©a
 (
NULL
, 0, 
ﬁd_Àn
);

434 (*
‰ìp
Ë(
ªÆ
);

436  
NULL
;

440 i‡(
Àn
 < 65536)

441 
	`ˇtomic_ö¸emít
 (&
hi°ogøm
[
Àn
 / 16]);

443 
	`ˇtomic_ö¸emít
 (&
œrge
);

445 
	`ˇtomic_ö¸emít
 (&
ˇŒs_tŸÆ
);

448 
ªsu…
 = (
hódî
 *Ë(*
ªÆlo˝
)(
ªÆ
, 
Àn
 +  (header));

449 i‡(
ªsu…
 =
NULL
)

451 
	`ˇtomic_ö¸emít
 (&
Áûed
[
idx_ªÆloc
]);

452  
NULL
;

456 i‡(
ªÆ
 =
ªsu…
)

457 
	`ˇtomic_ö¸emít
 (&
ö∂a˚
);

459 i‡(
ﬁd_Àn
 > 
Àn
)

460 
	`ˇtomic_ö¸emít
 (&
de¸ósög
);

463 
	`upd©e_d©a
 (
ªsu…
, 
Àn
, 
ﬁd_Àn
);

466  (*Ë(
ªsu…
 + 1);

467 
	}
}

473 
	$ˇŒoc
 (
size_t
 
n
, size_à
Àn
)

475 
hódî
 *
ªsu…
;

476 
size_t
 
size
 = 
n
 * 
Àn
;

479 i‡(
	`__glibc_u∆ikñy
 (
öôülized
 <= 0))

481 i‡(
öôülized
 == -1)

482  
NULL
;

484 
	`me
 ();

488 i‡(
nŸ_me
)

489  (*
ˇŒo˝
)(
n
, 
Àn
);

492 
	`ˇtomic_ö¸emít
 (&
ˇŒs
[
idx_ˇŒoc
]);

494 
	`ˇtomic_add
 (&
tŸÆ
[
idx_ˇŒoc
], 
size
);

496 
	`ˇtomic_add
 (&
gønd_tŸÆ
, 
size
);

498 i‡(
size
 < 65536)

499 
	`ˇtomic_ö¸emít
 (&
hi°ogøm
[
size
 / 16]);

501 
	`ˇtomic_ö¸emít
 (&
œrge
);

503 ++
ˇŒs_tŸÆ
;

506 
ªsu…
 = (
hódî
 *Ë(*
mÆlo˝
)(
size
 +  (header));

507 i‡(
ªsu…
 =
NULL
)

509 
	`ˇtomic_ö¸emít
 (&
Áûed
[
idx_ˇŒoc
]);

510  
NULL
;

514 
	`upd©e_d©a
 (
ªsu…
, 
size
, 0);

517  
	`mem£t
 (
ªsu…
 + 1, '\0', 
size
);

518 
	}
}

524 
	$‰ì
 (*
±r
)

526 
hódî
 *
ªÆ
;

529 i‡(
	`__glibc_u∆ikñy
 (
öôülized
 <= 0))

531 i‡(
öôülized
 == -1)

534 
	`me
 ();

538 i‡(
nŸ_me
)

540 (*
‰ìp
Ë(
±r
);

545 i‡(
±r
 =
NULL
)

547 
	`ˇtomic_ö¸emít
 (&
ˇŒs
[
idx_‰ì
]);

552 
ªÆ
 = ((
hódî
 *Ë
±r
) - 1;

553 i‡(
ªÆ
->
magic
 !
MAGIC
)

556 (*
‰ìp
Ë(
±r
);

561 
	`ˇtomic_ö¸emít
 (&
ˇŒs
[
idx_‰ì
]);

563 
	`ˇtomic_add
 (&
tŸÆ
[
idx_‰ì
], 
ªÆ
->
Àngth
);

566 
	`upd©e_d©a
 (
NULL
, 0, 
ªÆ
->
Àngth
);

569 (*
‰ìp
Ë(
ªÆ
);

570 
	}
}

576 
	$mm≠
 (*
°¨t
, 
size_t
 
Àn
, 
¥Ÿ
, 
Êags
, 
fd
, 
off_t
 
off£t
)

578 *
ªsu…
 = 
NULL
;

581 i‡(
	`__glibc_u∆ikñy
 (
öôülized
 <= 0))

583 i‡(
öôülized
 == -1)

584  
NULL
;

586 
	`me
 ();

590 
ªsu…
 = (*
mm≠p
)(
°¨t
, 
Àn
, 
¥Ÿ
, 
Êags
, 
fd
, 
off£t
);

592 i‡(!
nŸ_me
 && 
åa˚_mm≠
)

594 
idx
 = (
Êags
 & 
MAP_ANON


595 ? 
idx_mm≠_a
 : 
¥Ÿ
 & 
PROT_WRITE
 ? 
idx_mm≠_w
 : 
idx_mm≠_r
);

598 
	`ˇtomic_ö¸emít
 (&
ˇŒs
[
idx
]);

600 
	`ˇtomic_add
 (&
tŸÆ
[
idx
], 
Àn
);

602 
	`ˇtomic_add
 (&
gønd_tŸÆ
, 
Àn
);

604 i‡(
Àn
 < 65536)

605 
	`ˇtomic_ö¸emít
 (&
hi°ogøm
[
Àn
 / 16]);

607 
	`ˇtomic_ö¸emít
 (&
œrge
);

609 
	`ˇtomic_ö¸emít
 (&
ˇŒs_tŸÆ
);

612 i‡(
ªsu…
 =
NULL
)

613 
	`ˇtomic_ö¸emít
 (&
Áûed
[
idx
]);

614 i‡(
idx
 =
idx_mm≠_w
)

618 
	`upd©e_d©a
 (
NULL
, 
Àn
, 0);

622  
ªsu…
;

623 
	}
}

629 
	$mm≠64
 (*
°¨t
, 
size_t
 
Àn
, 
¥Ÿ
, 
Êags
, 
fd
, 
off64_t
 
off£t
)

631 *
ªsu…
 = 
NULL
;

634 i‡(
	`__glibc_u∆ikñy
 (
öôülized
 <= 0))

636 i‡(
öôülized
 == -1)

637  
NULL
;

639 
	`me
 ();

643 
ªsu…
 = (*
mm≠64p
)(
°¨t
, 
Àn
, 
¥Ÿ
, 
Êags
, 
fd
, 
off£t
);

645 i‡(!
nŸ_me
 && 
åa˚_mm≠
)

647 
idx
 = (
Êags
 & 
MAP_ANON


648 ? 
idx_mm≠_a
 : 
¥Ÿ
 & 
PROT_WRITE
 ? 
idx_mm≠_w
 : 
idx_mm≠_r
);

651 
	`ˇtomic_ö¸emít
 (&
ˇŒs
[
idx
]);

653 
	`ˇtomic_add
 (&
tŸÆ
[
idx
], 
Àn
);

655 
	`ˇtomic_add
 (&
gønd_tŸÆ
, 
Àn
);

657 i‡(
Àn
 < 65536)

658 
	`ˇtomic_ö¸emít
 (&
hi°ogøm
[
Àn
 / 16]);

660 
	`ˇtomic_ö¸emít
 (&
œrge
);

662 
	`ˇtomic_ö¸emít
 (&
ˇŒs_tŸÆ
);

665 i‡(
ªsu…
 =
NULL
)

666 
	`ˇtomic_ö¸emít
 (&
Áûed
[
idx
]);

667 i‡(
idx
 =
idx_mm≠_w
)

671 
	`upd©e_d©a
 (
NULL
, 
Àn
, 0);

675  
ªsu…
;

676 
	}
}

682 
	$mªm≠
 (*
°¨t
, 
size_t
 
ﬁd_Àn
, size_à
Àn
, 
Êags
, ...)

684 *
ªsu…
 = 
NULL
;

685 
va_li°
 
≠
;

687 
	`va_°¨t
 (
≠
, 
Êags
);

688 *
√waddr
 = (
Êags
 & 
MREMAP_FIXED
Ë? 
	`va_¨g
 (
≠
, *Ë: 
NULL
;

689 
	`va_íd
 (
≠
);

692 i‡(
	`__glibc_u∆ikñy
 (
öôülized
 <= 0))

694 i‡(
öôülized
 == -1)

695  
NULL
;

697 
	`me
 ();

701 
ªsu…
 = (*
mªm≠p
)(
°¨t
, 
ﬁd_Àn
, 
Àn
, 
Êags
, 
√waddr
);

703 i‡(!
nŸ_me
 && 
åa˚_mm≠
)

706 
	`ˇtomic_ö¸emít
 (&
ˇŒs
[
idx_mªm≠
]);

707 i‡(
Àn
 > 
ﬁd_Àn
)

710 
	`ˇtomic_add
 (&
tŸÆ
[
idx_mªm≠
], 
Àn
 - 
ﬁd_Àn
);

712 
	`ˇtomic_add
 (&
gønd_tŸÆ
, 
Àn
 - 
ﬁd_Àn
);

715 i‡(
Àn
 < 65536)

716 
	`ˇtomic_ö¸emít
 (&
hi°ogøm
[
Àn
 / 16]);

718 
	`ˇtomic_ö¸emít
 (&
œrge
);

720 
	`ˇtomic_ö¸emít
 (&
ˇŒs_tŸÆ
);

723 i‡(
ªsu…
 =
NULL
)

724 
	`ˇtomic_ö¸emít
 (&
Áûed
[
idx_mªm≠
]);

728 i‡(
°¨t
 =
ªsu…
)

729 
	`ˇtomic_ö¸emít
 (&
ö∂a˚_mªm≠
);

731 i‡(
ﬁd_Àn
 > 
Àn
)

732 
	`ˇtomic_ö¸emít
 (&
de¸ósög_mªm≠
);

737 
	`upd©e_d©a
 (
NULL
, 
Àn
, 
ﬁd_Àn
);

742  
ªsu…
;

743 
	}
}

748 
	$munm≠
 (*
°¨t
, 
size_t
 
Àn
)

750 
ªsu…
;

753 i‡(
	`__glibc_u∆ikñy
 (
öôülized
 <= 0))

755 i‡(
öôülized
 == -1)

758 
	`me
 ();

762 
ªsu…
 = (*
munm≠p
)(
°¨t
, 
Àn
);

764 i‡(!
nŸ_me
 && 
åa˚_mm≠
)

767 
	`ˇtomic_ö¸emít
 (&
ˇŒs
[
idx_munm≠
]);

769 i‡(
	`__glibc_likñy
 (
ªsu…
 == 0))

772 
	`ˇtomic_add
 (&
tŸÆ
[
idx_munm≠
], 
Àn
);

776 
	`upd©e_d©a
 (
NULL
, 0, 
Àn
);

779 
	`ˇtomic_ö¸emít
 (&
Áûed
[
idx_munm≠
]);

782  
ªsu…
;

783 
	}
}

788 
__©åibuã__
 ((
de°ru˘‹
))

789 
	$de°
 ()

791 
≥r˚¡
, 
˙t
;

792 
maxˇŒs
;

795 i‡(
nŸ_me
)

799 
nŸ_me
 = 
åue
;

802 i‡(
fd
 != -1)

805 i‡(
buf„r_˙t
 > 
buf„r_size
)

806 
	`wrôe
 (
fd
, 
buf„r
 + 
buf„r_size
,

807 (
buf„r_˙t
 - 
buf„r_size
Ë*  (
íåy
));

809 
	`wrôe
 (
fd
, 
buf„r
, 
buf„r_˙t
 *  (
íåy
));

813 
	`l£ek
 (
fd
, 0, 
SEEK_SET
);

815 
fú°
.
°ack
 = 
≥ak_tŸÆ
;

816 
	`wrôe
 (
fd
, &
fú°
,  (
íåy
));

819 
fú°
.
hóp
 = 
≥ak_hóp
;

820 
fú°
.
°ack
 = 
≥ak_°ack
;

821 
	`GETTIME
 (
fú°
.
time_low
, fú°.
time_high
);

822 
	`wrôe
 (
fd
, &
fú°
,  (
íåy
));

825 
	`˛o£
 (
fd
);

826 
fd
 = -1;

830 
	`Ârötf
 (
°dîr
, "\n\
\e[01;32mMemory usage summary:\e[0;0m heapÅotal: %llu, heapÖeak: %lu, stackÖeak: %lu\n\
\e[04;34mÅotal callsÅotal memory failed calls\e[0m\n\
\e[00;34m malloc|\e[0m %10lu %12llu %s%12lu\e[00;00m\n\
\e[00;34mrealloc|\e[0m %10lu %12llu %s%12lu\e[00;00m (nomove:%ld, dec:%ld, free:%ld)\n\
\e[00;34m calloc|\e[0m %10lu %12llu %s%12lu\e[00;00m\n\
\e[00;34m free|\e[0m %10lu %12llu\n",

837 (Ë
gønd_tŸÆ
, (Ë
≥ak_hóp
,

838 (Ë
≥ak_°ack
,

839 (Ë
ˇŒs
[
idx_mÆloc
],

840 (Ë
tŸÆ
[
idx_mÆloc
],

841 
Áûed
[
idx_mÆloc
] ? "\e[01;41m" : "",

842 (Ë
Áûed
[
idx_mÆloc
],

843 (Ë
ˇŒs
[
idx_ªÆloc
],

844 (Ë
tŸÆ
[
idx_ªÆloc
],

845 
Áûed
[
idx_ªÆloc
] ? "\e[01;41m" : "",

846 (Ë
Áûed
[
idx_ªÆloc
],

847 (Ë
ö∂a˚
,

848 (Ë
de¸ósög
,

849 (Ë
ªÆloc_‰ì
,

850 (Ë
ˇŒs
[
idx_ˇŒoc
],

851 (Ë
tŸÆ
[
idx_ˇŒoc
],

852 
Áûed
[
idx_ˇŒoc
] ? "\e[01;41m" : "",

853 (Ë
Áûed
[
idx_ˇŒoc
],

854 (Ë
ˇŒs
[
idx_‰ì
],

855 (Ë
tŸÆ
[
idx_‰ì
]);

857 i‡(
åa˚_mm≠
)

858 
	`Ârötf
 (
°dîr
, "\
\e[00;34mmmap(r)|\e[0m %10lu %12llu %s%12lu\e[00;00m\n\
\e[00;34mmmap(w)|\e[0m %10lu %12llu %s%12lu\e[00;00m\n\
\e[00;34mmmap(a)|\e[0m %10lu %12llu %s%12lu\e[00;00m\n\
\e[00;34m mremap|\e[0m %10lu %12llu %s%12lu\e[00;00m (nomove: %ld, dec:%ld)\n\
\e[00;34m munmap|\e[0m %10lu %12llu %s%12lu\e[00;00m\n",

864 (Ë
ˇŒs
[
idx_mm≠_r
],

865 (Ë
tŸÆ
[
idx_mm≠_r
],

866 
Áûed
[
idx_mm≠_r
] ? "\e[01;41m" : "",

867 (Ë
Áûed
[
idx_mm≠_r
],

868 (Ë
ˇŒs
[
idx_mm≠_w
],

869 (Ë
tŸÆ
[
idx_mm≠_w
],

870 
Áûed
[
idx_mm≠_w
] ? "\e[01;41m" : "",

871 (Ë
Áûed
[
idx_mm≠_w
],

872 (Ë
ˇŒs
[
idx_mm≠_a
],

873 (Ë
tŸÆ
[
idx_mm≠_a
],

874 
Áûed
[
idx_mm≠_a
] ? "\e[01;41m" : "",

875 (Ë
Áûed
[
idx_mm≠_a
],

876 (Ë
ˇŒs
[
idx_mªm≠
],

877 (Ë
tŸÆ
[
idx_mªm≠
],

878 
Áûed
[
idx_mªm≠
] ? "\e[01;41m" : "",

879 (Ë
Áûed
[
idx_mªm≠
],

880 (Ë
ö∂a˚_mªm≠
,

881 (Ë
de¸ósög_mªm≠
,

882 (Ë
ˇŒs
[
idx_munm≠
],

883 (Ë
tŸÆ
[
idx_munm≠
],

884 
Áûed
[
idx_munm≠
] ? "\e[01;41m" : "",

885 (Ë
Áûed
[
idx_munm≠
]);

888 
	`Ârötf
 (
°dîr
, "\e[01;32mHistogram for block sizes:\e[0;0m\n");

891 
maxˇŒs
 = 
œrge
;

892 
˙t
 = 0; cnt < 65536; cnt += 16)

893 i‡(
hi°ogøm
[
˙t
 / 16] > 
maxˇŒs
)

894 
maxˇŒs
 = 
hi°ogøm
[
˙t
 / 16];

896 
˙t
 = 0; cnt < 65536; cnt += 16)

898 i‡(
hi°ogøm
[
˙t
 / 16] != 0)

900 
≥r˚¡
 = (
hi°ogøm
[
˙t
 / 16] * 100Ë/ 
ˇŒs_tŸÆ
;

901 
	`Ârötf
 (
°dîr
, "%5d-%-5d%12lu ", 
˙t
, cnt + 15,

902 (Ë
hi°ogøm
[
˙t
 / 16]);

903 i‡(
≥r˚¡
 == 0)

904 
	`Âuts
 (" <1% \e[41;37m", 
°dîr
);

906 
	`Ârötf
 (
°dîr
, "%3d%% \e[41;37m", 
≥r˚¡
);

910 
≥r˚¡
 = (
hi°ogøm
[
˙t
 / 16] * 50Ë/ 
maxˇŒs
;

911 
≥r˚¡
-- > 0)

912 
	`Âutc
 ('=', 
°dîr
);

913 
	`Âuts
 ("\e[0;0m\n", 
°dîr
);

916 i‡(
œrge
 != 0)

918 
≥r˚¡
 = (
œrge
 * 100Ë/ 
ˇŒs_tŸÆ
;

919 
	`Ârötf
 (
°dîr
, "Ü¨gê %12lu ", (Ë
œrge
);

920 i‡(
≥r˚¡
 == 0)

921 
	`Âuts
 (" <1% \e[41;37m", 
°dîr
);

923 
	`Ârötf
 (
°dîr
, "%3d%% \e[41;37m", 
≥r˚¡
);

924 
≥r˚¡
 = (
œrge
 * 50Ë/ 
maxˇŒs
;

925 
≥r˚¡
-- > 0)

926 
	`Âutc
 ('=', 
°dîr
);

927 
	`Âuts
 ("\e[0;0m\n", 
°dîr
);

934 
nŸ_me
 = 
Ál£
;

935 
	}
}

	@memusagestat.c

19 
	#_FILE_OFFSET_BITS
 64

	)

21 
	~<¨gp.h
>

22 
	~<as£π.h
>

23 
	~<î∫o.h
>

24 
	~<îr‹.h
>

25 
	~<f˙é.h
>

26 
	~<gë›t.h
>

27 
	~<öây≥s.h
>

28 
	~<liböé.h
>

29 
	~<°dio.h
>

30 
	~<°dlib.h
>

31 
	~<°rög.h
>

32 
	~<uni°d.h
>

33 
	~<°döt.h
>

34 
	~<sys/∑øm.h
>

35 
	~<sys/°©.h
>

37 
	~<gd.h
>

38 
	~<gdf⁄é.h
>

39 
	~<gdf⁄ts.h
>

41 
	~"../vîsi⁄.h
"

42 
	#PACKAGE
 
_libc_öé_domaö«me


	)

45 
	#XSIZE
 800

	)

46 
	#YSIZE
 600

	)

48 #i‚de‡
N_


49 
	#N_
(
Arg
Ë
	)
Arg

54 c⁄° 
¨gp_›ti⁄
 
	g›ti⁄s
[] =

56 { "ouçut", 'o', 
N_
 ("FILE"), 0, N_ ("Name output file") },

57 { "°rög", 's', 
N_
 ("STRING"), 0, N_ ("Title string used in output graphic") },

58 { "time", 't', 
NULL
, 0, 
N_
 ("\
 outputÜinearÅoÅime (default isÜinearÅoÇumber of function calls)\
") },

61 { "tŸÆ", 'T', 
NULL
, 0,

62 
N_
 ("Also draw graph forÅotal memory consumption") },

63 { "x-size", 'x', 
N_
 ("VALUE"), 0,

64 
N_
 ("Make output graphic VALUEÖixels wide") },

65 { "y-size", 'y', "VALUE", 0, 
N_
 ("Make output graphic VALUEÖixels high") },

66 { 
NULL
, 0, NULL, 0, NULL }

70 c⁄° 
	gdoc
[] = 
N_
 ("Generate graphic from memoryÖrofiling data");

73 c⁄° 
	g¨gs_doc
[] = 
N_
 ("DATAFILE [OUTFILE]");

76 
îr‹_t
 
∑r£_›t
 (
key
, *
¨g
, 
¨gp_°©e
 *
°©e
);

79 *
m‹e_hñp
 (
key
, c⁄° *
ãxt
, *
öput
);

82 
¥öt_vîsi⁄
 (
FILE
 *
°ªam
, 
¨gp_°©e
 *
°©e
);

83 (*
¨gp_¥ogøm_vîsi⁄_hook
Ë(
FILE
 *, 
¨gp_°©e
 *Ë
¥öt_vîsi⁄
;

86 
¨gp
árgp =

88 
›ti⁄s
, 
∑r£_›t
, 
¨gs_doc
, 
doc
, 
NULL
, 
m‹e_hñp


89 
	}
};

92 
	síåy


94 
uöt64_t
 
	mhóp
;

95 
uöt64_t
 
	m°ack
;

96 
uöt32_t
 
	mtime_low
;

97 
uöt32_t
 
	mtime_high
;

102 
size_t
 
	gxsize
;

103 
size_t
 
	gysize
;

106 *
	gouäame
;

109 c⁄° *
	g°rög
;

112 
	gtime_ba£d
;

115 
	gÆso_tŸÆ
 = 0;

119 
	$maö
 (
¨gc
, *
¨gv
[])

121 
ªmaöög
;

122 c⁄° *
ö«me
;

123 
gdImagePå
 
im_out
;

124 
gªy
, 
blue
, 
ªd
, 
gªí
, 
yñlow
, 
bœck
;

125 
fd
;

126 
°©
 
°
;

127 
size_t
 
maxsize_hóp
;

128 
size_t
 
maxsize_°ack
;

129 
size_t
 
maxsize_tŸÆ
;

130 
uöt64_t
 
tŸÆ
;

131 
uöt64_t
 
˙t
, 
˙t2
;

132 
FILE
 *
outfûe
;

133 
buf
[30];

134 
size_t
 
œ°_hóp
;

135 
size_t
 
œ°_°ack
;

136 
size_t
 
œ°_tŸÆ
;

137 
íåy
 
hódít
[2];

138 
uöt64_t
 
°¨t_time
;

139 
uöt64_t
 
íd_time
;

140 
uöt64_t
 
tŸÆ_time
;

141 c⁄° *
hóp_f‹m©
, *
°ack_f‹m©
;

142 
hóp_sˇÀ
, 
°ack_sˇÀ
, 
löe
;

144 
ouäame
 = 
NULL
;

145 
xsize
 = 
XSIZE
;

146 
ysize
 = 
YSIZE
;

147 
°rög
 = 
NULL
;

150 
	`¨gp_∑r£
 (&
¨gp
, 
¨gc
, 
¨gv
, 0, &
ªmaöög
, 
NULL
);

152 i‡(
ªmaöög
 >
¨gc
 ||Ñemaining + 2 <árgc)

154 
	`¨gp_hñp
 (&
¨gp
, 
°dout
, 
ARGP_HELP_SEE
 | 
ARGP_HELP_EXIT_ERR
,

155 
¥ogøm_övoˇti⁄_sh‹t_«me
);

156 
	`exô
 (1);

159 
ö«me
 = 
¨gv
[
ªmaöög
++];

161 i‡(
ªmaöög
 < 
¨gc
)

162 
ouäame
 = 
¨gv
[
ªmaöög
];

163 i‡(
ouäame
 =
NULL
)

165 
size_t
 
Àn
 = 
	`°æí
 (
ö«me
);

166 
ouäame
 = 
	`Æloˇ
 (
Àn
 + 5);

167 
	`°p˝y
 (°p˝y (
ouäame
, 
ö«me
), ".png");

172 
fd
 = 
	`›í
 (
ö«me
, 
O_RDWR
);

173 i‡(
fd
 == -1)

174 
	`îr‹
 (
EXIT_FAILURE
, 
î∫o
, "cannot open input file");

175 i‡(
	`f°©
 (
fd
, &
°
) != 0)

177 
	`˛o£
 (
fd
);

178 
	`îr‹
 (
EXIT_FAILURE
, 
î∫o
, "cannot get size of input file");

181 i‡((
°
.
°_size
 %  (
íåy
)) != 0

183 || 
°
.
°_size
 < 2 *  (
íåy
))

185 
	`˛o£
 (
fd
);

186 
	`îr‹
 (
EXIT_FAILURE
, 0, "input file has incorrect size");

189 
tŸÆ
 = 
°
.
°_size
 /  (
íåy
) - 2;

192 
	`ªad
 (
fd
, 
hódít
,  (headent));

193 
maxsize_hóp
 = 
hódít
[1].
hóp
;

194 
maxsize_°ack
 = 
hódít
[1].
°ack
;

195 
maxsize_tŸÆ
 = 
hódít
[0].
°ack
;

197 i‡(
maxsize_hóp
 =0 && 
maxsize_°ack
 == 0)

202 
íåy
 
√xt
;

206 i‡(
	`ªad
 (
fd
, &
√xt
,  (next)) == 0)

208 i‡(
√xt
.
hóp
 > 
maxsize_hóp
)

209 
maxsize_hóp
 = 
√xt
.
hóp
;

210 i‡(
√xt
.
°ack
 > 
maxsize_°ack
)

211 
maxsize_°ack
 = 
√xt
.
°ack
;

212 i‡(
maxsize_hóp
 + 
maxsize_°ack
 > 
maxsize_tŸÆ
)

213 
maxsize_tŸÆ
 = 
maxsize_hóp
 + 
maxsize_°ack
;

216 
hódít
[0].
°ack
 = 
maxsize_tŸÆ
;

217 
hódít
[1].
hóp
 = 
maxsize_hóp
;

218 
hódít
[1].
°ack
 = 
maxsize_°ack
;

219 
hódít
[1].
time_low
 = 
√xt
.time_low;

220 
hódít
[1].
time_high
 = 
√xt
.time_high;

223 
	`l£ek
 (
fd
, 0, 
SEEK_SET
);

224 
	`wrôe
 (
fd
, 
hódít
, 2 *  (
íåy
));

227 i‡(
Æso_tŸÆ
)

231 
maxsize_hóp
 = 
maxsize_tŸÆ
;

232 
maxsize_°ack
 = 
maxsize_tŸÆ
;

235 
°¨t_time
 = ((
uöt64_t
Ë
hódít
[0].
time_high
Ë<< 32 | hódít[0].
time_low
;

236 
íd_time
 = ((
uöt64_t
Ë
hódít
[1].
time_high
Ë<< 32 | hódít[1].
time_low
;

237 
tŸÆ_time
 = 
íd_time
 - 
°¨t_time
;

239 i‡(
xsize
 < 100)

240 
xsize
 = 100;

241 i‡(
ysize
 < 80)

242 
ysize
 = 80;

245 
im_out
 = 
	`gdImageCª©e
 (
xsize
, 
ysize
);

248 
gªy
 = 
	`gdImageCﬁ‹AŒoˇã
 (
im_out
, 224, 224, 224);

251 
	`gdImageCﬁ‹Tøn•¨ít
 (
im_out
, 
gªy
);

254 
ªd
 = 
	`gdImageCﬁ‹AŒoˇã
 (
im_out
, 255, 0, 0);

255 
gªí
 = 
	`gdImageCﬁ‹AŒoˇã
 (
im_out
, 0, 130, 0);

256 
blue
 = 
	`gdImageCﬁ‹AŒoˇã
 (
im_out
, 0, 0, 255);

257 
yñlow
 = 
	`gdImageCﬁ‹AŒoˇã
 (
im_out
, 154, 205, 50);

258 
bœck
 = 
	`gdImageCﬁ‹AŒoˇã
 (
im_out
, 0, 0, 0);

260 
	`gdImageRe˘™gÀ
 (
im_out
, 40, 20, 
xsize
 - 40, 
ysize
 - 20, 
blue
);

262 i‡(
maxsize_hóp
 < 1024)

264 
hóp_f‹m©
 = "%Zu";

265 
hóp_sˇÀ
 = 1;

267 i‡(
maxsize_hóp
 < 1024 * 1024 * 100)

269 
hóp_f‹m©
 = "%Zuk";

270 
hóp_sˇÀ
 = 1024;

274 
hóp_f‹m©
 = "%ZuM";

275 
hóp_sˇÀ
 = 1024 * 1024;

278 i‡(
maxsize_°ack
 < 1024)

280 
°ack_f‹m©
 = "%Zu";

281 
°ack_sˇÀ
 = 1;

283 i‡(
maxsize_°ack
 < 1024 * 1024 * 100)

285 
°ack_f‹m©
 = "%Zuk";

286 
°ack_sˇÀ
 = 1024;

290 
°ack_f‹m©
 = "%ZuM";

291 
°ack_sˇÀ
 = 1024 * 1024;

294 
	`gdImageSåög
 (
im_out
, 
gdF⁄tSmÆl
, 38, 
ysize
 - 14, (*) "0",

295 
blue
);

296 
	`¢¥ötf
 (
buf
,  (buf), 
hóp_f‹m©
, 0);

297 
	`gdImageSåög
 (
im_out
, 
gdF⁄tSmÆl
, 
maxsize_hóp
 < 1024 ? 32 : 26,

298 
ysize
 - 26, (*Ë
buf
, 
ªd
);

299 
	`¢¥ötf
 (
buf
,  (buf), 
°ack_f‹m©
, 0);

300 
	`gdImageSåög
 (
im_out
, 
gdF⁄tSmÆl
, 
xsize
 - 37, 
ysize
 - 26,

301 (*Ë
buf
, 
gªí
);

303 i‡(
°rög
 !
NULL
)

304 
	`gdImageSåög
 (
im_out
, 
gdF⁄tL¨ge
, (
xsize
 - 
	`°æí
 (
°rög
) * 8) / 2,

305 2, (*Ë
°rög
, 
gªí
);

307 
	`gdImageSåögUp
 (
im_out
, 
gdF⁄tSmÆl
, 1, 
ysize
 / 2 - 10,

308 (*Ë"Æloˇãd", 
ªd
);

309 
	`gdImageSåögUp
 (
im_out
, 
gdF⁄tSmÆl
, 11, 
ysize
 / 2 - 10,

310 (*Ë"mem‹y", 
ªd
);

312 
	`gdImageSåögUp
 (
im_out
, 
gdF⁄tSmÆl
, 
xsize
 - 39, 
ysize
 / 2 - 10,

313 (*Ë"u£d", 
gªí
);

314 
	`gdImageSåögUp
 (
im_out
, 
gdF⁄tSmÆl
, 
xsize
 - 27, 
ysize
 / 2 - 10,

315 (*Ë"°ack", 
gªí
);

317 
	`¢¥ötf
 (
buf
,  (buf), 
hóp_f‹m©
, 
maxsize_hóp
 / 
hóp_sˇÀ
);

318 
	`gdImageSåög
 (
im_out
, 
gdF⁄tSmÆl
, 39 - 
	`°æí
 (
buf
) * 6, 14,

319 (*Ë
buf
, 
ªd
);

320 
	`¢¥ötf
 (
buf
,  (buf), 
°ack_f‹m©
, 
maxsize_°ack
 / 
°ack_sˇÀ
);

321 
	`gdImageSåög
 (
im_out
, 
gdF⁄tSmÆl
, 
xsize
 - 37, 14,

322 (*Ë
buf
, 
gªí
);

324 
löe
 = 1;Üine <= 3; ++line)

326 i‡(
maxsize_hóp
 > 0)

328 
˙t
 = (((
ysize
 - 40Ë* (
maxsize_hóp
 / 4 * 
löe
 / 
hóp_sˇÀ
))

329 / (
maxsize_hóp
 / 
hóp_sˇÀ
));

330 
	`gdImageDashedLöe
 (
im_out
, 40, 
ysize
 - 20 - 
˙t
, 
xsize
 - 40,

331 
ysize
 - 20 - 
˙t
, 
ªd
);

332 
	`¢¥ötf
 (
buf
,  (buf), 
hóp_f‹m©
,

333 
maxsize_hóp
 / 4 * 
löe
 / 
hóp_sˇÀ
);

334 
	`gdImageSåög
 (
im_out
, 
gdF⁄tSmÆl
, 39 - 
	`°æí
 (
buf
) * 6,

335 
ysize
 - 26 - 
˙t
, (*Ë
buf
, 
ªd
);

338 
˙t
 = 0;

340 i‡(
maxsize_°ack
 > 0)

341 
˙t2
 = (((
ysize
 - 40Ë* (
maxsize_°ack
 / 4 * 
löe
 / 
°ack_sˇÀ
))

342 / (
maxsize_°ack
 / 
°ack_sˇÀ
));

344 
˙t2
 = 0;

346 i‡(
˙t
 !
˙t2
)

347 
	`gdImageDashedLöe
 (
im_out
, 40, 
ysize
 - 20 - 
˙t2
, 
xsize
 - 40,

348 
ysize
 - 20 - 
˙t2
, 
gªí
);

349 
	`¢¥ötf
 (
buf
,  (buf), 
°ack_f‹m©
, 
maxsize_°ack
 / 4 * 
löe
 /

350 
°ack_sˇÀ
);

351 
	`gdImageSåög
 (
im_out
, 
gdF⁄tSmÆl
, 
xsize
 - 37, 
ysize
 - 26 - 
˙t2
,

352 (*Ë
buf
, 
gªí
);

355 
	`¢¥ötf
 (
buf
,  (buf), "%Œu", (Ë
tŸÆ
);

356 
	`gdImageSåög
 (
im_out
, 
gdF⁄tSmÆl
, 
xsize
 - 50, 
ysize
 - 14,

357 (*Ë
buf
, 
blue
);

359 i‡(!
time_ba£d
)

361 
uöt64_t
 
¥eviou¶y
 = 
°¨t_time
;

363 
	`gdImageSåög
 (
im_out
, 
gdF⁄tSmÆl
, 40 + (
xsize
 - 32 * 6 - 80) / 2,

364 
ysize
 - 12,

366 
blue
);

369 
œ°_°ack
 = 
œ°_hóp
 = 
œ°_tŸÆ
 = 
ysize
 - 20;

370 
˙t
 = 1; c¡ <
tŸÆ
; ++cnt)

372 
íåy
Éntry;

373 
size_t
 
√w
[2];

374 
uöt64_t
 
now
;

376 
	`ªad
 (
fd
, &
íåy
,  (entry));

378 
now
 = ((
uöt64_t
Ë
íåy
.
time_high
Ë<< 32 |É¡ry.
time_low
;

380 i‡((((
¥eviou¶y
 - 
°¨t_time
Ë* 100Ë/ 
tŸÆ_time
) % 10 < 5)

381 
	`gdImageFûÀdRe˘™gÀ
 (
im_out
,

382 40 + ((
˙t
 - 1Ë* (
xsize
 - 80)Ë/ 
tŸÆ
,

383 
ysize
 - 19,

384 39 + (
˙t
 * (
xsize
 - 80)Ë/ 
tŸÆ
,

385 
ysize
 - 14, 
yñlow
);

386 
¥eviou¶y
 = 
now
;

388 i‡(
Æso_tŸÆ
 && 
maxsize_hóp
 > 0)

390 
size_t
 
√w3
;

392 
√w3
 = (
ysize
 - 20) - (((() (ysize - 40))

393 * (
íåy
.
hóp
 +É¡ry.
°ack
))

394 / 
maxsize_hóp
);

395 
	`gdImageLöe
 (
im_out
, 40 + ((
xsize
 - 80Ë* (
˙t
 - 1)Ë/ 
tŸÆ
,

396 
œ°_tŸÆ
,

397 40 + ((
xsize
 - 80Ë* 
˙t
Ë/ 
tŸÆ
, 
√w3
,

398 
bœck
);

399 
œ°_tŸÆ
 = 
√w3
;

402 i‡(
maxsize_hóp
 > 0)

404 
√w
[0] = ((
ysize
 - 20)

405 - ((((Ë(
ysize
 - 40))

406 * 
íåy
.
hóp
Ë/ 
maxsize_hóp
));

407 
	`gdImageLöe
 (
im_out
, 40 + ((
xsize
 - 80Ë* (
˙t
 - 1)Ë/ 
tŸÆ
,

408 
œ°_hóp
, 40 + ((
xsize
 - 80Ë* 
˙t
Ë/ 
tŸÆ
,

409 
√w
[0], 
ªd
);

410 
œ°_hóp
 = 
√w
[0];

413 i‡(
maxsize_°ack
 > 0)

415 
√w
[1] = ((
ysize
 - 20)

416 - ((((Ë(
ysize
 - 40))

417 * 
íåy
.
°ack
Ë/ 
maxsize_°ack
));

418 
	`gdImageLöe
 (
im_out
, 40 + ((
xsize
 - 80Ë* (
˙t
 - 1)Ë/ 
tŸÆ
,

419 
œ°_°ack
, 40 + ((
xsize
 - 80Ë* 
˙t
Ë/ 
tŸÆ
,

420 
√w
[1], 
gªí
);

421 
œ°_°ack
 = 
√w
[1];

425 
˙t
 = 0;

426 
˙t
 < 
tŸÆ
)

428 
	`gdImageLöe
 (
im_out
, 40 + ((
xsize
 - 80Ë* 
˙t
Ë/ 
tŸÆ
, 
ysize
 - 20,

429 40 + ((
xsize
 - 80Ë* 
˙t
Ë/ 
tŸÆ
, 
ysize
 - 15, 
blue
);

430 
˙t
 +
	`MAX
 (1, 
tŸÆ
 / 20);

432 
	`gdImageLöe
 (
im_out
, 
xsize
 - 40, 
ysize
 - 20, xsize - 40, ysize - 15,

433 
blue
);

437 
uöt64_t
 
√xt_tick
 = 
	`MAX
 (1, 
tŸÆ
 / 20);

438 
size_t
 
œ°_xpos
 = 40;

440 
	`gdImageSåög
 (
im_out
, 
gdF⁄tSmÆl
, 40 + (
xsize
 - 39 * 6 - 80) / 2,

441 
ysize
 - 12,

442 (*Ë" \
# mem‹y h™dlög fun˘i⁄ cÆl†/Åime", 
blue
);

445 
˙t
 = 0; cnt < 20; cnt += 2)

446 
	`gdImageFûÀdRe˘™gÀ
 (
im_out
,

447 40 + (
˙t
 * (
xsize
 - 80)Ë/ 20, 
ysize
 - 19,

448 39 + ((
˙t
 + 1Ë* (
xsize
 - 80)) / 20,

449 
ysize
 - 14, 
yñlow
);

451 
œ°_°ack
 = 
œ°_hóp
 = 
œ°_tŸÆ
 = 
ysize
 - 20;

452 
˙t
 = 1; c¡ <
tŸÆ
; ++cnt)

454 
íåy
Éntry;

455 
size_t
 
√w
[2];

456 
size_t
 
xpos
;

457 
uöt64_t
 
now
;

459 
	`ªad
 (
fd
, &
íåy
,  (entry));

461 
now
 = ((
uöt64_t
Ë
íåy
.
time_high
Ë<< 32 |É¡ry.
time_low
;

462 
xpos
 = 40 + ((
xsize
 - 80Ë* (
now
 - 
°¨t_time
)Ë/ 
tŸÆ_time
;

464 i‡(
˙t
 =
√xt_tick
)

466 
	`gdImageLöe
 (
im_out
, 
xpos
, 
ysize
 - 20, xpos, ysizê- 15, 
blue
);

467 
√xt_tick
 +
	`MAX
 (1, 
tŸÆ
 / 20);

470 i‡(
Æso_tŸÆ
 && 
maxsize_hóp
 > 0)

472 
size_t
 
√w3
;

474 
√w3
 = (
ysize
 - 20) - (((() (ysize - 40))

475 * (
íåy
.
hóp
 +É¡ry.
°ack
))

476 / 
maxsize_hóp
);

477 
	`gdImageLöe
 (
im_out
, 
œ°_xpos
, 
œ°_tŸÆ
, 
xpos
, 
√w3
, 
bœck
);

478 
œ°_tŸÆ
 = 
√w3
;

481 i‡(
maxsize_hóp
 > 0)

483 
√w
[0] = ((
ysize
 - 20)

484 - ((((Ë(
ysize
 - 40))

485 * 
íåy
.
hóp
Ë/ 
maxsize_hóp
));

486 
	`gdImageLöe
 (
im_out
, 
œ°_xpos
, 
œ°_hóp
, 
xpos
, 
√w
[0], 
ªd
);

487 
œ°_hóp
 = 
√w
[0];

490 i‡(
maxsize_°ack
 > 0)

492 
√w
[1] = ((
ysize
 - 20)

493 - ((((Ë(
ysize
 - 40))

494 * 
íåy
.
°ack
Ë/ 
maxsize_°ack
));

495 
	`gdImageLöe
 (
im_out
, 
œ°_xpos
, 
œ°_°ack
, 
xpos
, 
√w
[1],

496 
gªí
);

497 
œ°_°ack
 = 
√w
[1];

500 
œ°_xpos
 = 
xpos
;

505 
outfûe
 = 
	`f›í
 (
ouäame
, "w");

506 i‡(
outfûe
 =
NULL
)

507 
	`îr‹
 (
EXIT_FAILURE
, 
î∫o
, "cannot open output file");

509 
	`gdImagePng
 (
im_out
, 
outfûe
);

511 
	`f˛o£
 (
outfûe
);

513 
	`gdImageDe°roy
 (
im_out
);

516 
	}
}

520 
îr‹_t


521 
	$∑r£_›t
 (
key
, *
¨g
, 
¨gp_°©e
 *
°©e
)

523 
key
)

526 
ouäame
 = 
¨g
;

529 
°rög
 = 
¨g
;

532 
time_ba£d
 = 1;

535 
Æso_tŸÆ
 = 1;

538 
xsize
 = 
	`©oi
 (
¨g
);

539 i‡(
xsize
 == 0)

540 
xsize
 = 
XSIZE
;

543 
ysize
 = 
	`©oi
 (
¨g
);

544 i‡(
ysize
 == 0)

545 
ysize
 = 
XSIZE
;

548  
ARGP_ERR_UNKNOWN
;

551 
	}
}

555 
	$m‹e_hñp
 (
key
, c⁄° *
ãxt
, *
öput
)

557 *
ç
;

559 
key
)

561 
ARGP_KEY_HELP_EXTRA
:

563 i‡(
	`a•rötf
 (&
ç
, 
	`gëãxt
 ("\
 bugÑï‹tög in°ru˘i⁄s,ÖÀa£ sì:\n\
%s.\n"), 
REPORT_BUGS_TO
) < 0)

566  
NULL
;

568  
ç
;

573  (*Ë
ãxt
;

574 
	}
}

578 
	$¥öt_vîsi⁄
 (
FILE
 *
°ªam
, 
¨gp_°©e
 *
°©e
)

580 
	`Ârötf
 (
°ªam
, "memußge°© %s%s\n", 
PKGVERSION
, 
VERSION
);

581 
	`Ârötf
 (
°ªam
, 
	`gëãxt
 ("\
 (C) %s Free Software Foundation, Inc.\n\
 is free software; seeÅhe source for copying conditions. There is NO\n\
;ÇotÉven for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\
"), "2014");

586 
	`Ârötf
 (
°ªam
, 
	`gëãxt
 ("Written by %s.\n"), "Ulrich Drepper");

587 
	}
}

	@morecore.c

18 #i‚de‡
_MALLOC_INTERNAL


19 
	#_MALLOC_INTERNAL


	)

20 
	~<mÆloc.h
>

23 #i‚de‡
__GNU_LIBRARY__


24 
	#__sbrk
 
sbrk


	)

27 #ifde‡
__GNU_LIBRARY__


31 
	~<°ddef.h
>

32 
	~<°dlib.h
>

33 *
	$__sbrk
 (
±rdiff_t
 
ö¸emít
Ë
__THROW
;

34 
	$libc_hiddí_¥Ÿo
 (
__sbrk
)

37 #i‚de‡
NULL


38 
	#NULL
 0

	)

45 
	$__deÁu…_m‹ec‹e
 (
±rdiff_t
 
ö¸emít
)

47 *
ªsu…
 = (*Ë
	`__sbrk
 (
ö¸emít
);

48 i‡(
ªsu…
 == (*) -1)

49  
NULL
;

51  
ªsu…
;

52 
	}
}

53 
libc_hiddí_def
 (
__deÁu…_m‹ec‹e
)

	@mtrace.c

21 #i‚de‡
_MALLOC_INTERNAL


22 
	#_MALLOC_INTERNAL


	)

23 
	~<mÆloc.h
>

24 
	~<mcheck.h
>

25 
	~<bôs/libc-lock.h
>

28 
	~<dlf˙.h
>

29 
	~<f˙é.h
>

30 
	~<°dio.h
>

31 
	~<°rög.h
>

32 
	~<°dlib.h
>

34 
	~<_ôﬂ.h
>

36 
	~<libc-öã∫Æ.h
>

38 
	~<libio/iﬁibio.h
>

39 
	#£tvbuf
(
s
, 
b
, 
f
, 
l
Ë
	`_IO_£tvbuf
 (s, b, f,Ü)

	)

40 
	#fwrôe
(
buf
, 
size
, 
cou¡
, 
Â
Ë
	`_IO_fwrôe
 (buf, size, cou¡, fp)

	)

42 
	~<kî√l-„©uªs.h
>

44 
	#TRACE_BUFFER_SIZE
 512

	)

46 
FILE
 *
	gmÆl°ªam
;

47 c⁄° 
	gmÆÀnv
[] = "MALLOC_TRACE";

48 *
	gmÆloc_åa˚_buf„r
;

50 
__libc_lock_deföe_öôülized
 (, 
lock
);

53 
__±r_t
 
	gmÆlw©ch
;

56 (*
å_ﬁd_‰ì_hook
Ë(
__±r_t
 
±r
, const __ptr_t);

57 
	$__±r_t
 (*
å_ﬁd_mÆloc_hook
Ë(
size_t
 
size
, c⁄° 
__±r_t
);

58 
	$__±r_t
 (*
å_ﬁd_ªÆloc_hook
Ë(
__±r_t
 
±r
, 
size_t
 
size
,

59 c⁄° 
__±r_t
);

60 
	$__±r_t
 (*
å_ﬁd_memÆign_hook
Ë(
size_t
 
__Æignmít
, size_à
__size
,

61 c⁄° 
__±r_t
);

68 
	$å_bªak
 (Ë
__THROW
;

69 
	$libc_hiddí_¥Ÿo
 (
å_bªak
)

71 
	$å_bªak
 ()

73 
	}
}

74 
	$libc_hiddí_def
 (
å_bªak
)

76 
öã∫Æ_fun˘i⁄


77 
	$å_whîe
 (c⁄° 
__±r_t
 
ˇŒî
, 
Dl_öfo
 *
öfo
)

79 i‡(
ˇŒî
 !
NULL
)

81 i‡(
öfo
 !
NULL
)

83 *
buf
 = (*) "";

84 i‡(
öfo
->
dli_¢ame
 !
NULL
)

86 
size_t
 
Àn
 = 
	`°æí
 (
öfo
->
dli_¢ame
);

87 
buf
 = 
	`Æloˇ
 (
Àn
 + 6 + 2 *  (*));

89 
buf
[0] = '(';

90 
	`__°p˝y
 (
	`_fôﬂ
 (
ˇŒî
 >(c⁄° 
__±r_t
Ë
öfo
->
dli_ßddr


91 ? 
ˇŒî
 - (c⁄° 
__±r_t
Ë
öfo
->
dli_ßddr


92 : (c⁄° 
__±r_t
Ë
öfo
->
dli_ßddr
 - 
ˇŒî
,

93 
	`__°p˝y
 (
	`__memp˝y
 (
buf
 + 1, 
öfo
->
dli_¢ame
,

94 
Àn
),

95 
ˇŒî
 >(
__±r_t
Ë
öfo
->
dli_ßddr


101 
	`Ârötf
 (
mÆl°ªam
, "@ %s%s%s[%p] ",

102 
öfo
->
dli_‚ame
 ? : "", info->dli_fname ? ":" : "",

103 
buf
, 
ˇŒî
);

106 
	`Ârötf
 (
mÆl°ªam
, "@ [%p] ", 
ˇŒî
);

108 
	}
}

110 
Dl_öfo
 *

111 
	$lock_™d_öfo
 (c⁄° 
__±r_t
 
ˇŒî
, 
Dl_öfo
 *
mem
)

113 i‡(
ˇŒî
 =
NULL
)

114  
NULL
;

116 
Dl_öfo
 *
ªs
 = 
	`_dl_addr
 (
ˇŒî
, 
mem
, 
NULL
, NULL) ? mem : NULL;

118 
	`__libc_lock_lock
 (
lock
);

120  
ªs
;

121 
	}
}

124 
	$å_‰ìhook
 (
__±r_t
 
±r
, c⁄° __±r_à
ˇŒî
)

126 i‡(
±r
 =
NULL
)

129 
Dl_öfo
 
mem
;

130 
Dl_öfo
 *
öfo
 = 
	`lock_™d_öfo
 (
ˇŒî
, &
mem
);

131 
	`å_whîe
 (
ˇŒî
, 
öfo
);

133 
	`Ârötf
 (
mÆl°ªam
, "- %p\n", 
±r
);

134 i‡(
±r
 =
mÆlw©ch
)

136 
	`__libc_lock_u∆ock
 (
lock
);

137 
	`å_bªak
 ();

138 
	`__libc_lock_lock
 (
lock
);

140 
__‰ì_hook
 = 
å_ﬁd_‰ì_hook
;

141 i‡(
å_ﬁd_‰ì_hook
 !
NULL
)

142 (*
å_ﬁd_‰ì_hook
)(
±r
, 
ˇŒî
);

144 
	`‰ì
 (
±r
);

145 
__‰ì_hook
 = 
å_‰ìhook
;

146 
	`__libc_lock_u∆ock
 (
lock
);

147 
	}
}

149 
__±r_t


150 
	$å_mÆlochook
 (
size_t
 
size
, c⁄° 
__±r_t
 
ˇŒî
)

152 
__±r_t
 
hdr
;

154 
Dl_öfo
 
mem
;

155 
Dl_öfo
 *
öfo
 = 
	`lock_™d_öfo
 (
ˇŒî
, &
mem
);

157 
__mÆloc_hook
 = 
å_ﬁd_mÆloc_hook
;

158 i‡(
å_ﬁd_mÆloc_hook
 !
NULL
)

159 
hdr
 = (
__±r_t
Ë(*
å_ﬁd_mÆloc_hook
)(
size
, 
ˇŒî
);

161 
hdr
 = (
__±r_t
Ë
	`mÆloc
 (
size
);

162 
__mÆloc_hook
 = 
å_mÆlochook
;

164 
	`å_whîe
 (
ˇŒî
, 
öfo
);

166 
	`Ârötf
 (
mÆl°ªam
, "+ %∞%#lx\n", 
hdr
, (Ë
size
);

168 
	`__libc_lock_u∆ock
 (
lock
);

170 i‡(
hdr
 =
mÆlw©ch
)

171 
	`å_bªak
 ();

173  
hdr
;

174 
	}
}

176 
__±r_t


177 
	$å_ªÆlochook
 (
__±r_t
 
±r
, 
size_t
 
size
, c⁄° __±r_à
ˇŒî
)

179 
__±r_t
 
hdr
;

181 i‡(
±r
 =
mÆlw©ch
)

182 
	`å_bªak
 ();

184 
Dl_öfo
 
mem
;

185 
Dl_öfo
 *
öfo
 = 
	`lock_™d_öfo
 (
ˇŒî
, &
mem
);

187 
__‰ì_hook
 = 
å_ﬁd_‰ì_hook
;

188 
__mÆloc_hook
 = 
å_ﬁd_mÆloc_hook
;

189 
__ªÆloc_hook
 = 
å_ﬁd_ªÆloc_hook
;

190 i‡(
å_ﬁd_ªÆloc_hook
 !
NULL
)

191 
hdr
 = (
__±r_t
Ë(*
å_ﬁd_ªÆloc_hook
)(
±r
, 
size
, 
ˇŒî
);

193 
hdr
 = (
__±r_t
Ë
	`ªÆloc
 (
±r
, 
size
);

194 
__‰ì_hook
 = 
å_‰ìhook
;

195 
__mÆloc_hook
 = 
å_mÆlochook
;

196 
__ªÆloc_hook
 = 
å_ªÆlochook
;

198 
	`å_whîe
 (
ˇŒî
, 
öfo
);

199 i‡(
hdr
 =
NULL
)

201 i‡(
size
 != 0)

203 
	`Ârötf
 (
mÆl°ªam
, "! %∞%#lx\n", 
±r
, (Ë
size
);

205 
	`Ârötf
 (
mÆl°ªam
, "- %p\n", 
±r
);

207 i‡(
±r
 =
NULL
)

208 
	`Ârötf
 (
mÆl°ªam
, "+ %∞%#lx\n", 
hdr
, (Ë
size
);

211 
	`Ârötf
 (
mÆl°ªam
, "< %p\n", 
±r
);

212 
	`å_whîe
 (
ˇŒî
, 
öfo
);

213 
	`Ârötf
 (
mÆl°ªam
, "> %∞%#lx\n", 
hdr
, (Ë
size
);

216 
	`__libc_lock_u∆ock
 (
lock
);

218 i‡(
hdr
 =
mÆlw©ch
)

219 
	`å_bªak
 ();

221  
hdr
;

222 
	}
}

224 
__±r_t


225 
	$å_memÆignhook
 (
size_t
 
Æignmít
, size_à
size
, c⁄° 
__±r_t
 
ˇŒî
)

227 
__±r_t
 
hdr
;

229 
Dl_öfo
 
mem
;

230 
Dl_öfo
 *
öfo
 = 
	`lock_™d_öfo
 (
ˇŒî
, &
mem
);

232 
__memÆign_hook
 = 
å_ﬁd_memÆign_hook
;

233 
__mÆloc_hook
 = 
å_ﬁd_mÆloc_hook
;

234 i‡(
å_ﬁd_memÆign_hook
 !
NULL
)

235 
hdr
 = (
__±r_t
Ë(*
å_ﬁd_memÆign_hook
)(
Æignmít
, 
size
, 
ˇŒî
);

237 
hdr
 = (
__±r_t
Ë
	`memÆign
 (
Æignmít
, 
size
);

238 
__memÆign_hook
 = 
å_memÆignhook
;

239 
__mÆloc_hook
 = 
å_mÆlochook
;

241 
	`å_whîe
 (
ˇŒî
, 
öfo
);

243 
	`Ârötf
 (
mÆl°ªam
, "+ %∞%#lx\n", 
hdr
, (Ë
size
);

245 
	`__libc_lock_u∆ock
 (
lock
);

247 i‡(
hdr
 =
mÆlw©ch
)

248 
	`å_bªak
 ();

250  
hdr
;

251 
	}
}

254 #ifde‡
_LIBC


259 
__libc_‰ìªs_‚_£˘i⁄


260 
	$ªÀa£_libc_mem
 ()

263 i‡(
mÆl°ªam
 !
NULL
)

264 
	`__libc_‰ìªs
 ();

265 
	}
}

275 
	$måa˚
 ()

277 #ifde‡
_LIBC


278 
added_©exô_h™dÀr
;

280 *
mÆlfûe
;

283 i‡(
mÆl°ªam
 !
NULL
)

286 #ifde‡
_LIBC


290 
mÆlfûe
 = 
	`__libc_£cuª_gëív
 (
mÆÀnv
);

292 
mÆlfûe
 = 
	`gëív
 (
mÆÀnv
);

294 i‡(
mÆlfûe
 !
NULL
 || 
mÆlw©ch
 != NULL)

296 *
mtb
 = 
	`mÆloc
 (
TRACE_BUFFER_SIZE
);

297 i‡(
mtb
 =
NULL
)

300 
mÆl°ªam
 = 
	`f›í
 (
mÆlfûe
 !
NULL
 ? mallfile : "/dev/null", "wce");

301 i‡(
mÆl°ªam
 !
NULL
)

303 #i‚de‡
__ASSUME_O_CLOEXEC


305 
Êags
 = 
	`__f˙é
 (
	`fûío
 (
mÆl°ªam
), 
F_GETFD
, 0);

306 i‡(
Êags
 >= 0)

308 
Êags
 |
FD_CLOEXEC
;

309 
	`__f˙é
 (
	`fûío
 (
mÆl°ªam
), 
F_SETFD
, 
Êags
);

313 
mÆloc_åa˚_buf„r
 = 
mtb
;

314 
	`£tvbuf
 (
mÆl°ªam
, 
mÆloc_åa˚_buf„r
, 
_IOFBF
, 
TRACE_BUFFER_SIZE
);

315 
	`Ârötf
 (
mÆl°ªam
, "= Start\n");

316 
å_ﬁd_‰ì_hook
 = 
__‰ì_hook
;

317 
__‰ì_hook
 = 
å_‰ìhook
;

318 
å_ﬁd_mÆloc_hook
 = 
__mÆloc_hook
;

319 
__mÆloc_hook
 = 
å_mÆlochook
;

320 
å_ﬁd_ªÆloc_hook
 = 
__ªÆloc_hook
;

321 
__ªÆloc_hook
 = 
å_ªÆlochook
;

322 
å_ﬁd_memÆign_hook
 = 
__memÆign_hook
;

323 
__memÆign_hook
 = 
å_memÆignhook
;

324 #ifde‡
_LIBC


325 i‡(!
added_©exô_h™dÀr
)

327 *
__dso_h™dÀ
 
	`__©åibuã__
 ((
__wók__
));

328 
added_©exô_h™dÀr
 = 1;

329 
	`__cxa_©exô
 (((*)(*))
ªÀa£_libc_mem
, 
NULL
,

330 &
__dso_h™dÀ
 ? __dso_h™dÀ : 
NULL
);

335 
	`‰ì
 (
mtb
);

337 
	}
}

340 
	$mu¡ø˚
 ()

342 i‡(
mÆl°ªam
 =
NULL
)

348 
FILE
 *
f
 = 
mÆl°ªam
;

349 
mÆl°ªam
 = 
NULL
;

350 
__‰ì_hook
 = 
å_ﬁd_‰ì_hook
;

351 
__mÆloc_hook
 = 
å_ﬁd_mÆloc_hook
;

352 
__ªÆloc_hook
 = 
å_ﬁd_ªÆloc_hook
;

353 
__memÆign_hook
 = 
å_ﬁd_memÆign_hook
;

355 
	`Ârötf
 (
f
, "= End\n");

356 
	`f˛o£
 (
f
);

357 
	}
}

	@obstack.c

20 #ifde‡
_LIBC


21 
	~<ob°ack.h
>

22 
	~<shlib-com∑t.h
>

24 
	~<c⁄fig.h
>

25 
	~"ob°ack.h
"

31 
	#OBSTACK_INTERFACE_VERSION
 1

	)

42 
	~<°dio.h
>

43 #i‡!
deföed
 
_LIBC
 && deföed 
__GNU_LIBRARY__
 && __GNU_LIBRARY__ > 1

44 
	~<gnu-vîsi⁄s.h
>

45 #i‡
_GNU_OBSTACK_INTERFACE_VERSION
 =
OBSTACK_INTERFACE_VERSION


46 
	#ELIDE_CODE


	)

50 
	~<°ddef.h
>

52 #i‚de‡
ELIDE_CODE


55 
	~<°döt.h
>

58 
	ufo‹ound


60 
uötmax_t
 
	mi
;

61 
	md
;

62 *
	mp
;

64 
	sfoﬂlign


66 
	mc
;

67 
fo‹ound
 
	mu
;

74 
	mDEFAULT_ALIGNMENT
 = 
off£tof
 (
foﬂlign
, 
u
),

75 
	mDEFAULT_ROUNDING
 =  (
fo‹ound
)

82 #i‚de‡
COPYING_UNIT


83 
	#COPYING_UNIT
 

	)

93 
_N‹ëu∫
 
¥öt_™d_ab‹t
 ();

94 (*
ob°ack_Æloc_Áûed_h™dÀr
Ë(Ë
¥öt_™d_ab‹t
;

97 
	~<°dlib.h
>

98 #ifde‡
_LIBC


99 
ob°ack_exô_Áûuª
 = 
EXIT_FAILURE
;

101 
	~"exôÁû.h
"

102 
	#ob°ack_exô_Áûuª
 
exô_Áûuª


	)

105 #ifde‡
_LIBC


106 #i‡
	`SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_3_4
)

110 
ob°ack
 *
_ob°ack_com∑t
 = 0;

111 
	`com∑t_symbﬁ
 (
libc
, 
_ob°ack_com∑t
, 
_ob°ack
, 
GLIBC_2_0
);

121 
	#CALL_CHUNKFUN
(
h
, 
size
) \

122 (((
h
)->
u£_exåa_¨g
) \

123 ? (*(
h
)->
chunkfun
)((h)->
exåa_¨g
, (
size
)) \

124 : (*(
_ob°ack_chunk
 *(*)())(
h
)->
chunkfun
)((
size
)))

	)

126 
	#CALL_FREEFUN
(
h
, 
ﬁd_chunk
) \

128 i‡((
h
)->
u£_exåa_¨g
) \

129 (*(
h
)->
‰ìfun
)((h)->
exåa_¨g
, (
ﬁd_chunk
)); \

131 (*((*)(*))(
h
)->
‰ìfun
)((
ﬁd_chunk
)); \

132 
	}
} 0)

	)

144 
_ob°ack_begö
 (
ob°ack
 *
h
,

145 
size
, 
Æignmít
,

146 *(*
chunkfun
) (),

147 (*
‰ìfun
) (*))

149 
_ob°ack_chunk
 *
chunk
;

151 i‡(
Æignmít
 == 0)

152 
Æignmít
 = 
DEFAULT_ALIGNMENT
;

153 i‡(
size
 == 0)

164 
exåa
 = ((((12 + 
DEFAULT_ROUNDING
 - 1) & ~(DEFAULT_ROUNDING - 1))

165 + 4 + 
DEFAULT_ROUNDING
 - 1)

166 & ~(
DEFAULT_ROUNDING
 - 1));

167 
size
 = 4096 - 
exåa
;

170 
h
->
chunkfun
 = (
_ob°ack_chunk
 * (*) (*, )) chunkfun;

171 
h
->
‰ìfun
 = ((*Ë(*, 
_ob°ack_chunk
 *)) freefun;

172 
h
->
chunk_size
 = 
size
;

173 
h
->
Æignmít_mask
 = 
Æignmít
 - 1;

174 
h
->
u£_exåa_¨g
 = 0;

176 
chunk
 = 
h
->chunk = 
	`CALL_CHUNKFUN
 (h, h->
chunk_size
);

177 i‡(!
chunk
)

178 (*
ob°ack_Æloc_Áûed_h™dÀr
) ();

179 
h
->
√xt_‰ì
 = h->
obje˘_ba£
 = 
	`__PTR_ALIGN
 ((*Ë
chunk
, chunk->
c⁄ã¡s
,

180 
Æignmít
 - 1);

181 
h
->
chunk_limô
 = 
chunk
->
limô


182 (*Ë
chunk
 + 
h
->
chunk_size
;

183 
chunk
->
¥ev
 = 0;

185 
h
->
maybe_em±y_obje˘
 = 0;

186 
h
->
Æloc_Áûed
 = 0;

188 
	}
}

191 
_ob°ack_begö_1
 (
ob°ack
 *
h
, 
size
, 
Æignmít
,

192 *(*
chunkfun
) (*, ),

193 (*
‰ìfun
) (*, *),

194 *
¨g
)

196 
_ob°ack_chunk
 *
chunk
;

198 i‡(
Æignmít
 == 0)

199 
Æignmít
 = 
DEFAULT_ALIGNMENT
;

200 i‡(
size
 == 0)

211 
exåa
 = ((((12 + 
DEFAULT_ROUNDING
 - 1) & ~(DEFAULT_ROUNDING - 1))

212 + 4 + 
DEFAULT_ROUNDING
 - 1)

213 & ~(
DEFAULT_ROUNDING
 - 1));

214 
size
 = 4096 - 
exåa
;

217 
h
->
chunkfun
 = (
_ob°ack_chunk
 * (*)(*,)) chunkfun;

218 
h
->
‰ìfun
 = ((*Ë(*, 
_ob°ack_chunk
 *)) freefun;

219 
h
->
chunk_size
 = 
size
;

220 
h
->
Æignmít_mask
 = 
Æignmít
 - 1;

221 
h
->
exåa_¨g
 = 
¨g
;

222 
h
->
u£_exåa_¨g
 = 1;

224 
chunk
 = 
h
->chunk = 
	`CALL_CHUNKFUN
 (h, h->
chunk_size
);

225 i‡(!
chunk
)

226 (*
ob°ack_Æloc_Áûed_h™dÀr
) ();

227 
h
->
√xt_‰ì
 = h->
obje˘_ba£
 = 
	`__PTR_ALIGN
 ((*Ë
chunk
, chunk->
c⁄ã¡s
,

228 
Æignmít
 - 1);

229 
h
->
chunk_limô
 = 
chunk
->
limô


230 (*Ë
chunk
 + 
h
->
chunk_size
;

231 
chunk
->
¥ev
 = 0;

233 
h
->
maybe_em±y_obje˘
 = 0;

234 
h
->
Æloc_Áûed
 = 0;

236 
	}
}

245 
	$_ob°ack_√wchunk
 (
ob°ack
 *
h
, 
Àngth
)

247 
_ob°ack_chunk
 *
ﬁd_chunk
 = 
h
->
chunk
;

248 
_ob°ack_chunk
 *
√w_chunk
;

249 
√w_size
;

250 
obj_size
 = 
h
->
√xt_‰ì
 - h->
obje˘_ba£
;

251 
i
;

252 
Æªady
;

253 *
obje˘_ba£
;

256 
√w_size
 = (
obj_size
 + 
Àngth
Ë+ (obj_sizê>> 3Ë+ 
h
->
Æignmít_mask
 + 100;

257 i‡(
√w_size
 < 
h
->
chunk_size
)

258 
√w_size
 = 
h
->
chunk_size
;

261 
√w_chunk
 = 
	`CALL_CHUNKFUN
 (
h
, 
√w_size
);

262 i‡(!
√w_chunk
)

263 (*
ob°ack_Æloc_Áûed_h™dÀr
)();

264 
h
->
chunk
 = 
√w_chunk
;

265 
√w_chunk
->
¥ev
 = 
ﬁd_chunk
;

266 
√w_chunk
->
limô
 = 
h
->
chunk_limô
 = (*Ë√w_chunk + 
√w_size
;

269 
obje˘_ba£
 =

270 
	`__PTR_ALIGN
 ((*Ë
√w_chunk
,Çew_chunk->
c⁄ã¡s
, 
h
->
Æignmít_mask
);

275 i‡(
h
->
Æignmít_mask
 + 1 >
DEFAULT_ALIGNMENT
)

277 
i
 = 
obj_size
 /  (
COPYING_UNIT
) - 1;

278 
i
 >= 0; i--)

279 ((
COPYING_UNIT
 *Ë
obje˘_ba£
)[
i
]

280 ((
COPYING_UNIT
 *Ë
h
->
obje˘_ba£
)[
i
];

284 
Æªady
 = 
obj_size
 /  (
COPYING_UNIT
) *  (COPYING_UNIT);

287 
Æªady
 = 0;

289 
i
 = 
Æªady
; i < 
obj_size
; i++)

290 
obje˘_ba£
[
i
] = 
h
->object_base[i];

295 i‡(!
h
->
maybe_em±y_obje˘


296 && (
h
->
obje˘_ba£


297 =
	`__PTR_ALIGN
 ((*Ë
ﬁd_chunk
, old_chunk->
c⁄ã¡s
,

298 
h
->
Æignmít_mask
)))

300 
√w_chunk
->
¥ev
 = 
ﬁd_chunk
->prev;

301 
	`CALL_FREEFUN
 (
h
, 
ﬁd_chunk
);

304 
h
->
obje˘_ba£
 = object_base;

305 
h
->
√xt_‰ì
 = h->
obje˘_ba£
 + 
obj_size
;

307 
h
->
maybe_em±y_obje˘
 = 0;

308 
	}
}

309 #ifde‡
_LIBC


310 
	$libc_hiddí_def
 (
_ob°ack_√wchunk
)

319 
	$_ob°ack_Æloˇãd_p
 (
ob°ack
 *
h
, *
obj
Ë
__©åibuã_puª__
;

322 
	$_ob°ack_Æloˇãd_p
 (
ob°ack
 *
h
, *
obj
)

324 
_ob°ack_chunk
 *
Õ
;

325 
_ob°ack_chunk
 *
∂p
;

327 
Õ
 = (
h
)->
chunk
;

331 
Õ
 !0 && ((*ËÕ >
obj
 || (*Ë÷p)->
limô
 < obj))

333 
∂p
 = 
Õ
->
¥ev
;

334 
Õ
 = 
∂p
;

336  
Õ
 != 0;

337 
	}
}

342 #unde‡
ob°ack_‰ì


345 
	$__ob°ack_‰ì
 (
ob°ack
 *
h
, *
obj
)

347 
_ob°ack_chunk
 *
Õ
;

348 
_ob°ack_chunk
 *
∂p
;

350 
Õ
 = 
h
->
chunk
;

354 
Õ
 !0 && ((*ËÕ >
obj
 || (*Ë÷p)->
limô
 < obj))

356 
∂p
 = 
Õ
->
¥ev
;

357 
	`CALL_FREEFUN
 (
h
, 
Õ
);

358 
Õ
 = 
∂p
;

361 
h
->
maybe_em±y_obje˘
 = 1;

363 i‡(
Õ
)

365 
h
->
obje˘_ba£
 = h->
√xt_‰ì
 = (*Ë(
obj
);

366 
h
->
chunk_limô
 = 
Õ
->
limô
;

367 
h
->
chunk
 = 
Õ
;

369 i‡(
obj
 != 0)

371 
	`ab‹t
 ();

372 
	}
}

374 #ifde‡
_LIBC


377 
	$°r⁄g_Æüs
 (
ob°ack_‰ì
, 
_ob°ack_‰ì
)

381 
	$_ob°ack_mem‹y_u£d
 (
ob°ack
 *
h
)

383 
_ob°ack_chunk
 *
Õ
;

384 
nbyãs
 = 0;

386 
Õ
 = 
h
->
chunk
;Ü∞!0;Ü∞Õ->
¥ev
)

388 
nbyãs
 +
Õ
->
limô
 - (*)Üp;

390  
nbyãs
;

391 
	}
}

394 #ifde‡
_LIBC


395 
	~<liböé.h
>

397 
	~"gëãxt.h
"

399 #i‚de‡
_


400 
	#_
(
msgid
Ë
	`gëãxt
 (msgid)

	)

403 #ifde‡
_LIBC


404 
	~<libio/iﬁibio.h
>

407 
_N‹ëu∫
 

408 
	$¥öt_™d_ab‹t
 ()

415 #ifde‡
_LIBC


416 (Ë
	`__fx¥ötf
 (
NULL
, "%s\n", 
	`_
("memoryÉxhausted"));

418 
	`Ârötf
 (
°dîr
, "%s\n", 
	`_
("memoryÉxhausted"));

420 
	`exô
 (
ob°ack_exô_Áûuª
);

421 
	}
}

	@obstack.h

104 #i‚de‡
_OBSTACK_H


105 
	#_OBSTACK_H
 1

	)

112 #ifde‡
__PTRDIFF_TYPE__


113 
	#PTR_INT_TYPE
 
__PTRDIFF_TYPE__


	)

115 
	~<°ddef.h
>

116 
	#PTR_INT_TYPE
 
±rdiff_t


	)

123 
	#__BPTR_ALIGN
(
B
, 
P
, 
A
Ë((BË+ (((PË- (BË+ (A)Ë& ~(A)))

	)

132 
	#__PTR_ALIGN
(
B
, 
P
, 
A
) \

133 
	`__BPTR_ALIGN
 ( (
PTR_INT_TYPE
Ë<  (*Ë? (
B
) : (*) 0, \

134 
P
, 
A
)

	)

136 
	~<°rög.h
>

138 #i‚de‡
__©åibuã_puª__


139 
	#__©åibuã_puª__
 
_GL_ATTRIBUTE_PURE


	)

142 #ifde‡
__˝lu•lus


146 
	s_ob°ack_chunk


148 *
limô
;

149 
_ob°ack_chunk
 *
¥ev
;

150 
c⁄ã¡s
[4];

153 
	sob°ack


155 
chunk_size
;

156 
_ob°ack_chunk
 *
chunk
;

157 *
obje˘_ba£
;

158 *
√xt_‰ì
;

159 *
chunk_limô
;

162 
PTR_INT_TYPE
 
ãmpöt
;

163 *
ãmµå
;

164 } 
ãmp
;

165 
Æignmít_mask
;

169 
_ob°ack_chunk
 *(*
chunkfun
) (*, );

170 (*
‰ìfun
Ë(*, 
_ob°ack_chunk
 *);

171 *
exåa_¨g
;

172 
u£_exåa_¨g
 : 1;

173 
maybe_em±y_obje˘
 : 1;

177 
Æloc_Áûed
 : 1;

184 
_ob°ack_√wchunk
 (
ob°ack
 *, );

185 
_ob°ack_begö
 (
ob°ack
 *, , ,

187 
_ob°ack_begö_1
 (
ob°ack
 *, , ,

190 
_ob°ack_mem‹y_u£d
 (
ob°ack
 *Ë
__©åibuã_puª__
;

194 #i‚de‡
__ob°ack_‰ì


195 
	#__ob°ack_‰ì
 
ob°ack_‰ì


	)

197 
__ob°ack_‰ì
 (
ob°ack
 *, *);

204 (*
ob°ack_Æloc_Áûed_h™dÀr
) ();

207 
ob°ack_exô_Áûuª
;

213 
	#ob°ack_ba£
(
h
Ë((*Ë(h)->
obje˘_ba£
)

	)

217 
	#ob°ack_chunk_size
(
h
Ë((h)->
chunk_size
)

	)

221 
	#ob°ack_√xt_‰ì
(
h
Ë((h)->
√xt_‰ì
)

	)

225 
	#ob°ack_Æignmít_mask
(
h
Ë((h)->
Æignmít_mask
)

	)

228 
	#ob°ack_öô
(
h
) \

229 
	`_ob°ack_begö
 ((
h
), 0, 0, \

230 (*(*)())
ob°ack_chunk_Æloc
, \

231 ((*)(*))
ob°ack_chunk_‰ì
)

	)

233 
	#ob°ack_begö
(
h
, 
size
) \

234 
	`_ob°ack_begö
 ((
h
), (
size
), 0, \

235 (*(*)())
ob°ack_chunk_Æloc
, \

236 ((*)(*))
ob°ack_chunk_‰ì
)

	)

238 
	#ob°ack_•ecify_Æloˇti⁄
(
h
, 
size
, 
Æignmít
, 
chunkfun
, 
‰ìfun
) \

239 
	`_ob°ack_begö
 ((
h
), (
size
), (
Æignmít
), \

240 (*(*)())(
chunkfun
), \

241 ((*)(*))(
‰ìfun
))

	)

243 
	#ob°ack_•ecify_Æloˇti⁄_wôh_¨g
(
h
, 
size
, 
Æignmít
, 
chunkfun
, 
‰ìfun
, 
¨g
) \

244 
	`_ob°ack_begö_1
 ((
h
), (
size
), (
Æignmít
), \

245 (*(*)(*, ))(
chunkfun
), \

246 ((*)(*, *))(
‰ìfun
), (
¨g
))

	)

248 
	#ob°ack_chunkfun
(
h
, 
√wchunkfun
) \

249 ((
h
)->
chunkfun
 = (
_ob°ack_chunk
 *(*)(*, ))(
√wchunkfun
))

	)

251 
	#ob°ack_‰ìfun
(
h
, 
√w‰ìfun
) \

252 ((
h
)->
‰ìfun
 = ((*)(*, 
_ob°ack_chunk
 *))(
√w‰ìfun
))

	)

254 
	#ob°ack_1grow_Á°
(
h
, 
ach¨
Ë(*((h)->
√xt_‰ì
)++ = (ach¨))

	)

256 
	#ob°ack_bœnk_Á°
(
h
, 
n
Ë((h)->
√xt_‰ì
 +“))

	)

258 
	#ob°ack_mem‹y_u£d
(
h
Ë
	`_ob°ack_mem‹y_u£d
 (h)

	)

260 #i‡
deföed
 
__GNUC__


261 #i‡! (2 < 
__GNUC__
 + (8 <
__GNUC_MINOR__
))

262 
	#__exãnsi⁄__


	)

270 
	#ob°ack_obje˘_size
(
OBSTACK
) \

271 
__exãnsi⁄__
 \

272 ({ 
ob°ack
 c⁄° *
__o
 = (
OBSTACK
); \

273 (Ë(
__o
->
√xt_‰ì
 - __o->
obje˘_ba£
); })

	)

275 
	#ob°ack_room
(
OBSTACK
) \

276 
__exãnsi⁄__
 \

277 ({ 
ob°ack
 c⁄° *
__o
 = (
OBSTACK
); \

278 (Ë(
__o
->
chunk_limô
 - __o->
√xt_‰ì
); })

	)

280 
	#ob°ack_make_room
(
OBSTACK
, 
Àngth
) \

281 
__exãnsi⁄__
 \

282 ({ 
ob°ack
 *
__o
 = (
OBSTACK
); \

283 
__Àn
 = (
Àngth
); \

284 i‡(
__o
->
chunk_limô
 - __o->
√xt_‰ì
 < 
__Àn
) \

285 
	`_ob°ack_√wchunk
 (
__o
, 
__Àn
); \

286 (Ë0; })

	)

288 
	#ob°ack_em±y_p
(
OBSTACK
) \

289 
__exãnsi⁄__
 \

290 ({ 
ob°ack
 c⁄° *
__o
 = (
OBSTACK
); \

291 (
__o
->
chunk
->
¥ev
 == 0 \

292 && 
__o
->
√xt_‰ì
 =
	`__PTR_ALIGN
 ((*Ë__o->
chunk
, \

293 
__o
->
chunk
->
c⁄ã¡s
, \

294 
__o
->
Æignmít_mask
)); })

	)

296 
	#ob°ack_grow
(
OBSTACK
, 
whîe
, 
Àngth
) \

297 
__exãnsi⁄__
 \

298 ({ 
ob°ack
 *
__o
 = (
OBSTACK
); \

299 
__Àn
 = (
Àngth
); \

300 i‡(
__o
->
√xt_‰ì
 + 
__Àn
 > __o->
chunk_limô
) \

301 
	`_ob°ack_√wchunk
 (
__o
, 
__Àn
); \

302 
	`mem˝y
 (
__o
->
√xt_‰ì
, 
whîe
, 
__Àn
); \

303 
__o
->
√xt_‰ì
 +
__Àn
; \

304 (Ë0; })

	)

306 
	#ob°ack_grow0
(
OBSTACK
, 
whîe
, 
Àngth
) \

307 
__exãnsi⁄__
 \

308 ({ 
ob°ack
 *
__o
 = (
OBSTACK
); \

309 
__Àn
 = (
Àngth
); \

310 i‡(
__o
->
√xt_‰ì
 + 
__Àn
 + 1 > __o->
chunk_limô
) \

311 
	`_ob°ack_√wchunk
 (
__o
, 
__Àn
 + 1); \

312 
	`mem˝y
 (
__o
->
√xt_‰ì
, 
whîe
, 
__Àn
); \

313 
__o
->
√xt_‰ì
 +
__Àn
; \

314 *(
__o
->
√xt_‰ì
)++ = 0; \

315 (Ë0; })

	)

317 
	#ob°ack_1grow
(
OBSTACK
, 
d©um
) \

318 
__exãnsi⁄__
 \

319 ({ 
ob°ack
 *
__o
 = (
OBSTACK
); \

320 i‡(
__o
->
√xt_‰ì
 + 1 > __o->
chunk_limô
) \

321 
	`_ob°ack_√wchunk
 (
__o
, 1); \

322 
	`ob°ack_1grow_Á°
 (
__o
, 
d©um
); \

323 (Ë0; })

	)

329 
	#ob°ack_±r_grow
(
OBSTACK
, 
d©um
) \

330 
__exãnsi⁄__
 \

331 ({ 
ob°ack
 *
__o
 = (
OBSTACK
); \

332 i‡(
__o
->
√xt_‰ì
 +  (*Ë> __o->
chunk_limô
) \

333 
	`_ob°ack_√wchunk
 (
__o
,  (*)); \

334 
	`ob°ack_±r_grow_Á°
 (
__o
, 
d©um
); }) \

335 

	)

336 
	#ob°ack_öt_grow
(
OBSTACK
, 
d©um
) \

337 
__exãnsi⁄__
 \

338 ({ 
ob°ack
 *
__o
 = (
OBSTACK
); \

339 i‡(
__o
->
√xt_‰ì
 +  (Ë> __o->
chunk_limô
) \

340 
	`_ob°ack_√wchunk
 (
__o
,  ()); \

341 
	`ob°ack_öt_grow_Á°
 (
__o
, 
d©um
); })

	)

343 
	#ob°ack_±r_grow_Á°
(
OBSTACK
, 
≠å
) \

344 
__exãnsi⁄__
 \

345 ({ 
ob°ack
 *
__o1
 = (
OBSTACK
); \

346 *
__p1
 = 
__o1
->
√xt_‰ì
; \

347 *(c⁄° **Ë
__p1
 = (
≠å
); \

348 
__o1
->
√xt_‰ì
 +=  (const *); \

349 (Ë0; })

	)

351 
	#ob°ack_öt_grow_Á°
(
OBSTACK
, 
aöt
) \

352 
__exãnsi⁄__
 \

353 ({ 
ob°ack
 *
__o1
 = (
OBSTACK
); \

354 *
__p1
 = 
__o1
->
√xt_‰ì
; \

355 *(*Ë
__p1
 = (
aöt
); \

356 
__o1
->
√xt_‰ì
 +=  (); \

357 (Ë0; })

	)

359 
	#ob°ack_bœnk
(
OBSTACK
, 
Àngth
) \

360 
__exãnsi⁄__
 \

361 ({ 
ob°ack
 *
__o
 = (
OBSTACK
); \

362 
__Àn
 = (
Àngth
); \

363 i‡(
__o
->
chunk_limô
 - __o->
√xt_‰ì
 < 
__Àn
) \

364 
	`_ob°ack_√wchunk
 (
__o
, 
__Àn
); \

365 
	`ob°ack_bœnk_Á°
 (
__o
, 
__Àn
); \

366 (Ë0; })

	)

368 
	#ob°ack_Æloc
(
OBSTACK
, 
Àngth
) \

369 
__exãnsi⁄__
 \

370 ({ 
ob°ack
 *
__h
 = (
OBSTACK
); \

371 
	`ob°ack_bœnk
 (
__h
, (
Àngth
)); \

372 
	`ob°ack_föish
 (
__h
); })

	)

374 
	#ob°ack_c›y
(
OBSTACK
, 
whîe
, 
Àngth
) \

375 
__exãnsi⁄__
 \

376 ({ 
ob°ack
 *
__h
 = (
OBSTACK
); \

377 
	`ob°ack_grow
 (
__h
, (
whîe
), (
Àngth
)); \

378 
	`ob°ack_föish
 (
__h
); })

	)

380 
	#ob°ack_c›y0
(
OBSTACK
, 
whîe
, 
Àngth
) \

381 
__exãnsi⁄__
 \

382 ({ 
ob°ack
 *
__h
 = (
OBSTACK
); \

383 
	`ob°ack_grow0
 (
__h
, (
whîe
), (
Àngth
)); \

384 
	`ob°ack_föish
 (
__h
); })

	)

388 
	#ob°ack_föish
(
OBSTACK
) \

389 
__exãnsi⁄__
 \

390 ({ 
ob°ack
 *
__o1
 = (
OBSTACK
); \

391 *
__vÆue
 = (*Ë
__o1
->
obje˘_ba£
; \

392 i‡(
__o1
->
√xt_‰ì
 =
__vÆue
) \

393 
__o1
->
maybe_em±y_obje˘
 = 1; \

394 
__o1
->
√xt_‰ì
 \

395 
	`__PTR_ALIGN
 (
__o1
->
obje˘_ba£
, __o1->
√xt_‰ì
, \

396 
__o1
->
Æignmít_mask
); \

397 i‡(
__o1
->
√xt_‰ì
 - (*Ë__o1->
chunk
 \

398 > 
__o1
->
chunk_limô
 - (*Ë__o1->
chunk
) \

399 
__o1
->
√xt_‰ì
 = __o1->
chunk_limô
; \

400 
__o1
->
obje˘_ba£
 = __o1->
√xt_‰ì
; \

401 
__vÆue
; })

	)

403 
	#ob°ack_‰ì
(
OBSTACK
, 
OBJ
) \

404 
__exãnsi⁄__
 \

405 ({ 
ob°ack
 *
__o
 = (
OBSTACK
); \

406 *
__obj
 = (
OBJ
); \

407 i‡(
__obj
 > (*Ë
__o
->
chunk
 && __obj < (*Ë__o->
chunk_limô
) \

408 
__o
->
√xt_‰ì
 = __o->
obje˘_ba£
 = (*Ë
__obj
; \

409 (
__ob°ack_‰ì
Ë(
__o
, 
__obj
); })

	)

413 
	#ob°ack_obje˘_size
(
h
) \

414 (Ë((
h
)->
√xt_‰ì
 - (h)->
obje˘_ba£
)

	)

416 
	#ob°ack_room
(
h
) \

417 (Ë((
h
)->
chunk_limô
 - (h)->
√xt_‰ì
)

	)

419 
	#ob°ack_em±y_p
(
h
) \

420 ((
h
)->
chunk
->
¥ev
 == 0 \

421 && (
h
)->
√xt_‰ì
 =
	`__PTR_ALIGN
 ((*Ë(h)->
chunk
, \

422 (
h
)->
chunk
->
c⁄ã¡s
, \

423 (
h
)->
Æignmít_mask
))

	)

431 
	#ob°ack_make_room
(
h
, 
Àngth
) \

432 ((
h
)->
ãmp
.
ãmpöt
 = (
Àngth
), \

433 (((
h
)->
√xt_‰ì
 + (h)->
ãmp
.
ãmpöt
 > (h)->
chunk_limô
) \

434 ? (
	`_ob°ack_√wchunk
 ((
h
), (h)->
ãmp
.
ãmpöt
), 0Ë: 0))

	)

436 
	#ob°ack_grow
(
h
, 
whîe
, 
Àngth
) \

437 ((
h
)->
ãmp
.
ãmpöt
 = (
Àngth
), \

438 (((
h
)->
√xt_‰ì
 + (h)->
ãmp
.
ãmpöt
 > (h)->
chunk_limô
) \

439 ? (
	`_ob°ack_√wchunk
 ((
h
), (h)->
ãmp
.
ãmpöt
), 0) : 0), \

440 
	`mem˝y
 ((
h
)->
√xt_‰ì
, 
whîe
, (h)->
ãmp
.
ãmpöt
), \

441 (
h
)->
√xt_‰ì
 +(h)->
ãmp
.
ãmpöt
)

	)

443 
	#ob°ack_grow0
(
h
, 
whîe
, 
Àngth
) \

444 ((
h
)->
ãmp
.
ãmpöt
 = (
Àngth
), \

445 (((
h
)->
√xt_‰ì
 + (h)->
ãmp
.
ãmpöt
 + 1 > (h)->
chunk_limô
) \

446 ? (
	`_ob°ack_√wchunk
 ((
h
), (h)->
ãmp
.
ãmpöt
 + 1), 0) : 0), \

447 
	`mem˝y
 ((
h
)->
√xt_‰ì
, 
whîe
, (h)->
ãmp
.
ãmpöt
), \

448 (
h
)->
√xt_‰ì
 +(h)->
ãmp
.
ãmpöt
, \

449 *((
h
)->
√xt_‰ì
)++ = 0)

	)

451 
	#ob°ack_1grow
(
h
, 
d©um
) \

452 ((((
h
)->
√xt_‰ì
 + 1 > (h)->
chunk_limô
) \

453 ? (
	`_ob°ack_√wchunk
 ((
h
), 1), 0) : 0), \

454 
	`ob°ack_1grow_Á°
 (
h
, 
d©um
))

	)

456 
	#ob°ack_±r_grow
(
h
, 
d©um
) \

457 ((((
h
)->
√xt_‰ì
 +  (*Ë> (h)->
chunk_limô
) \

458 ? (
	`_ob°ack_√wchunk
 ((
h
),  (*)), 0) : 0), \

459 
	`ob°ack_±r_grow_Á°
 (
h
, 
d©um
))

	)

461 
	#ob°ack_öt_grow
(
h
, 
d©um
) \

462 ((((
h
)->
√xt_‰ì
 +  (Ë> (h)->
chunk_limô
) \

463 ? (
	`_ob°ack_√wchunk
 ((
h
),  ()), 0) : 0), \

464 
	`ob°ack_öt_grow_Á°
 (
h
, 
d©um
))

	)

466 
	#ob°ack_±r_grow_Á°
(
h
, 
≠å
) \

467 (((c⁄° **Ë((
h
)->
√xt_‰ì
 + (*)))[-1] = (
≠å
))

	)

469 
	#ob°ack_öt_grow_Á°
(
h
, 
aöt
) \

470 (((*Ë((
h
)->
√xt_‰ì
 + ()))[-1] = (
aöt
))

	)

472 
	#ob°ack_bœnk
(
h
, 
Àngth
) \

473 ((
h
)->
ãmp
.
ãmpöt
 = (
Àngth
), \

474 (((
h
)->
chunk_limô
 - (h)->
√xt_‰ì
 < (h)->
ãmp
.
ãmpöt
) \

475 ? (
	`_ob°ack_√wchunk
 ((
h
), (h)->
ãmp
.
ãmpöt
), 0) : 0), \

476 
	`ob°ack_bœnk_Á°
 (
h
, (h)->
ãmp
.
ãmpöt
))

	)

478 
	#ob°ack_Æloc
(
h
, 
Àngth
) \

479 (
	`ob°ack_bœnk
 ((
h
), (
Àngth
)), 
	`ob°ack_föish
 ((h)))

	)

481 
	#ob°ack_c›y
(
h
, 
whîe
, 
Àngth
) \

482 (
	`ob°ack_grow
 ((
h
), (
whîe
), (
Àngth
)), 
	`ob°ack_föish
 ((h)))

	)

484 
	#ob°ack_c›y0
(
h
, 
whîe
, 
Àngth
) \

485 (
	`ob°ack_grow0
 ((
h
), (
whîe
), (
Àngth
)), 
	`ob°ack_föish
 ((h)))

	)

487 
	#ob°ack_föish
(
h
) \

488 (((
h
)->
√xt_‰ì
 =(h)->
obje˘_ba£
 \

489 ? (((
h
)->
maybe_em±y_obje˘
 = 1), 0) \

491 (
h
)->
ãmp
.
ãmµå
 = (h)->
obje˘_ba£
, \

492 (
h
)->
√xt_‰ì
 \

493 
	`__PTR_ALIGN
 ((
h
)->
obje˘_ba£
, (h)->
√xt_‰ì
, \

494 (
h
)->
Æignmít_mask
), \

495 (((
h
)->
√xt_‰ì
 - (*Ë(h)->
chunk
 \

496 > (
h
)->
chunk_limô
 - (*Ë(h)->
chunk
) \

497 ? ((
h
)->
√xt_‰ì
 = (h)->
chunk_limô
) : 0), \

498 (
h
)->
obje˘_ba£
 = (h)->
√xt_‰ì
, \

499 (
h
)->
ãmp
.
ãmµå
)

	)

501 
	#ob°ack_‰ì
(
h
, 
obj
) \

502 ((
h
)->
ãmp
.
ãmpöt
 = (*Ë(
obj
Ë- (*Ë(h)->
chunk
, \

503 ((((
h
)->
ãmp
.
ãmpöt
 > 0 \

504 && (
h
)->
ãmp
.
ãmpöt
 < (h)->
chunk_limô
 - (*Ë(h)->
chunk
)) \

505 ? (Ë((
h
)->
√xt_‰ì
 = (h)->
obje˘_ba£
 \

506 (
h
)->
ãmp
.
ãmpöt
 + (*Ë(h)->
chunk
) \

507 : (
__ob°ack_‰ì
Ë(
h
, (h)->
ãmp
.
ãmpöt
 + (*Ë(h)->
chunk
)))

	)

511 #ifde‡
__˝lu•lus


	@set-freeres.c

18 
	~<©omic.h
>

19 
	~<°dlib.h
>

20 
	~<£t-hooks.h
>

21 
	~<libc-öã∫Æ.h
>

23 
	~"../libio/libioP.h
"

25 
DEFINE_HOOK
 (
__libc_sub‰ìªs
, ());

27 
symbﬁ_£t_deföe
 (
__libc_‰ìªs_±rs
);

29 
__libc_‰ìªs_‚_£˘i⁄


30 
	$__libc_‰ìªs
 ()

34 
Æªady_ˇŒed
;

36 i‡(!
	`©omic_com∑ª_™d_exch™ge_boﬁ_acq
 (&
Æªady_ˇŒed
, 1, 0))

38 *c⁄° *
p
;

40 
	`_IO_˛ónup
 ();

42 
	`RUN_HOOK
 (
__libc_sub‰ìªs
, ());

44 
p
 = 
	`symbﬁ_£t_fú°_ñemít
 (
__libc_‰ìªs_±rs
);

45 !
	`symbﬁ_£t_íd_p
 (
__libc_‰ìªs_±rs
, 
p
); ++p)

46 
	`‰ì
 (*
p
);

48 
	}
}

49 
libc_hiddí_def
 (
__libc_‰ìªs
)

	@thread-freeres.c

19 
	~<°dlib.h
>

20 
	~<libc-öã∫Æ.h
>

21 
	~<£t-hooks.h
>

23 #ifde‡
_LIBC_REENTRANT


24 
DEFINE_HOOK
 (
__libc_thªad_sub‰ìªs
, ());

26 
__©åibuã__
 ((
£˘i⁄
 ("__libc_thread_freeres_fn")))

27 
	$__libc_thªad_‰ìªs
 ()

29 
	`RUN_HOOK
 (
__libc_thªad_sub‰ìªs
, ());

30 
	}
}

	@tst-calloc.c

19 
	~<î∫o.h
>

20 
	~<îr‹.h
>

21 
	~<limôs.h
>

22 
	~<mÆloc.h
>

23 
	~<°dlib.h
>

24 
	~<°dio.h
>

28 
	#N
 50000

	)

32 
	$fixed_ã°
 (
size
)

34 *
±rs
[
N
];

35 
i
;

37 
i
 = 0; i < 
N
; ++i)

39 
j
;

41 
±rs
[
i
] = (*Ë
	`ˇŒoc
 (1, 
size
);

43 i‡(
±rs
[
i
] =
NULL
)

46 
j
 = 0; j < 
size
; ++j)

48 i‡(
±rs
[
i
][
j
] != '\0')

49 
	`îr‹
 (
EXIT_FAILURE
, 0,

51 
size
, 
i
, 
j
);

52 
±rs
[
i
][
j
] = '\xff';

56 
i
-- > 0)

57 
	`‰ì
 (
±rs
[
i
]);

58 
	}
}

62 
	$øndom_ã°
 ()

64 *
±rs
[
N
];

65 
i
;

67 
i
 = 0; i < 
N
; ++i)

69 
j
;

70 
n
 = 1 + 
	`øndom
 () % 10;

71 
ñem
 = 1 + 
	`øndom
 () % 100;

72 
size
 = 
n
 * 
ñem
;

74 
±rs
[
i
] = (*Ë
	`ˇŒoc
 (
n
, 
ñem
);

76 i‡(
±rs
[
i
] =
NULL
)

79 
j
 = 0; j < 
size
; ++j)

81 i‡(
±rs
[
i
][
j
] != '\0')

82 
	`îr‹
 (
EXIT_FAILURE
, 0,

84 
size
, 
i
, 
j
);

85 
±rs
[
i
][
j
] = '\xff';

89 
i
-- > 0)

90 
	`‰ì
 (
±rs
[
i
]);

91 
	}
}

95 
	$nuŒ_ã°
 ()

99 
	`ˇŒoc
 (0, 0);

100 
	`ˇŒoc
 (0, 
UINT_MAX
);

101 
	`ˇŒoc
 (
UINT_MAX
, 0);

102 
	`ˇŒoc
 (0, ~((
size_t
) 0));

103 
	`ˇŒoc
 (~((
size_t
) 0), 0);

104 
	}
}

108 
	$maö
 ()

113 
	`fixed_ã°
 (15);

114 
	`fixed_ã°
 (5);

115 
	`fixed_ã°
 (17);

116 
	`fixed_ã°
 (6);

117 
	`fixed_ã°
 (31);

118 
	`fixed_ã°
 (96);

120 
	`øndom_ã°
 ();

122 
	`nuŒ_ã°
 ();

125 
	}
}

	@tst-malloc-usable.c

21 
	~<mÆloc.h
>

22 
	~<°rög.h
>

23 
	~<°dio.h
>

26 
	$do_ã°
 ()

28 
size_t
 
ußbÀ_size
;

29 *
p
 = 
	`mÆloc
 (7);

30 i‡(!
p
)

32 
	`¥ötf
 ("memoryállocation failed\n");

36 
ußbÀ_size
 = 
	`mÆloc_ußbÀ_size
 (
p
);

37 i‡(
ußbÀ_size
 != 7)

39 
	`¥ötf
 ("mÆloc_ußbÀ_size:Éx≥˘ed 7 buàgŸ %zu\n", 
ußbÀ_size
);

43 
	`mem£t
 (
p
, 0, 
ußbÀ_size
);

44 
	`‰ì
 (
p
);

46 
	}
}

48 
	#TEST_FUNCTION
 
	`do_ã°
 ()

	)

49 
	~"../ã°-skñë⁄.c
"

	@tst-malloc.c

19 
	~<î∫o.h
>

20 
	~<mÆloc.h
>

21 
	~<°dio.h
>

23 
	gîr‹s
 = 0;

26 
	$mîr‹
 (c⁄° *
msg
)

28 ++
îr‹s
;

29 
	`¥ötf
 ("Eº‹: %s\n", 
msg
);

30 
	}
}

33 
	$maö
 ()

35 *
p
, *
q
;

36 
ßve
;

38 
î∫o
 = 0;

40 
p
 = 
	`mÆloc
 (-1);

41 
ßve
 = 
î∫o
;

43 i‡(
p
 !
NULL
)

44 
	`mîr‹
 ("malloc (-1) succeeded.");

46 i‡(
p
 =
NULL
 && 
ßve
 !
ENOMEM
)

47 
	`mîr‹
 ("errno isÇot set correctly");

49 
p
 = 
	`mÆloc
 (10);

50 i‡(
p
 =
NULL
)

51 
	`mîr‹
 ("malloc (10) failed.");

54 
p
 = 
	`ªÆloc
 (p, 0);

55 i‡(
p
 !
NULL
)

56 
	`mîr‹
 ("realloc (p, 0) failed.");

58 
p
 = 
	`mÆloc
 (0);

59 i‡(
p
 =
NULL
)

60 
	`mîr‹
 ("malloc (0) failed.");

62 
p
 = 
	`ªÆloc
 (p, 0);

63 i‡(
p
 !
NULL
)

64 
	`mîr‹
 ("realloc (p, 0) failed.");

66 
p
 = 
	`mÆloc
 (513 * 1024);

67 i‡(
p
 =
NULL
)

68 
	`mîr‹
 ("malloc (513K) failed.");

70 
q
 = 
	`mÆloc
 (-512 * 1024);

71 i‡(
q
 !
NULL
)

72 
	`mîr‹
 ("malloc (-512K) succeeded.");

74 
	`‰ì
 (
p
);

76  
îr‹s
 != 0;

77 
	}
}

	@tst-mallocfork.c

3 
	~<as£π.h
>

4 
	~<î∫o.h
>

5 
	~<°dio.h
>

6 
	~<°dlib.h
>

7 
	~<uni°d.h
>

8 
	~<sys/ty≥s.h
>

9 
	~<sys/waô.h
>

12 
	$sig_h™dÀr
 (
signum
)

14 
pid_t
 
chûd
 = 
	`f‹k
 ();

15 i‡(
chûd
 == 0)

16 
	`exô
 (0);

17 
	`TEMP_FAILURE_RETRY
 (
	`waôpid
 (
chûd
, 
NULL
, 0));

18 
	}
}

21 
	$do_ã°
 ()

23 
pid_t
 
∑ª¡
 = 
	`gëpid
 ();

25 
siga˘i⁄
 
a˘i⁄
 = { .
ß_h™dÀr
 = 
sig_h™dÀr
 };

26 
	`sigem±y£t
 (&
a˘i⁄
.
ß_mask
);

28 
	`mÆloc
 ( ());

30 i‡(
	`siga˘i⁄
 (
SIGALRM
, &
a˘i⁄
, 
NULL
) != 0)

32 
	`puts
 ("sigaction failed");

37 
pid_t
 
chûd
 = 
	`f‹k
 ();

38 i‡(
chûd
 == 0)

40 i‡(
	`kûl
 (
∑ª¡
, 
SIGALRM
) == -1)

41 
	`≥º‹
 ("kill");

42 
	`exô
 (0);

45 
	`TEMP_FAILURE_RETRY
 (
	`waôpid
 (
chûd
, 
NULL
, 0));

48 
	}
}

50 
	#TEST_FUNCTION
 
	`do_ã°
 ()

	)

51 
	~"../ã°-skñë⁄.c
"

	@tst-mallocstate.c

19 
	~<î∫o.h
>

20 
	~<°dio.h
>

21 
	~"mÆloc.h
"

23 
	gîr‹s
 = 0;

26 
	$mîr‹
 (c⁄° *
msg
)

28 ++
îr‹s
;

29 
	`¥ötf
 ("Eº‹: %s\n", 
msg
);

30 
	}
}

33 
	$maö
 ()

35 *
p1
, *
p2
;

36 *
ßve_°©e
;

37 
i
;

39 
î∫o
 = 0;

41 
p1
 = 
	`mÆloc
 (10);

42 i‡(
p1
 =
NULL
)

43 
	`mîr‹
 ("malloc (10) failed.");

45 
p2
 = 
	`mÆloc
 (20);

46 i‡(
p2
 =
NULL
)

47 
	`mîr‹
 ("malloc (20) failed.");

49 
	`‰ì
 (
	`mÆloc
 (10));

51 
i
 = 0; i < 100; ++i)

53 
ßve_°©e
 = 
	`mÆloc_gë_°©e
 ();

54 i‡(
ßve_°©e
 =
NULL
)

56 
	`mîr‹
 ("malloc_get_state () failed.");

60 
	`mÆloc_£t_°©e
 (
ßve_°©e
);

61 
p1
 = 
	`ªÆloc
 (p1, 
i
 * 4 + 4);

62 i‡(
p1
 =
NULL
)

63 
	`mîr‹
 ("realloc (i*4) failed.");

64 
	`‰ì
 (
ßve_°©e
);

67 
p1
 = 
	`ªÆloc
 (p1, 40);

68 
	`‰ì
 (
p2
);

69 
p2
 = 
	`mÆloc
 (10);

70 i‡(
p2
 =
NULL
)

71 
	`mîr‹
 ("malloc (10) failed.");

72 
	`‰ì
 (
p1
);

74  
îr‹s
 != 0;

75 
	}
}

	@tst-mallopt.c

18 
	~<mÆloc.h
>

19 
	~<°dio.h
>

20 
	~<°rög.h
>

22 
	gîr‹s
 = 0;

25 
	$mîr‹
 (c⁄° *
msg
)

27 ++
îr‹s
;

28 
	`¥ötf
 ("Eº‹: %s\n", 
msg
);

29 
	}
}

32 
	$do_ã°
 ()

34 
ªt
;

36 
ªt
 = 
	`mÆl›t
(
M_CHECK_ACTION
, 1);

38 i‡(
ªt
 != 1)

39 
	`mîr‹
 ("mallopt (M_CHECK_ACTION, 1) failed.");

41 
ªt
 = 
	`mÆl›t
(
M_MMAP_MAX
, 64*1024);

43 i‡(
ªt
 != 1)

44 
	`mîr‹
 ("mallopt (M_MMAP_MAX, 64*1024) failed.");

46 
ªt
 = 
	`mÆl›t
(
M_MMAP_THRESHOLD
, 64*1024);

48 i‡(
ªt
 != 1)

49 
	`mîr‹
 ("mallopt (M_MMAP_THRESHOLD, 64*1024) failed.");

51 
ªt
 = 
	`mÆl›t
(
M_MXFAST
, 0);

53 i‡(
ªt
 != 1)

54 
	`mîr‹
 ("mallopt (M_MXFAST, 0) failed.");

56 
ªt
 = 
	`mÆl›t
(
M_PERTURB
, 0xa5);

58 i‡(
ªt
 != 1)

59 
	`mîr‹
 ("mallopt (M_PERTURB, 0xa5) failed.");

61 
ªt
 = 
	`mÆl›t
(
M_TOP_PAD
, 64*1024);

63 i‡(
ªt
 != 1)

64 
	`mîr‹
 ("mallopt (M_TOP_PAD, 64*1024) failed.");

66 
ªt
 = 
	`mÆl›t
(
M_TRIM_THRESHOLD
, -1);

68 i‡(
ªt
 != 1)

69 
	`mîr‹
 ("mallopt (M_TRIM_THRESHOLD, -1) failed.");

71  
îr‹s
 != 0;

72 
	}
}

74 
	#TEST_FUNCTION
 
	`do_ã°
 ()

	)

75 
	~"../ã°-skñë⁄.c
"

	@tst-mcheck.c

19 
	~<î∫o.h
>

20 
	~<°dio.h
>

21 
	~<°dlib.h
>

23 
	gîr‹s
 = 0;

26 
	$mîr‹
 (c⁄° *
msg
)

28 ++
îr‹s
;

29 
	`¥ötf
 ("Eº‹: %s\n", 
msg
);

30 
	}
}

33 
	$maö
 ()

35 *
p
, *
q
;

37 
î∫o
 = 0;

39 
p
 = 
	`mÆloc
 (-1);

41 i‡(
p
 !
NULL
)

42 
	`mîr‹
 ("malloc (-1) succeeded.");

43 i‡(
î∫o
 !
ENOMEM
)

44 
	`mîr‹
 ("errno isÇot set correctly.");

46 
p
 = 
	`mÆloc
 (10);

47 i‡(
p
 =
NULL
)

48 
	`mîr‹
 ("malloc (10) failed.");

50 
p
 = 
	`ªÆloc
 (p, 0);

51 i‡(
p
 !
NULL
)

52 
	`mîr‹
 ("realloc (p, 0) failed.");

54 
p
 = 
	`mÆloc
 (0);

55 i‡(
p
 =
NULL
)

56 
	`mîr‹
 ("malloc (0) failed.");

58 
p
 = 
	`ªÆloc
 (p, 0);

59 i‡(
p
 !
NULL
)

60 
	`mîr‹
 ("realloc (p, 0) failed.");

62 
q
 = 
	`mÆloc
 (256);

63 i‡(
q
 =
NULL
)

64 
	`mîr‹
 ("malloc (256) failed.");

66 
p
 = 
	`mÆloc
 (512);

67 i‡(
p
 =
NULL
)

68 
	`mîr‹
 ("malloc (512) failed.");

70 i‡(
	`ªÆloc
 (
p
, -256Ë!
NULL
)

71 
	`mîr‹
 ("realloc (p, -256) succeeded.");

72 i‡(
î∫o
 !
ENOMEM
)

73 
	`mîr‹
 ("errno isÇot set correctly.");

75 
	`‰ì
 (
p
);

77 
p
 = 
	`mÆloc
 (512);

78 i‡(
p
 =
NULL
)

79 
	`mîr‹
 ("malloc (512) failed.");

81 i‡(
	`ªÆloc
 (
p
, -1Ë!
NULL
)

82 
	`mîr‹
 ("realloc (p, -1) succeeded.");

83 i‡(
î∫o
 !
ENOMEM
)

84 
	`mîr‹
 ("errno isÇot set correctly.");

86 
	`‰ì
 (
p
);

87 
	`‰ì
 (
q
);

89  
îr‹s
 != 0;

90 
	}
}

	@tst-memalign.c

19 
	~<î∫o.h
>

20 
	~<mÆloc.h
>

21 
	~<°dio.h
>

22 
	~<°rög.h
>

23 
	~<uni°d.h
>

25 
	gîr‹s
 = 0;

28 
	$mîr‹
 (c⁄° *
msg
)

30 ++
îr‹s
;

31 
	`¥ötf
 ("Eº‹: %s\n", 
msg
);

32 
	}
}

35 
	$do_ã°
 ()

37 *
p
;

38 
∑gesize
 = 
	`gë∑gesize
 ();

39 
±rvÆ
;

40 
ßve
;

42 
î∫o
 = 0;

46 
p
 = 
	`memÆign
 ( (*), -1);

48 
ßve
 = 
î∫o
;

50 i‡(
p
 !
NULL
)

51 
	`mîr‹
 ("memalign (sizeof (void *), -1) succeeded.");

53 i‡(
p
 =
NULL
 && 
ßve
 !
ENOMEM
)

54 
	`mîr‹
 ("memalign (sizeof (void *), -1)Érrno isÇot set correctly");

56 
	`‰ì
 (
p
);

58 
î∫o
 = 0;

61 
p
 = 
	`memÆign
 (
∑gesize
, -pagesize);

63 
ßve
 = 
î∫o
;

65 i‡(
p
 !
NULL
)

66 
	`mîr‹
 ("memalign (pagesize, -pagesize) succeeded.");

68 i‡(
p
 =
NULL
 && 
ßve
 !
ENOMEM
)

69 
	`mîr‹
 ("memalign (pagesize, -pagesize)Érrno isÇot set correctly");

71 
	`‰ì
 (
p
);

73 
î∫o
 = 0;

76 
p
 = 
	`memÆign
 (-1, 
∑gesize
);

78 
ßve
 = 
î∫o
;

80 i‡(
p
 !
NULL
)

81 
	`mîr‹
 ("memalign (-1,Öagesize) succeeded.");

83 i‡(
p
 =
NULL
 && 
ßve
 !
EINVAL
)

84 
	`mîr‹
 ("memalign (-1,Öagesize)Érrno isÇot set correctly");

86 
	`‰ì
 (
p
);

90 
p
 = 
	`memÆign
 ( (*), 0);

92 i‡(
p
 =
NULL
)

93 
	`mîr‹
 ("memalign (sizeof (void *), 0) failed.");

95 
	`‰ì
 (
p
);

98 
p
 = 
	`memÆign
 (0x100, 10);

100 i‡(
p
 =
NULL
)

101 
	`mîr‹
 ("memalign (0x100, 10) failed.");

103 
±rvÆ
 = (Ë
p
;

105 i‡((
±rvÆ
 & 0xff) != 0)

106 
	`mîr‹
 ("pointer isÇotálignedÅo 0x100");

108 
	`‰ì
 (
p
);

110  
îr‹s
 != 0;

111 
	}
}

113 
	#TEST_FUNCTION
 
	`do_ã°
 ()

	)

114 
	~"../ã°-skñë⁄.c
"

	@tst-mtrace.c

19 
	~<mcheck.h
>

20 
	~<∑ths.h
>

21 
	~<£¨ch.h
>

22 
	~<°dio.h
>

23 
	~<°dlib.h
>

24 
	~<°rög.h
>

27 
¥öt
 (c⁄° *
node
, 
VISIT
 
vÆue
, 
Àvñ
);

30 
FILE
 *
	gÂ
;

34 
	$maö
 ()

36 *
roŸ
 = 
NULL
;

37 
size_t
 
löñí
 = 0;

38 *
löe
 = 
NULL
;

41 
	`måa˚
 ();

45 
Â
 = 
	`f›í
 (
__FILE__
, "r");

46 i‡(
Â
 =
NULL
)

49 
	`ab‹t
 ();

51 !
	`„of
 (
Â
))

53 **
p
;

54 *
c›y
;

55 
ssize_t
 
n
 = 
	`gëlöe
 (&
löe
, &
löñí
, 
Â
);

57 i‡(
n
 < 0)

60 i‡(
n
 == 0)

63 
c›y
 = 
	`°rdup
 (
löe
);

64 i‡(
c›y
 =
NULL
)

65 
	`ab‹t
 ();

67 
p
 = (**Ë
	`t£¨ch
 (
c›y
, &
roŸ
,

68 ((*)(c⁄° *, c⁄° *))
°rcmp
);

69 i‡(*
p
 !
c›y
)

71 
	`‰ì
 (
c›y
);

74 
	`f˛o£
 (
Â
);

76 
Â
 = 
	`f›í
 (
_PATH_DEVNULL
, "w");

77 i‡(
Â
 !
NULL
)

80 
	`twÆk
 (
roŸ
, 
¥öt
);

82 
	`f˛o£
 (
Â
);

86 
	`tde°roy
 (
roŸ
, 
‰ì
);

89 
	`‰ì
 (
löe
);

93 
	}
}

97 
	$¥öt
 (c⁄° *
node
, 
VISIT
 
vÆue
, 
Àvñ
)

99 
˙t
;

100 i‡(
vÆue
 =
po°‹dî
 || vÆuê=
Àaf
)

101 
	`Ârötf
 (
Â
, "%3d: %s", ++
˙t
, *(c⁄° **Ë
node
);

102 
	}
}

	@tst-obstack.c

2 
	~<ob°ack.h
>

3 
	~<°döt.h
>

4 
	~<°dio.h
>

5 
	~<°dlib.h
>

7 
	#ob°ack_chunk_Æloc
 
vîbo£_mÆloc


	)

8 
	#ob°ack_chunk_‰ì
 
vîbo£_‰ì


	)

9 
	#ALIGN_BOUNDARY
 64

	)

10 
	#ALIGN_MASK
 (
ALIGN_BOUNDARY
 - 1)

	)

11 
	#OBJECT_SIZE
 1000

	)

14 
	$vîbo£_mÆloc
 (
size_t
 
size
)

16 *
buf
 = 
	`mÆloc
 (
size
);

17 
	`¥ötf
 ("mÆlo¯(%zuË=> %p\n", 
size
, 
buf
);

18  
buf
;

19 
	}
}

22 
	$vîbo£_‰ì
 (*
buf
)

24 
	`‰ì
 (
buf
);

25 
	`¥ötf
 ("‰ì (%p)\n", 
buf
);

26 
	}
}

29 
	$maö
 ()

31 
ªsu…
 = 0;

32 
Æign
 = 2;

34 
Æign
 <= 64)

36 
ob°ack
 
obs
;

37 
i
;

38 
Æign_mask
 = 
Æign
 - 1;

40 
	`¥ötf
 ("\¿Alignmíàmask: %d\n", 
Æign_mask
);

42 
	`ob°ack_öô
 (&
obs
);

43 
	`ob°ack_Æignmít_mask
 (&
obs
Ë
Æign_mask
;

45 
	`ob°ack_föish
 (&
obs
);

48 
i
 = 15; i > 0; --i)

50 *
obj
 = 
	`ob°ack_Æloc
 (&
obs
, 
OBJECT_SIZE
);

52 
	`¥ötf
 ("ob°ack_Ælo¯(%uË=> %∞\t%s\n", 
OBJECT_SIZE
, 
obj
,

53 ((
uöçå_t
Ë
obj
 & 
Æign_mask
) ? "(notáligned)" : "");

54 
ªsu…
 |((
uöçå_t
Ë
obj
 & 
Æign_mask
) != 0;

58 
	`ob°ack_‰ì
 (&
obs
, 0);

60 
Æign
 <<= 1;

63  
ªsu…
;

64 
	}
}

	@tst-posix_memalign.c

19 
	~<î∫o.h
>

20 
	~<°dlib.h
>

21 
	~<°dio.h
>

22 
	~<°rög.h
>

23 
	~<uni°d.h
>

25 
	gîr‹s
 = 0;

28 
	$mîr‹
 (c⁄° *
msg
)

30 ++
îr‹s
;

31 
	`¥ötf
 ("Eº‹: %s\n", 
msg
);

32 
	}
}

35 
	$do_ã°
 ()

37 *
p
;

38 
ªt
;

39 
∑gesize
 = 
	`gë∑gesize
 ();

40 
±rvÆ
;

42 
p
 = 
NULL
;

46 
ªt
 = 
	`posix_memÆign
 (&
p
,  (*), -1);

48 i‡(
ªt
 !
ENOMEM
)

49 
	`mîr‹
 ("posix_memalign (&p, sizeof (void *), -1) succeeded.");

51 i‡(
ªt
 =
ENOMEM
 && 
p
 !
NULL
)

52 
	`mîr‹
 ("returnedánÉrror butÖointer was modified");

54 
	`‰ì
 (
p
);

56 
p
 = 
NULL
;

59 
ªt
 = 
	`posix_memÆign
 (&
p
, 
∑gesize
, -pagesize);

61 i‡(
ªt
 !
ENOMEM
)

62 
	`mîr‹
 ("posix_memalign (&p,Öagesize, -pagesize) succeeded.");

64 
	`‰ì
 (
p
);

66 
p
 = 
NULL
;

69 
ªt
 = 
	`posix_memÆign
 (&
p
, -1, 
∑gesize
);

71 i‡(
ªt
 !
EINVAL
)

72 
	`mîr‹
 ("posix_memalign (&p, -1,Öagesize) succeeded.");

74 
	`‰ì
 (
p
);

76 
p
 = 
NULL
;

80 
ªt
 = 
	`posix_memÆign
 (&
p
,  (*), 0);

82 i‡(
ªt
 !0 || 
p
 =
NULL
)

83 
	`mîr‹
 ("posix_memalign (&p, sizeof (void *), 0) failed.");

85 
	`‰ì
 (
p
);

87 
ªt
 = 
	`posix_memÆign
 (&
p
, 0x300, 10);

89 i‡(
ªt
 !
EINVAL
)

90 
	`mîr‹
 ("posix_memalign (&p, 0x300, 10) succeeded.");

92 
ªt
 = 
	`posix_memÆign
 (&
p
, 0, 10);

94 i‡(
ªt
 !
EINVAL
)

95 
	`mîr‹
 ("posix_memalign (&p, 0, 10) succeeded.");

97 
p
 = 
NULL
;

99 
ªt
 = 
	`posix_memÆign
 (&
p
, 0x100, 10);

101 i‡(
ªt
 != 0)

102 
	`mîr‹
 ("posix_memalign (&p, 0x100, 10) failed.");

104 i‡(
ªt
 =0 && 
p
 =
NULL
)

105 
	`mîr‹
 ("returned success butÖointer is NULL");

107 
±rvÆ
 = (Ë
p
;

109 i‡(
ªt
 =0 && (
±rvÆ
 & 0xff) != 0)

110 
	`mîr‹
 ("pointer isÇotálignedÅo 0x100");

112 
	`‰ì
 (
p
);

114  
îr‹s
 != 0;

115 
	}
}

117 
	#TEST_FUNCTION
 
	`do_ã°
 ()

	)

118 
	~"../ã°-skñë⁄.c
"

	@tst-pvalloc.c

19 
	~<î∫o.h
>

20 
	~<mÆloc.h
>

21 
	~<°dio.h
>

22 
	~<°rög.h
>

23 
	~<uni°d.h
>

25 
	gîr‹s
 = 0;

28 
	$mîr‹
 (c⁄° *
msg
)

30 ++
îr‹s
;

31 
	`¥ötf
 ("Eº‹: %s\n", 
msg
);

32 
	}
}

35 
	$do_ã°
 ()

37 *
p
;

38 
∑gesize
 = 
	`gë∑gesize
 ();

39 
±rvÆ
;

40 
ßve
;

42 
î∫o
 = 0;

46 
p
 = 
	`pvÆloc
 (-1);

48 
ßve
 = 
î∫o
;

50 i‡(
p
 !
NULL
)

51 
	`mîr‹
 ("pvalloc (-1) succeeded.");

53 i‡(
p
 =
NULL
 && 
ßve
 !
ENOMEM
)

54 
	`mîr‹
 ("pvalloc (-1)Érrno isÇot set correctly");

56 
	`‰ì
 (
p
);

58 
î∫o
 = 0;

61 
p
 = 
	`pvÆloc
 (-
∑gesize
);

63 
ßve
 = 
î∫o
;

65 i‡(
p
 !
NULL
)

66 
	`mîr‹
 ("pvalloc (-pagesize) succeeded.");

68 i‡(
p
 =
NULL
 && 
ßve
 !
ENOMEM
)

69 
	`mîr‹
 ("pvalloc (-pagesize)Érrno isÇot set correctly");

71 
	`‰ì
 (
p
);

75 
p
 = 
	`pvÆloc
 (0);

77 i‡(
p
 =
NULL
)

78 
	`mîr‹
 ("pvalloc (0) failed.");

80 
	`‰ì
 (
p
);

83 
p
 = 
	`pvÆloc
 (32);

85 i‡(
p
 =
NULL
)

86 
	`mîr‹
 ("pvalloc (32) failed.");

88 
±rvÆ
 = (Ë
p
;

90 i‡((
±rvÆ
 & (
∑gesize
 - 1)) != 0)

91 
	`mîr‹
 ("returnedÖointer isÇotÖageáligned.");

93 
	`‰ì
 (
p
);

95  
îr‹s
 != 0;

96 
	}
}

98 
	#TEST_FUNCTION
 
	`do_ã°
 ()

	)

99 
	~"../ã°-skñë⁄.c
"

	@tst-realloc.c

18 
	~<î∫o.h
>

19 
	~<mÆloc.h
>

20 
	~<°dio.h
>

21 
	~<°rög.h
>

23 
	gîr‹s
 = 0;

26 
	$mîr‹
 (c⁄° *
msg
)

28 ++
îr‹s
;

29 
	`¥ötf
 ("Eº‹: %s\n", 
msg
);

30 
	}
}

33 
	$do_ã°
 ()

35 *
p
;

36 *
c
;

37 
ßve
, 
i
, 
ok
;

39 
î∫o
 = 0;

42 
p
 = 
	`ªÆloc
 (
NULL
, -1);

43 
ßve
 = 
î∫o
;

45 i‡(
p
 !
NULL
)

46 
	`mîr‹
 ("realloc (NULL, -1) succeeded.");

49 i‡(
p
 =
NULL
 && 
ßve
 !
ENOMEM
)

50 
	`mîr‹
 ("errno isÇot set correctly");

52 
î∫o
 = 0;

55 
p
 = 
	`ªÆloc
 (
NULL
, 10);

56 
ßve
 = 
î∫o
;

58 i‡(
p
 =
NULL
)

59 
	`mîr‹
 ("realloc (NULL, 10) failed.");

62 i‡(
p
 !
NULL
 && 
ßve
 != 0)

63 
	`mîr‹
 ("errno is set but shouldÇot be");

65 
	`‰ì
 (
p
);

67 
p
 = 
	`ˇŒoc
 (20, 1);

68 i‡(
p
 =
NULL
)

69 
	`mîr‹
 ("calloc (20, 1) failed.");

72 
p
 = 
	`ªÆloc
 (p, 200);

73 i‡(
p
 =
NULL
)

74 
	`mîr‹
 ("realloc (p, 200) failed.");

76 
c
 = 
p
;

77 
ok
 = 1;

79 
i
 = 0; i < 20; i++)

81 i‡(
c
[
i
] != 0)

82 
ok
 = 0;

85 i‡(
ok
 == 0)

86 
	`mîr‹
 ("first 20 bytes wereÇot cleared");

88 
	`‰ì
 (
p
);

90 
p
 = 
	`ªÆloc
 (
NULL
, 100);

91 i‡(
p
 =
NULL
)

92 
	`mîr‹
 ("realloc (NULL, 100) failed.");

94 
	`mem£t
 (
p
, 0xff, 100);

97 
p
 = 
	`ªÆloc
 (p, 16);

98 i‡(
p
 =
NULL
)

99 
	`mîr‹
 ("realloc (p, 16) failed.");

101 
c
 = 
p
;

102 
ok
 = 1;

104 
i
 = 0; i < 16; i++)

106 i‡(
c
[
i
] != 0xff)

107 
ok
 = 0;

110 i‡(
ok
 == 0)

111 
	`mîr‹
 ("first 16 bytes wereÇot correct");

114 
c
 = 
	`ªÆloc
 (
p
, -1);

115 i‡(
c
 !
NULL
)

116 
	`mîr‹
 ("realloc (p, -1) succeeded.");

118 
c
 = 
p
;

119 
ok
 = 1;

121 
i
 = 0; i < 16; i++)

123 i‡(
c
[
i
] != 0xff)

124 
ok
 = 0;

127 i‡(
ok
 == 0)

128 
	`mîr‹
 ("first 16 bytes wereÇot correctáfter failedÑealloc");

131 
p
 = 
	`ªÆloc
 (p, 0);

132 i‡(
p
 !
NULL
)

133 
	`mîr‹
 ("realloc (p, 0)ÑeturnedÇon-NULL.");

136 
p
 = 
	`ªÆloc
 (
NULL
, 0);

137 i‡(
p
 =
NULL
)

138 
	`mîr‹
 ("realloc (NULL, 0)Ñeturned NULL.");

140 
	`‰ì
 (
p
);

142  
îr‹s
 != 0;

143 
	}
}

145 
	#TEST_FUNCTION
 
	`do_ã°
 ()

	)

146 
	~"../ã°-skñë⁄.c
"

	@tst-trim1.c

1 
	~<mÆloc.h
>

2 
	~<°dio.h
>

3 
	~<°dlib.h
>

4 
	~<°rög.h
>

6 
	#N
 10000

	)

8 *
	g¨r
[
N
];

11 
	$do_ã°
 ()

13 
i
 = 0; i < 
N
; ++i)

15 
size_t
 
size
 = 
	`øndom
 () % 16384;

17 i‡((
¨r
[
i
] = 
	`mÆloc
 (
size
)Ë=
NULL
)

19 
nomem
:

20 
	`puts
 ("notÉnough memory");

24 
	`mem£t
 (
¨r
[
i
], 
size
, size);

27 *
p
 = 
	`mÆloc
 (256);

28 i‡(
p
 =
NULL
)

29 
nomem
;

30 
	`mem£t
 (
p
, 1, 256);

32 
	`puts
 ("==================================================================");

34 
i
 = 0; i < 
N
; ++i)

35 i‡(
i
 % 13 != 0)

36 
	`‰ì
 (
¨r
[
i
]);

38 
	`puts
 ("==================================================================");

40 
	`mÆloc_åim
 (0);

42 
	`puts
 ("==================================================================");

44 
p
 = 
	`mÆloc
 (30000);

45 i‡(
p
 =
NULL
)

46 
nomem
;

48 
	`mem£t
 (
p
, 2, 30000);

50 
	`mÆloc_åim
 (0);

53 
	}
}

55 
	#TEST_FUNCTION
 
	`do_ã°
 ()

	)

56 
	~"../ã°-skñë⁄.c
"

	@tst-valloc.c

19 
	~<î∫o.h
>

20 
	~<°dlib.h
>

21 
	~<°dio.h
>

22 
	~<°rög.h
>

23 
	~<uni°d.h
>

25 
	gîr‹s
 = 0;

28 
	$mîr‹
 (c⁄° *
msg
)

30 ++
îr‹s
;

31 
	`¥ötf
 ("Eº‹: %s\n", 
msg
);

32 
	}
}

35 
	$do_ã°
 ()

37 *
p
;

38 
∑gesize
 = 
	`gë∑gesize
 ();

39 
±rvÆ
;

40 
ßve
;

42 
î∫o
 = 0;

46 
p
 = 
	`vÆloc
 (-1);

48 
ßve
 = 
î∫o
;

50 i‡(
p
 !
NULL
)

51 
	`mîr‹
 ("valloc (-1) succeeded.");

53 i‡(
p
 =
NULL
 && 
ßve
 !
ENOMEM
)

54 
	`mîr‹
 ("valloc (-1)Érrno isÇot set correctly");

56 
	`‰ì
 (
p
);

58 
î∫o
 = 0;

61 
p
 = 
	`vÆloc
 (-
∑gesize
);

63 
ßve
 = 
î∫o
;

65 i‡(
p
 !
NULL
)

66 
	`mîr‹
 ("valloc (-pagesize) succeeded.");

68 i‡(
p
 =
NULL
 && 
ßve
 !
ENOMEM
)

69 
	`mîr‹
 ("valloc (-pagesize)Érrno isÇot set correctly");

71 
	`‰ì
 (
p
);

75 
p
 = 
	`vÆloc
 (0);

77 i‡(
p
 =
NULL
)

78 
	`mîr‹
 ("valloc (0) failed.");

80 
	`‰ì
 (
p
);

83 
p
 = 
	`vÆloc
 (32);

85 i‡(
p
 =
NULL
)

86 
	`mîr‹
 ("valloc (32) failed.");

88 
±rvÆ
 = (Ë
p
;

90 i‡((
±rvÆ
 & (
∑gesize
 - 1)) != 0)

91 
	`mîr‹
 ("returnedÖointer isÇotÖageáligned.");

93 
	`‰ì
 (
p
);

95  
îr‹s
 != 0;

96 
	}
}

98 
	#TEST_FUNCTION
 
	`do_ã°
 ()

	)

99 
	~"../ã°-skñë⁄.c
"

	@../libio/libioP.h

35 
	~<î∫o.h
>

36 #i‚de‡
__£t_î∫o


37 
	#__£t_î∫o
(
VÆ
Ë
î∫o
 = (VÆ)

	)

39 #i‡
deföed
 
__GLIBC__
 && __GLIBC__ >= 2

40 
	~<bôs/libc-lock.h
>

45 
	~<m©h_ldbl_›t.h
>

47 
	~"iﬁibio.h
"

51 #i‚de‡
libc_hiddí_¥Ÿo


52 
	#libc_hiddí_¥Ÿo
(
«me
)

	)

54 #i‚de‡
libc_hiddí_def


55 
	#libc_hiddí_def
(
«me
)

	)

57 #i‚de‡
libc_hiddí_wók


58 
	#libc_hiddí_wók
(
«me
)

	)

61 #ifde‡
__˝lu•lus


65 
	#_IO_£ek_£t
 0

	)

66 
	#_IO_£ek_cur
 1

	)

67 
	#_IO_£ek_íd
 2

	)

90 #ifde‡
_LIBC


91 
	~<shlib-com∑t.h
>

92 #i‡!
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

96 
	#_G_IO_NO_BACKWARD_COMPAT
 1

	)

100 #i‡(!
deföed
 
_IO_USE_OLD_IO_FILE
 \

101 && (!
deföed
 
_G_IO_NO_BACKWARD_COMPAT
 || _G_IO_NO_BACKWARD_COMPAT == 0))

102 
	#_IO_JUMPS_OFFSET
 1

	)

104 
	#_IO_JUMPS_OFFSET
 0

	)

107 
	#_IO_JUMPS
(
THIS
Ë(THIS)->
vèbÀ


	)

108 
	#_IO_WIDE_JUMPS
(
THIS
Ë((
_IO_FILE
 *Ë(THIS))->
_wide_d©a
->
_wide_vèbÀ


	)

109 
	#_IO_CHECK_WIDE
(
THIS
Ë(((
_IO_FILE
 *Ë(THIS))->
_wide_d©a
 !
NULL
)

	)

111 #i‡
_IO_JUMPS_OFFSET


112 
	#_IO_JUMPS_FUNC
(
THIS
) \

113 (*(
_IO_jump_t
 **Ë((*Ë&
	`_IO_JUMPS
 ((
_IO_FILE_∂us
 *Ë(
THIS
)) \

114 + (
THIS
)->
_vèbÀ_off£t
))

	)

115 
	#_IO_vèbÀ_off£t
(
THIS
Ë(THIS)->
_vèbÀ_off£t


	)

117 
	#_IO_JUMPS_FUNC
(
THIS
Ë
	`_IO_JUMPS
 ((
_IO_FILE_∂us
 *Ë(THIS))

	)

118 
	#_IO_vèbÀ_off£t
(
THIS
Ë0

	)

120 
	#_IO_WIDE_JUMPS_FUNC
(
THIS
Ë
	`_IO_WIDE_JUMPS
(THIS)

	)

121 
	#JUMP_FIELD
(
TYPE
, 
NAME
ËTYPE 
	)
NAME

122 
	#JUMP0
(
FUNC
, 
THIS
Ë(
	`_IO_JUMPS_FUNC
(THIS)->FUNCË(THIS)

	)

123 
	#JUMP1
(
FUNC
, 
THIS
, 
X1
Ë(
	`_IO_JUMPS_FUNC
(THIS)->FUNCË(THIS, X1)

	)

124 
	#JUMP2
(
FUNC
, 
THIS
, 
X1
, 
X2
Ë(
	`_IO_JUMPS_FUNC
(THIS)->FUNCË(THIS, X1, X2)

	)

125 
	#JUMP3
(
FUNC
, 
THIS
, 
X1
,
X2
,
X3
Ë(
	`_IO_JUMPS_FUNC
(THIS)->FUNCË(THIS, X1,X2, X3)

	)

126 
	#JUMP_INIT
(
NAME
, 
VALUE
Ë
	)
VALUE

127 
	#JUMP_INIT_DUMMY
 
	`JUMP_INIT
(
dummy
, 0), JUMP_INIT (
dummy2
, 0)

	)

129 
	#WJUMP0
(
FUNC
, 
THIS
Ë(
	`_IO_WIDE_JUMPS_FUNC
(THIS)->FUNCË(THIS)

	)

130 
	#WJUMP1
(
FUNC
, 
THIS
, 
X1
Ë(
	`_IO_WIDE_JUMPS_FUNC
(THIS)->FUNCË(THIS, X1)

	)

131 
	#WJUMP2
(
FUNC
, 
THIS
, 
X1
, 
X2
Ë(
	`_IO_WIDE_JUMPS_FUNC
(THIS)->FUNCË(THIS, X1, X2)

	)

132 
	#WJUMP3
(
FUNC
, 
THIS
, 
X1
,
X2
,
X3
Ë(
	`_IO_WIDE_JUMPS_FUNC
(THIS)->FUNCË(THIS, X1,X2, X3)

	)

137 (*
_IO_föish_t
Ë(
	t_IO_FILE
 *, );

138 
	#_IO_FINISH
(
FP
Ë
	`JUMP1
 (
__föish
, FP, 0)

	)

139 
	#_IO_WFINISH
(
FP
Ë
	`WJUMP1
 (
__föish
, FP, 0)

	)

144 (*
_IO_ovîÊow_t
Ë(
	t_IO_FILE
 *, );

145 
	#_IO_OVERFLOW
(
FP
, 
CH
Ë
	`JUMP1
 (
__ovîÊow
, FP, CH)

	)

146 
	#_IO_WOVERFLOW
(
FP
, 
CH
Ë
	`WJUMP1
 (
__ovîÊow
, FP, CH)

	)

152 (*
_IO_undîÊow_t
Ë(
	t_IO_FILE
 *);

153 
	#_IO_UNDERFLOW
(
FP
Ë
	`JUMP0
 (
__undîÊow
, FP)

	)

154 
	#_IO_WUNDERFLOW
(
FP
Ë
	`WJUMP0
 (
__undîÊow
, FP)

	)

161 
	#_IO_UFLOW
(
FP
Ë
	`JUMP0
 (
__uÊow
, FP)

	)

162 
	#_IO_WUFLOW
(
FP
Ë
	`WJUMP0
 (
__uÊow
, FP)

	)

166 (*
_IO_pbackÁû_t
Ë(
	t_IO_FILE
 *, );

167 
	#_IO_PBACKFAIL
(
FP
, 
CH
Ë
	`JUMP1
 (
__pbackÁû
, FP, CH)

	)

168 
	#_IO_WPBACKFAIL
(
FP
, 
CH
Ë
	`WJUMP1
 (
__pbackÁû
, FP, CH)

	)

173 
_IO_size_t
 (*
	t_IO_x•uä_t
Ë(
	t_IO_FILE
 *
	tFP
, c⁄° *
	tDATA
,

174 
	t_IO_size_t
 
	tN
);

175 
	#_IO_XSPUTN
(
FP
, 
DATA
, 
N
Ë
	`JUMP2
 (
__x•uä
, FP, DATA, N)

	)

176 
	#_IO_WXSPUTN
(
FP
, 
DATA
, 
N
Ë
	`WJUMP2
 (
__x•uä
, FP, DATA, N)

	)

181 
_IO_size_t
 (*
	t_IO_xsgën_t
Ë(
	t_IO_FILE
 *
	tFP
, *
	tDATA
, 
	t_IO_size_t
 
	tN
);

182 
	#_IO_XSGETN
(
FP
, 
DATA
, 
N
Ë
	`JUMP2
 (
__xsgën
, FP, DATA, N)

	)

183 
	#_IO_WXSGETN
(
FP
, 
DATA
, 
N
Ë
	`WJUMP2
 (
__xsgën
, FP, DATA, N)

	)

190 
_IO_off64_t
 (*
	t_IO_£ekoff_t
Ë(
	t_IO_FILE
 *
	tFP
, 
	t_IO_off64_t
 
	tOFF
, 
	tDIR
,

191 
	tMODE
);

192 
	#_IO_SEEKOFF
(
FP
, 
OFF
, 
DIR
, 
MODE
Ë
	`JUMP3
 (
__£ekoff
, FP, OFF, DIR, MODE)

	)

193 
	#_IO_WSEEKOFF
(
FP
, 
OFF
, 
DIR
, 
MODE
Ë
	`WJUMP3
 (
__£ekoff
, FP, OFF, DIR, MODE)

	)

200 
_IO_off64_t
 (*
	t_IO_£ekpos_t
Ë(
	t_IO_FILE
 *, 
	t_IO_off64_t
, );

201 
	#_IO_SEEKPOS
(
FP
, 
POS
, 
FLAGS
Ë
	`JUMP2
 (
__£ekpos
, FP, POS, FLAGS)

	)

202 
	#_IO_WSEEKPOS
(
FP
, 
POS
, 
FLAGS
Ë
	`WJUMP2
 (
__£ekpos
, FP, POS, FLAGS)

	)

206 
_IO_FILE
* (*
	t_IO_£tbuf_t
Ë(
	t_IO_FILE
 *, *, 
	t_IO_ssize_t
);

207 
	#_IO_SETBUF
(
FP
, 
BUFFER
, 
LENGTH
Ë
	`JUMP2
 (
__£tbuf
, FP, BUFFER, LENGTH)

	)

208 
	#_IO_WSETBUF
(
FP
, 
BUFFER
, 
LENGTH
Ë
	`WJUMP2
 (
__£tbuf
, FP, BUFFER, LENGTH)

	)

213 (*
_IO_sync_t
Ë(
	t_IO_FILE
 *);

214 
	#_IO_SYNC
(
FP
Ë
	`JUMP0
 (
__sync
, FP)

	)

215 
	#_IO_WSYNC
(
FP
Ë
	`WJUMP0
 (
__sync
, FP)

	)

220 (*
_IO_dﬂŒoˇã_t
Ë(
	t_IO_FILE
 *);

221 
	#_IO_DOALLOCATE
(
FP
Ë
	`JUMP0
 (
__dﬂŒoˇã
, FP)

	)

222 
	#_IO_WDOALLOCATE
(
FP
Ë
	`WJUMP0
 (
__dﬂŒoˇã
, FP)

	)

239 
_IO_ssize_t
 (*
	t_IO_ªad_t
Ë(
	t_IO_FILE
 *, *, 
	t_IO_ssize_t
);

240 
	#_IO_SYSREAD
(
FP
, 
DATA
, 
LEN
Ë
	`JUMP2
 (
__ªad
, FP, DATA, LEN)

	)

241 
	#_IO_WSYSREAD
(
FP
, 
DATA
, 
LEN
Ë
	`WJUMP2
 (
__ªad
, FP, DATA, LEN)

	)

247 
_IO_ssize_t
 (*
	t_IO_wrôe_t
Ë(
	t_IO_FILE
 *, c⁄° *, 
	t_IO_ssize_t
);

248 
	#_IO_SYSWRITE
(
FP
, 
DATA
, 
LEN
Ë
	`JUMP2
 (
__wrôe
, FP, DATA, LEN)

	)

249 
	#_IO_WSYSWRITE
(
FP
, 
DATA
, 
LEN
Ë
	`WJUMP2
 (
__wrôe
, FP, DATA, LEN)

	)

255 
_IO_off64_t
 (*
	t_IO_£ek_t
Ë(
	t_IO_FILE
 *, 
	t_IO_off64_t
, );

256 
	#_IO_SYSSEEK
(
FP
, 
OFFSET
, 
MODE
Ë
	`JUMP2
 (
__£ek
, FP, OFFSET, MODE)

	)

257 
	#_IO_WSYSSEEK
(
FP
, 
OFFSET
, 
MODE
Ë
	`WJUMP2
 (
__£ek
, FP, OFFSET, MODE)

	)

263 (*
_IO_˛o£_t
Ë(
	t_IO_FILE
 *);

264 
	#_IO_SYSCLOSE
(
FP
Ë
	`JUMP0
 (
__˛o£
, FP)

	)

265 
	#_IO_WSYSCLOSE
(
FP
Ë
	`WJUMP0
 (
__˛o£
, FP)

	)

271 (*
_IO_°©_t
Ë(
	t_IO_FILE
 *, *);

272 
	#_IO_SYSSTAT
(
FP
, 
BUF
Ë
	`JUMP1
 (
__°©
, FP, BUF)

	)

273 
	#_IO_WSYSSTAT
(
FP
, 
BUF
Ë
	`WJUMP1
 (
__°©
, FP, BUF)

	)

278 (*
_IO_showm™yc_t
Ë(
	t_IO_FILE
 *);

279 
	#_IO_SHOWMANYC
(
FP
Ë
	`JUMP0
 (
__showm™yc
, FP)

	)

280 
	#_IO_WSHOWMANYC
(
FP
Ë
	`WJUMP0
 (
__showm™yc
, FP)

	)

284 (*
_IO_imbue_t
Ë(
	t_IO_FILE
 *, *);

285 
	#_IO_IMBUE
(
FP
, 
LOCALE
Ë
	`JUMP1
 (
__imbue
, FP, LOCALE)

	)

286 
	#_IO_WIMBUE
(
FP
, 
LOCALE
Ë
	`WJUMP1
 (
__imbue
, FP, LOCALE)

	)

289 
	#_IO_CHAR_TYPE
 

	)

290 
	#_IO_INT_TYPE
 

	)

292 
	s_IO_jump_t


294 
JUMP_FIELD
(
size_t
, 
__dummy
);

295 
JUMP_FIELD
(
size_t
, 
__dummy2
);

296 
JUMP_FIELD
(
_IO_föish_t
, 
__föish
);

297 
JUMP_FIELD
(
_IO_ovîÊow_t
, 
__ovîÊow
);

298 
JUMP_FIELD
(
_IO_undîÊow_t
, 
__undîÊow
);

299 
JUMP_FIELD
(
_IO_undîÊow_t
, 
__uÊow
);

300 
JUMP_FIELD
(
_IO_pbackÁû_t
, 
__pbackÁû
);

302 
JUMP_FIELD
(
_IO_x•uä_t
, 
__x•uä
);

303 
JUMP_FIELD
(
_IO_xsgën_t
, 
__xsgën
);

304 
JUMP_FIELD
(
_IO_£ekoff_t
, 
__£ekoff
);

305 
JUMP_FIELD
(
_IO_£ekpos_t
, 
__£ekpos
);

306 
JUMP_FIELD
(
_IO_£tbuf_t
, 
__£tbuf
);

307 
JUMP_FIELD
(
_IO_sync_t
, 
__sync
);

308 
JUMP_FIELD
(
_IO_dﬂŒoˇã_t
, 
__dﬂŒoˇã
);

309 
JUMP_FIELD
(
_IO_ªad_t
, 
__ªad
);

310 
JUMP_FIELD
(
_IO_wrôe_t
, 
__wrôe
);

311 
JUMP_FIELD
(
_IO_£ek_t
, 
__£ek
);

312 
JUMP_FIELD
(
_IO_˛o£_t
, 
__˛o£
);

313 
JUMP_FIELD
(
_IO_°©_t
, 
__°©
);

314 
JUMP_FIELD
(
_IO_showm™yc_t
, 
__showm™yc
);

315 
JUMP_FIELD
(
_IO_imbue_t
, 
__imbue
);

317 
gë_cﬁumn
;

318 
£t_cﬁumn
;

327 
	s_IO_FILE_∂us


329 
_IO_FILE
 
fûe
;

330 c⁄° 
_IO_jump_t
 *
vèbÀ
;

333 #ifde‡
_IO_USE_OLD_IO_FILE


337 
	s_IO_FILE_com∂ëe_∂us


339 
_IO_FILE_com∂ëe
 
fûe
;

340 c⁄° 
_IO_jump_t
 *
vèbÀ
;

345 
	s_IO_cookõ_fûe


347 
_IO_FILE_∂us
 
__Â
;

348 *
__cookõ
;

349 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_fun˘i⁄s
;

352 
_IO_FILE
 *
_IO_f›ícookõ
 (*
cookõ
, c⁄° *
mode
,

353 
_IO_cookõ_io_fun˘i⁄s_t
 
io_fun˘i⁄s
);

358 
_IO_FILE
 *
	t_IO_ITER
;

362 
_IO_swôch_to_maö_gë_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

363 
_IO_swôch_to_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

364 
_IO_swôch_to_gë_mode
 (
_IO_FILE
 *);

365 
libc_hiddí_¥Ÿo
 (
_IO_swôch_to_gë_mode
)

366 
_IO_öô
 (
_IO_FILE
 *, Ë
__THROW
;

367 
libc_hiddí_¥Ÿo
 (
_IO_öô
)

368 
_IO_•utbackc
 (
_IO_FILE
 *, Ë
__THROW
;

369 
libc_hiddí_¥Ÿo
 (
_IO_•utbackc
)

370 
_IO_sungëc
 (
_IO_FILE
 *Ë
__THROW
;

371 
_IO_un_lök
 (
_IO_FILE_∂us
 *Ë
__THROW
;

372 
libc_hiddí_¥Ÿo
 (
_IO_un_lök
)

373 
_IO_lök_ö
 (
_IO_FILE_∂us
 *Ë
__THROW
;

374 
libc_hiddí_¥Ÿo
 (
_IO_lök_ö
)

375 
_IO_dﬂŒocbuf
 (
_IO_FILE
 *Ë
__THROW
;

376 
libc_hiddí_¥Ÿo
 (
_IO_dﬂŒocbuf
)

377 
_IO_unßve_m¨kîs
 (
_IO_FILE
 *Ë
__THROW
;

378 
libc_hiddí_¥Ÿo
 (
_IO_unßve_m¨kîs
)

379 
_IO_£tb
 (
_IO_FILE
 *, *, *, Ë
__THROW
;

380 
libc_hiddí_¥Ÿo
 (
_IO_£tb
)

381 
_IO_adju°_cﬁumn
 (, c⁄° *, Ë
__THROW
;

382 
libc_hiddí_¥Ÿo
 (
_IO_adju°_cﬁumn
)

383 
	#_IO_•uä
(
__Â
, 
__s
, 
__n
Ë
	`_IO_XSPUTN
 (__Â, __s, __n)

	)

385 
_IO_ssize_t
 
_IO_Àa°_wm¨kî
 (
_IO_FILE
 *, 
wch¨_t
 *Ë
	g__THROW
;

386 
libc_hiddí_¥Ÿo
 (
_IO_Àa°_wm¨kî
)

387 
_IO_swôch_to_maö_wgë_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

388 
libc_hiddí_¥Ÿo
 (
_IO_swôch_to_maö_wgë_¨ó
)

389 
_IO_swôch_to_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

390 
libc_hiddí_¥Ÿo
 (
_IO_swôch_to_wbackup_¨ó
)

391 
_IO_swôch_to_wgë_mode
 (
_IO_FILE
 *);

392 
libc_hiddí_¥Ÿo
 (
_IO_swôch_to_wgë_mode
)

393 
_IO_w£tb
 (
_IO_FILE
 *, 
wch¨_t
 *, wch¨_à*, Ë
__THROW
;

394 
libc_hiddí_¥Ÿo
 (
_IO_w£tb
)

395 
wöt_t
 
_IO_•utbackwc
 (
_IO_FILE
 *, wöt_tË
__THROW
;

396 
libc_hiddí_¥Ÿo
 (
_IO_•utbackwc
)

397 
wöt_t
 
_IO_sungëwc
 (
_IO_FILE
 *Ë
__THROW
;

398 
_IO_wdﬂŒocbuf
 (
_IO_FILE
 *Ë
__THROW
;

399 
libc_hiddí_¥Ÿo
 (
_IO_wdﬂŒocbuf
)

400 
_IO_unßve_wm¨kîs
 (
_IO_FILE
 *Ë
__THROW
;

401 
_IO_adju°_wcﬁumn
 (, c⁄° 
wch¨_t
 *, Ë
__THROW
;

402 
_IO_off64_t
 
gë_fûe_off£t
 (
_IO_FILE
 *
Â
);

406 
_IO_öô_m¨kî
 (
_IO_m¨kî
 *, 
_IO_FILE
 *);

407 
_IO_öô_wm¨kî
 (
_IO_m¨kî
 *, 
_IO_FILE
 *);

408 
_IO_ªmove_m¨kî
 (
_IO_m¨kî
 *Ë
__THROW
;

409 
_IO_m¨kî_dif„ªn˚
 (
_IO_m¨kî
 *, _IO_marker *)

410 
__THROW
;

411 
_IO_m¨kî_dñè
 (
_IO_m¨kî
 *Ë
__THROW
;

412 
_IO_wm¨kî_dñè
 (
_IO_m¨kî
 *Ë
__THROW
;

413 
_IO_£ekm¨k
 (
_IO_FILE
 *, 
_IO_m¨kî
 *, Ë
__THROW
;

414 
_IO_£ekwm¨k
 (
_IO_FILE
 *, 
_IO_m¨kî
 *, Ë
__THROW
;

418 
_IO_ITER
 
_IO_ôî_begö
 (Ë
__THROW
;

419 
libc_hiddí_¥Ÿo
 (
_IO_ôî_begö
)

420 
_IO_ITER
 
_IO_ôî_íd
 (Ë
__THROW
;

421 
libc_hiddí_¥Ÿo
 (
_IO_ôî_íd
)

422 
_IO_ITER
 
_IO_ôî_√xt
 (_IO_ITERË
__THROW
;

423 
libc_hiddí_¥Ÿo
 (
_IO_ôî_√xt
)

424 
_IO_FILE
 *
_IO_ôî_fûe
 (
_IO_ITER
Ë
__THROW
;

425 
libc_hiddí_¥Ÿo
 (
_IO_ôî_fûe
)

426 
_IO_li°_lock
 (Ë
__THROW
;

427 
libc_hiddí_¥Ÿo
 (
_IO_li°_lock
)

428 
_IO_li°_u∆ock
 (Ë
__THROW
;

429 
libc_hiddí_¥Ÿo
 (
_IO_li°_u∆ock
)

430 
_IO_li°_ª£éock
 (Ë
__THROW
;

431 
libc_hiddí_¥Ÿo
 (
_IO_li°_ª£éock
)

435 
_IO_deÁu…_undîÊow
 (
_IO_FILE
 *Ë
__THROW
;

436 
_IO_deÁu…_uÊow
 (
_IO_FILE
 *);

437 
libc_hiddí_¥Ÿo
 (
_IO_deÁu…_uÊow
)

438 
wöt_t
 
_IO_wdeÁu…_uÊow
 (
_IO_FILE
 *);

439 
libc_hiddí_¥Ÿo
 (
_IO_wdeÁu…_uÊow
)

440 
_IO_deÁu…_dﬂŒoˇã
 (
_IO_FILE
 *Ë
__THROW
;

441 
libc_hiddí_¥Ÿo
 (
_IO_deÁu…_dﬂŒoˇã
)

442 
_IO_wdeÁu…_dﬂŒoˇã
 (
_IO_FILE
 *Ë
__THROW
;

443 
libc_hiddí_¥Ÿo
 (
_IO_wdeÁu…_dﬂŒoˇã
)

444 
_IO_deÁu…_föish
 (
_IO_FILE
 *, Ë
__THROW
;

445 
libc_hiddí_¥Ÿo
 (
_IO_deÁu…_föish
)

446 
_IO_wdeÁu…_föish
 (
_IO_FILE
 *, Ë
__THROW
;

447 
libc_hiddí_¥Ÿo
 (
_IO_wdeÁu…_föish
)

448 
_IO_deÁu…_pbackÁû
 (
_IO_FILE
 *, Ë
__THROW
;

449 
libc_hiddí_¥Ÿo
 (
_IO_deÁu…_pbackÁû
)

450 
wöt_t
 
_IO_wdeÁu…_pbackÁû
 (
_IO_FILE
 *, wöt_tË
__THROW
;

451 
libc_hiddí_¥Ÿo
 (
_IO_wdeÁu…_pbackÁû
)

452 
_IO_FILE
* 
_IO_deÁu…_£tbuf
 (_IO_FILE *, *, 
_IO_ssize_t
);

453 
_IO_size_t
 
_IO_deÁu…_x•uä
 (
_IO_FILE
 *, const *, _IO_size_t);

454 
libc_hiddí_¥Ÿo
 (
_IO_deÁu…_x•uä
)

455 
_IO_size_t
 
_IO_wdeÁu…_x•uä
 (
_IO_FILE
 *, const *, _IO_size_t);

456 
libc_hiddí_¥Ÿo
 (
_IO_wdeÁu…_x•uä
)

457 
_IO_size_t
 
_IO_deÁu…_xsgën
 (
_IO_FILE
 *, *, _IO_size_t);

458 
libc_hiddí_¥Ÿo
 (
_IO_deÁu…_xsgën
)

459 
_IO_size_t
 
_IO_wdeÁu…_xsgën
 (
_IO_FILE
 *, *, _IO_size_t);

460 
libc_hiddí_¥Ÿo
 (
_IO_wdeÁu…_xsgën
)

461 
_IO_off64_t
 
_IO_deÁu…_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , )

462 
__THROW
;

463 
_IO_off64_t
 
_IO_deÁu…_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

464 
_IO_ssize_t
 
_IO_deÁu…_wrôe
 (
_IO_FILE
 *, const *, _IO_ssize_t);

465 
_IO_ssize_t
 
_IO_deÁu…_ªad
 (
_IO_FILE
 *, *, _IO_ssize_t);

466 
_IO_deÁu…_°©
 (
_IO_FILE
 *, *Ë
__THROW
;

467 
_IO_off64_t
 
_IO_deÁu…_£ek
 (
_IO_FILE
 *, _IO_off64_t, Ë
__THROW
;

468 
_IO_deÁu…_sync
 (
_IO_FILE
 *Ë
__THROW
;

469 
	#_IO_deÁu…_˛o£
 ((
_IO_˛o£_t
Ë
_IO_deÁu…_sync
)

	)

470 
_IO_deÁu…_showm™yc
 (
_IO_FILE
 *Ë
__THROW
;

471 
_IO_deÁu…_imbue
 (
_IO_FILE
 *, *Ë
__THROW
;

473 c⁄° 
_IO_jump_t
 
_IO_fûe_jumps
;

474 
libc_hiddí_¥Ÿo
 (
_IO_fûe_jumps
)

475 c⁄° 
_IO_jump_t
 
_IO_fûe_jumps_mm≠
 
©åibuã_hiddí
;

476 c⁄° 
_IO_jump_t
 
_IO_fûe_jumps_maybe_mm≠
 
©åibuã_hiddí
;

477 c⁄° 
_IO_jump_t
 
_IO_wfûe_jumps
;

478 
libc_hiddí_¥Ÿo
 (
_IO_wfûe_jumps
)

479 c⁄° 
_IO_jump_t
 
_IO_wfûe_jumps_mm≠
 
©åibuã_hiddí
;

480 c⁄° 
_IO_jump_t
 
_IO_wfûe_jumps_maybe_mm≠
 
©åibuã_hiddí
;

481 c⁄° 
_IO_jump_t
 
_IO_ﬁd_fûe_jumps
 
©åibuã_hiddí
;

482 c⁄° 
_IO_jump_t
 
_IO_°ªambuf_jumps
;

483 c⁄° 
_IO_jump_t
 
_IO_ﬁd_¥oc_jumps
 
©åibuã_hiddí
;

484 c⁄° 
_IO_jump_t
 
_IO_°r_jumps
 
©åibuã_hiddí
;

485 c⁄° 
_IO_jump_t
 
_IO_w°r_jumps
 
©åibuã_hiddí
;

486 c⁄° 
_IO_codecvt
 
__libio_codecvt
 
©åibuã_hiddí
;

487 
_IO_do_wrôe
 (
_IO_FILE
 *, c⁄° *, 
_IO_size_t
);

488 
libc_hiddí_¥Ÿo
 (
_IO_do_wrôe
)

489 
_IO_√w_do_wrôe
 (
_IO_FILE
 *, c⁄° *, 
_IO_size_t
);

490 
_IO_ﬁd_do_wrôe
 (
_IO_FILE
 *, c⁄° *, 
_IO_size_t
);

491 
_IO_wdo_wrôe
 (
_IO_FILE
 *, c⁄° 
wch¨_t
 *, 
_IO_size_t
);

492 
libc_hiddí_¥Ÿo
 (
_IO_wdo_wrôe
)

493 
_IO_Êush_Æl_lockp
 ();

494 
_IO_Êush_Æl
 ();

495 
libc_hiddí_¥Ÿo
 (
_IO_Êush_Æl
)

496 
_IO_˛ónup
 ();

497 
_IO_Êush_Æl_löebuf„ªd
 ();

498 
libc_hiddí_¥Ÿo
 (
_IO_Êush_Æl_löebuf„ªd
)

499 
_IO_√w_fgëpos
 (
_IO_FILE
 *, 
_IO_Âos_t
 *);

500 
_IO_ﬁd_fgëpos
 (
_IO_FILE
 *, 
_IO_Âos_t
 *);

501 
_IO_√w_f£ços
 (
_IO_FILE
 *, c⁄° 
_IO_Âos_t
 *);

502 
_IO_ﬁd_f£ços
 (
_IO_FILE
 *, c⁄° 
_IO_Âos_t
 *);

503 
_IO_√w_fgëpos64
 (
_IO_FILE
 *, 
_IO_Âos64_t
 *);

504 
_IO_ﬁd_fgëpos64
 (
_IO_FILE
 *, 
_IO_Âos64_t
 *);

505 
_IO_√w_f£ços64
 (
_IO_FILE
 *, c⁄° 
_IO_Âos64_t
 *);

506 
_IO_ﬁd_f£ços64
 (
_IO_FILE
 *, c⁄° 
_IO_Âos64_t
 *);

507 
_IO_ﬁd_öô
 (
_IO_FILE
 *
Â
, 
Êags
Ë
__THROW
;

510 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


511 
	#_IO_do_Êush
(
_f
) \

512 ((
_f
)->
_mode
 <= 0 \

513 ? 
	`_IO_do_wrôe
(
_f
, (_f)->
_IO_wrôe_ba£
, \

514 (
_f
)->
_IO_wrôe_±r
-(_f)->
_IO_wrôe_ba£
) \

515 : 
	`_IO_wdo_wrôe
(
_f
, (_f)->
_wide_d©a
->
_IO_wrôe_ba£
, \

516 ((
_f
)->
_wide_d©a
->
_IO_wrôe_±r
 \

517 - (
_f
)->
_wide_d©a
->
_IO_wrôe_ba£
)))

	)

519 
	#_IO_do_Êush
(
_f
) \

520 
	`_IO_do_wrôe
(
_f
, (_f)->
_IO_wrôe_ba£
, \

521 (
_f
)->
_IO_wrôe_±r
-(_f)->
_IO_wrôe_ba£
)

	)

523 
	#_IO_ﬁd_do_Êush
(
_f
) \

524 
	`_IO_ﬁd_do_wrôe
(
_f
, (_f)->
_IO_wrôe_ba£
, \

525 (
_f
)->
_IO_wrôe_±r
-(_f)->
_IO_wrôe_ba£
)

	)

526 
	#_IO_ö_put_mode
(
_Â
Ë((_Â)->
_Êags
 & 
_IO_CURRENTLY_PUTTING
)

	)

527 
	#_IO_mask_Êags
(
Â
, 
f
, 
mask
) \

528 ((
Â
)->
_Êags
 = ((Â)->_Êag†& ~(
mask
)Ë| ((
f
Ë& (mask)))

	)

529 
	#_IO_£tg
(
Â
, 
eb
, 
g
, 
eg
Ë((Â)->
_IO_ªad_ba£
 = (eb),\

530 (
Â
)->
_IO_ªad_±r
 = (
g
), (Â)->
_IO_ªad_íd
 = (
eg
))

	)

531 
	#_IO_w£tg
(
Â
, 
eb
, 
g
, 
eg
Ë((Â)->
_wide_d©a
->
_IO_ªad_ba£
 = (eb),\

532 (
Â
)->
_wide_d©a
->
_IO_ªad_±r
 = (
g
), \

533 (
Â
)->
_wide_d©a
->
_IO_ªad_íd
 = (
eg
))

	)

534 
	#_IO_£ç
(
__Â
, 
__p
, 
__ï
) \

535 ((
__Â
)->
_IO_wrôe_ba£
 = (__Â)->
_IO_wrôe_±r
 \

536 
__p
, (
__Â
)->
_IO_wrôe_íd
 = (
__ï
))

	)

537 
	#_IO_w£ç
(
__Â
, 
__p
, 
__ï
) \

538 ((
__Â
)->
_wide_d©a
->
_IO_wrôe_ba£
 \

539 (
__Â
)->
_wide_d©a
->
_IO_wrôe_±r
 = 
__p
, \

540 (
__Â
)->
_wide_d©a
->
_IO_wrôe_íd
 = (
__ï
))

	)

541 
	#_IO_have_backup
(
Â
Ë((Â)->
_IO_ßve_ba£
 !
NULL
)

	)

542 
	#_IO_have_wbackup
(
Â
Ë((Â)->
_wide_d©a
->
_IO_ßve_ba£
 !
NULL
)

	)

543 
	#_IO_ö_backup
(
Â
Ë((Â)->
_Êags
 & 
_IO_IN_BACKUP
)

	)

544 
	#_IO_have_m¨kîs
(
Â
Ë((Â)->
_m¨kîs
 !
NULL
)

	)

545 
	#_IO_bÀn
(
Â
Ë((Â)->
_IO_buf_íd
 - (Â)->
_IO_buf_ba£
)

	)

546 
	#_IO_wbÀn
(
Â
Ë((Â)->
_wide_d©a
->
_IO_buf_íd
 \

547 - (
Â
)->
_wide_d©a
->
_IO_buf_ba£
)

	)

551 
_IO_fûe_dﬂŒoˇã
 (
_IO_FILE
 *Ë
__THROW
;

552 
libc_hiddí_¥Ÿo
 (
_IO_fûe_dﬂŒoˇã
)

553 
_IO_FILE
* 
_IO_fûe_£tbuf
 (_IO_FILE *, *, 
_IO_ssize_t
);

554 
libc_hiddí_¥Ÿo
 (
_IO_fûe_£tbuf
)

555 
_IO_off64_t
 
_IO_fûe_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

556 
libc_hiddí_¥Ÿo
 (
_IO_fûe_£ekoff
)

557 
_IO_off64_t
 
_IO_fûe_£ekoff_mm≠
 (
_IO_FILE
 *, _IO_off64_t, , )

558 
__THROW
;

559 
_IO_size_t
 
_IO_fûe_x•uä
 (
_IO_FILE
 *, const *, _IO_size_t);

560 
libc_hiddí_¥Ÿo
 (
_IO_fûe_x•uä
)

561 
_IO_size_t
 
_IO_fûe_xsgën
 (
_IO_FILE
 *, *, _IO_size_t);

562 
libc_hiddí_¥Ÿo
 (
_IO_fûe_xsgën
)

563 
_IO_fûe_°©
 (
_IO_FILE
 *, *Ë
__THROW
;

564 
libc_hiddí_¥Ÿo
 (
_IO_fûe_°©
)

565 
_IO_fûe_˛o£
 (
_IO_FILE
 *Ë
__THROW
;

566 
libc_hiddí_¥Ÿo
 (
_IO_fûe_˛o£
)

567 
_IO_fûe_˛o£_mm≠
 (
_IO_FILE
 *Ë
__THROW
;

568 
_IO_fûe_undîÊow
 (
_IO_FILE
 *);

569 
libc_hiddí_¥Ÿo
 (
_IO_fûe_undîÊow
)

570 
_IO_fûe_undîÊow_mm≠
 (
_IO_FILE
 *);

571 
_IO_fûe_undîÊow_maybe_mm≠
 (
_IO_FILE
 *);

572 
_IO_fûe_ovîÊow
 (
_IO_FILE
 *, );

573 
libc_hiddí_¥Ÿo
 (
_IO_fûe_ovîÊow
)

574 
	#_IO_fûe_is_›í
(
__Â
Ë((__Â)->
_fûío
 !-1)

	)

575 
_IO_fûe_öô
 (
_IO_FILE_∂us
 *Ë
__THROW
;

576 
libc_hiddí_¥Ÿo
 (
_IO_fûe_öô
)

577 
_IO_FILE
* 
_IO_fûe_©èch
 (_IO_FILE *, );

578 
libc_hiddí_¥Ÿo
 (
_IO_fûe_©èch
)

579 
_IO_FILE
* 
_IO_fûe_›í
 (_IO_FILE *, const *, , , , );

580 
libc_hiddí_¥Ÿo
 (
_IO_fûe_›í
)

581 
_IO_FILE
* 
_IO_fûe_f›í
 (_IO_FILE *, const *, const *, );

582 
libc_hiddí_¥Ÿo
 (
_IO_fûe_f›í
)

583 
_IO_ssize_t
 
_IO_fûe_wrôe
 (
_IO_FILE
 *, const *, _IO_ssize_t);

584 
_IO_ssize_t
 
_IO_fûe_ªad
 (
_IO_FILE
 *, *, _IO_ssize_t);

585 
libc_hiddí_¥Ÿo
 (
_IO_fûe_ªad
)

586 
_IO_fûe_sync
 (
_IO_FILE
 *);

587 
libc_hiddí_¥Ÿo
 (
_IO_fûe_sync
)

588 
_IO_fûe_˛o£_ô
 (
_IO_FILE
 *);

589 
libc_hiddí_¥Ÿo
 (
_IO_fûe_˛o£_ô
)

590 
_IO_off64_t
 
_IO_fûe_£ek
 (
_IO_FILE
 *, _IO_off64_t, Ë
__THROW
;

591 
libc_hiddí_¥Ÿo
 (
_IO_fûe_£ek
)

592 
_IO_fûe_föish
 (
_IO_FILE
 *, );

593 
libc_hiddí_¥Ÿo
 (
_IO_fûe_föish
)

595 
_IO_FILE
* 
_IO_√w_fûe_©èch
 (_IO_FILE *, );

596 
_IO_√w_fûe_˛o£_ô
 (
_IO_FILE
 *);

597 
_IO_√w_fûe_föish
 (
_IO_FILE
 *, );

598 
_IO_FILE
* 
_IO_√w_fûe_f›í
 (_IO_FILE *, const *, const *,

600 
_IO_no_öô
 (
_IO_FILE
 *, , , 
_IO_wide_d©a
 *,

601 c⁄° 
_IO_jump_t
 *Ë
__THROW
;

602 
_IO_√w_fûe_öô
 (
_IO_FILE_∂us
 *Ë
__THROW
;

603 
_IO_FILE
* 
_IO_√w_fûe_£tbuf
 (_IO_FILE *, *, 
_IO_ssize_t
);

604 
_IO_FILE
* 
_IO_fûe_£tbuf_mm≠
 (_IO_FILE *, *, 
_IO_ssize_t
);

605 
_IO_√w_fûe_sync
 (
_IO_FILE
 *);

606 
_IO_√w_fûe_undîÊow
 (
_IO_FILE
 *);

607 
_IO_√w_fûe_ovîÊow
 (
_IO_FILE
 *, );

608 
_IO_off64_t
 
_IO_√w_fûe_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

609 
_IO_ssize_t
 
_IO_√w_fûe_wrôe
 (
_IO_FILE
 *, const *, _IO_ssize_t);

610 
_IO_size_t
 
_IO_√w_fûe_x•uä
 (
_IO_FILE
 *, const *, _IO_size_t);

612 
_IO_FILE
* 
_IO_ﬁd_fûe_£tbuf
 (_IO_FILE *, *, 
_IO_ssize_t
);

613 
_IO_off64_t
 
_IO_ﬁd_fûe_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

614 
_IO_size_t
 
_IO_ﬁd_fûe_x•uä
 (
_IO_FILE
 *, const *, _IO_size_t);

615 
_IO_ﬁd_fûe_undîÊow
 (
_IO_FILE
 *);

616 
_IO_ﬁd_fûe_ovîÊow
 (
_IO_FILE
 *, );

617 
_IO_ﬁd_fûe_öô
 (
_IO_FILE_∂us
 *Ë
__THROW
;

618 
_IO_FILE
* 
_IO_ﬁd_fûe_©èch
 (_IO_FILE *, );

619 
_IO_FILE
* 
_IO_ﬁd_fûe_f›í
 (_IO_FILE *, const *, const *);

620 
_IO_ssize_t
 
_IO_ﬁd_fûe_wrôe
 (
_IO_FILE
 *, const *, _IO_ssize_t);

621 
_IO_ﬁd_fûe_sync
 (
_IO_FILE
 *);

622 
_IO_ﬁd_fûe_˛o£_ô
 (
_IO_FILE
 *);

623 
_IO_ﬁd_fûe_föish
 (
_IO_FILE
 *, );

625 
_IO_wfûe_dﬂŒoˇã
 (
_IO_FILE
 *Ë
__THROW
;

626 
_IO_size_t
 
_IO_wfûe_x•uä
 (
_IO_FILE
 *, const *, _IO_size_t);

627 
libc_hiddí_¥Ÿo
 (
_IO_wfûe_x•uä
)

628 
_IO_FILE
* 
_IO_wfûe_£tbuf
 (_IO_FILE *, 
wch¨_t
 *, 
_IO_ssize_t
);

629 
wöt_t
 
_IO_wfûe_sync
 (
_IO_FILE
 *);

630 
libc_hiddí_¥Ÿo
 (
_IO_wfûe_sync
)

631 
wöt_t
 
_IO_wfûe_undîÊow
 (
_IO_FILE
 *);

632 
libc_hiddí_¥Ÿo
 (
_IO_wfûe_undîÊow
)

633 
wöt_t
 
_IO_wfûe_ovîÊow
 (
_IO_FILE
 *, wint_t);

634 
libc_hiddí_¥Ÿo
 (
_IO_wfûe_ovîÊow
)

635 
_IO_off64_t
 
_IO_wfûe_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

636 
libc_hiddí_¥Ÿo
 (
_IO_wfûe_£ekoff
)

639 
_IO_FILE
* 
_IO_¥oc_›í
 (_IO_FILE *, const *, const *)

640 
__THROW
;

641 
_IO_FILE
* 
_IO_√w_¥oc_›í
 (_IO_FILE *, const *, const *)

642 
__THROW
;

643 
_IO_FILE
* 
_IO_ﬁd_¥oc_›í
 (_IO_FILE *, const *, const *);

644 
_IO_¥oc_˛o£
 (
_IO_FILE
 *Ë
__THROW
;

645 
_IO_√w_¥oc_˛o£
 (
_IO_FILE
 *Ë
__THROW
;

646 
_IO_ﬁd_¥oc_˛o£
 (
_IO_FILE
 *);

649 
_IO_°r_undîÊow
 (
_IO_FILE
 *Ë
__THROW
;

650 
libc_hiddí_¥Ÿo
 (
_IO_°r_undîÊow
)

651 
_IO_°r_ovîÊow
 (
_IO_FILE
 *, Ë
__THROW
;

652 
libc_hiddí_¥Ÿo
 (
_IO_°r_ovîÊow
)

653 
_IO_°r_pbackÁû
 (
_IO_FILE
 *, Ë
__THROW
;

654 
libc_hiddí_¥Ÿo
 (
_IO_°r_pbackÁû
)

655 
_IO_off64_t
 
_IO_°r_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , Ë
__THROW
;

656 
libc_hiddí_¥Ÿo
 (
_IO_°r_£ekoff
)

657 
_IO_°r_föish
 (
_IO_FILE
 *, Ë
__THROW
;

660 
	g_IO_°rfûe_
;

661 
_IO_°r_öô_°©ic
 (
_IO_°rfûe_
 *, *, , *)

662 
__THROW
;

663 
_IO_°r_öô_ªad⁄ly
 (
_IO_°rfûe_
 *, const *, )

664 
__THROW
;

665 
_IO_ssize_t
 
_IO_°r_cou¡
 (
_IO_FILE
 *Ë
__THROW
;

668 
_IO_w°r_öô_°©ic
 (
_IO_FILE
 *, 
wch¨_t
 *, 
_IO_size_t
, wchar_t *)

669 
__THROW
;

670 
_IO_ssize_t
 
_IO_w°r_cou¡
 (
_IO_FILE
 *Ë
__THROW
;

671 
_IO_wöt_t
 
_IO_w°r_ovîÊow
 (
_IO_FILE
 *, _IO_wöt_tË
__THROW
;

672 
_IO_wöt_t
 
_IO_w°r_undîÊow
 (
_IO_FILE
 *Ë
__THROW
;

673 
_IO_off64_t
 
_IO_w°r_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , )

674 
__THROW
;

675 
_IO_wöt_t
 
_IO_w°r_pbackÁû
 (
_IO_FILE
 *, _IO_wöt_tË
__THROW
;

676 
_IO_w°r_föish
 (
_IO_FILE
 *, Ë
__THROW
;

678 
_IO_va•rötf
 (**
ªsu…_±r
, c⁄° *
f‹m©
,

679 
_IO_va_li°
 
¨gs
Ë
__THROW
;

680 
_IO_vd¥ötf
 (
d
, c⁄° *
f‹m©
, 
_IO_va_li°
 
¨g
);

681 
_IO_v¢¥ötf
 (*
°rög
, 
_IO_size_t
 
maxÀn
,

682 c⁄° *
f‹m©
, 
_IO_va_li°
 
¨gs
Ë
__THROW
;

685 
_IO_size_t
 
_IO_gëlöe
 (
_IO_FILE
 *,*, _IO_size_t, , );

686 
libc_hiddí_¥Ÿo
 (
_IO_gëlöe
)

687 
_IO_size_t
 
_IO_gëlöe_öfo
 (
_IO_FILE
 *,*, _IO_size_t,

689 
libc_hiddí_¥Ÿo
 (
_IO_gëlöe_öfo
)

690 
_IO_ssize_t
 
_IO_gëdñim
 (**, 
_IO_size_t
 *, , 
_IO_FILE
 *);

691 
_IO_size_t
 
_IO_gëwlöe
 (
_IO_FILE
 *,
wch¨_t
 *, _IO_size_t, 
wöt_t
, );

692 
_IO_size_t
 
_IO_gëwlöe_öfo
 (
_IO_FILE
 *,
wch¨_t
 *, _IO_size_t,

693 
wöt_t
, , wint_t *);

695 
_IO_FILE_∂us
 *
_IO_li°_Æl
;

696 
libc_hiddí_¥Ÿo
 (
_IO_li°_Æl
)

697 (*
_IO_˛ónup_ªgi°øti⁄_√eded
) ();

699 
_IO_°r_öô_°©ic_öã∫Æ
 (
_IO_°rfûe_
 *, *,

700 
_IO_size_t
, *Ë
__THROW
;

701 
_IO_off64_t
 
_IO_£ekoff_u∆ocked
 (
_IO_FILE
 *, _IO_off64_t, , )

702 
©åibuã_hiddí
;

703 
_IO_off64_t
 
_IO_£ekpos_u∆ocked
 (
_IO_FILE
 *, _IO_off64_t, )

704 
©åibuã_hiddí
;

706 #i‚de‡
EOF


707 
	#EOF
 (-1)

	)

709 #i‚de‡
NULL


710 #i‡
deföed
 
__GNUG__
 && \

711 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

712 
	#NULL
 (
__nuŒ
)

	)

714 #i‡!
deföed
(
__˝lu•lus
)

715 
	#NULL
 ((*)0)

	)

717 
	#NULL
 (0)

	)

722 #i‡
_G_HAVE_MMAP


724 
	~<uni°d.h
>

725 
	~<f˙é.h
>

726 
	~<sys/mm™.h
>

727 
	~<sys/∑øm.h
>

729 #i‡!
deföed
(
MAP_ANONYMOUS
Ë&& deföed(
MAP_ANON
)

730 
	#MAP_ANONYMOUS
 
MAP_ANON


	)

733 #i‡!
deföed
(
MAP_ANONYMOUS
Ë|| !deföed(
EXEC_PAGESIZE
)

734 #unde‡
_G_HAVE_MMAP


735 
	#_G_HAVE_MMAP
 0

	)

740 #i‡
_G_HAVE_MMAP


742 #ifde‡
_LIBC


744 
	#mm≠
 
__mm≠


	)

745 
	#munm≠
 
__munm≠


	)

746 
	#·runˇã
 
__·runˇã


	)

749 
	#ROUND_TO_PAGE
(
_S
) \

750 (((
_S
Ë+ 
EXEC_PAGESIZE
 - 1Ë& ~(EXEC_PAGESIZE - 1))

	)

752 
	#FREE_BUF
(
_B
, 
_S
) \

753 
	`munm≠
 ((
_B
), 
	`ROUND_TO_PAGE
 (
_S
))

	)

754 
	#ALLOC_BUF
(
_B
, 
_S
, 
_R
) \

756 (
_B
Ë(*Ë
	`mm≠
 (0, 
	`ROUND_TO_PAGE
 (
_S
), \

757 
PROT_READ
 | 
PROT_WRITE
, \

758 
MAP_PRIVATE
 | 
MAP_ANONYMOUS
, -1, 0); \

759 i‡((
_B
Ë=(*Ë
MAP_FAILED
) \

760  (
_R
); \

761 } 0)

	)

762 
	#ALLOC_WBUF
(
_B
, 
_S
, 
_R
) \

764 (
_B
Ë(
wch¨_t
 *Ë
	`mm≠
 (0, 
	`ROUND_TO_PAGE
 (
_S
), \

765 
PROT_READ
 | 
PROT_WRITE
, \

766 
MAP_PRIVATE
 | 
MAP_ANONYMOUS
, -1, 0); \

767 i‡((
_B
Ë=(
wch¨_t
 *Ë
MAP_FAILED
) \

768  (
_R
); \

769 } 0)

	)

773 
	#FREE_BUF
(
_B
, 
_S
) \

774 
	`‰ì
(
_B
)

	)

775 
	#ALLOC_BUF
(
_B
, 
_S
, 
_R
) \

777 (
_B
Ë(*)
	`mÆloc
(
_S
); \

778 i‡((
_B
Ë=
NULL
) \

779  (
_R
); \

780 } 0)

	)

781 
	#ALLOC_WBUF
(
_B
, 
_S
, 
_R
) \

783 (
_B
Ë(
wch¨_t
 *)
	`mÆloc
(
_S
); \

784 i‡((
_B
Ë=
NULL
) \

785  (
_R
); \

786 } 0)

	)

790 #i‚de‡
OS_FSTAT


791 
	#OS_FSTAT
 
f°©


	)

793 
_IO_vsˇnf
 (c⁄° *, 
_IO_va_li°
Ë
__THROW
;

796 #i‚de‡
_IO_pos_BAD


797 
	#_IO_pos_BAD
 ((
_IO_off64_t
Ë-1)

	)

800 #i‚de‡
_IO_pos_adju°


801 
	#_IO_pos_adju°
(
pos
, 
dñè
Ë(’osË+(dñè))

	)

804 #i‚de‡
_IO_pos_0


805 
	#_IO_pos_0
 ((
_IO_off64_t
Ë0)

	)

808 #ifde‡
__˝lu•lus


812 #ifde‡
_IO_MTSAFE_IO


814 #ifde‡
_IO_USE_OLD_IO_FILE


815 
	#FILEBUF_LITERAL
(
CHAIN
, 
FLAGS
, 
FD
, 
WDP
) \

816 { 
_IO_MAGIC
+
_IO_LINKED
+
_IO_IS_FILEBUF
+
FLAGS
, \

817 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (
_IO_FILE
 *Ë
CHAIN
, 
FD
, \

818 0, 
_IO_pos_BAD
, 0, 0, { 0 }, &
_IO_°dfûe_
##
FD
##
_lock
 }

	)

820 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


821 
	#FILEBUF_LITERAL
(
CHAIN
, 
FLAGS
, 
FD
, 
WDP
) \

822 { 
_IO_MAGIC
+
_IO_LINKED
+
_IO_IS_FILEBUF
+
FLAGS
, \

823 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (
_IO_FILE
 *Ë
CHAIN
, 
FD
, \

824 0, 
_IO_pos_BAD
, 0, 0, { 0 }, &
_IO_°dfûe_
##
FD
##
_lock
, _IO_pos_BAD,\

825 
NULL
, 
WDP
, 0 }

	)

827 
	#FILEBUF_LITERAL
(
CHAIN
, 
FLAGS
, 
FD
, 
WDP
) \

828 { 
_IO_MAGIC
+
_IO_LINKED
+
_IO_IS_FILEBUF
+
FLAGS
, \

829 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (
_IO_FILE
 *Ë
CHAIN
, 
FD
, \

830 0, 
_IO_pos_BAD
, 0, 0, { 0 }, &
_IO_°dfûe_
##
FD
##
_lock
, _IO_pos_BAD,\

831 0 }

	)

835 #ifde‡
_IO_USE_OLD_IO_FILE


836 
	#FILEBUF_LITERAL
(
CHAIN
, 
FLAGS
, 
FD
, 
WDP
) \

837 { 
_IO_MAGIC
+
_IO_LINKED
+
_IO_IS_FILEBUF
+
FLAGS
, \

838 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (
_IO_FILE
 *Ë
CHAIN
, 
FD
, \

839 0, 
_IO_pos_BAD
 }

	)

841 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


842 
	#FILEBUF_LITERAL
(
CHAIN
, 
FLAGS
, 
FD
, 
WDP
) \

843 { 
_IO_MAGIC
+
_IO_LINKED
+
_IO_IS_FILEBUF
+
FLAGS
, \

844 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (
_IO_FILE
 *Ë
CHAIN
, 
FD
, \

845 0, 
_IO_pos_BAD
, 0, 0, { 0 }, 0, _IO_pos_BAD, \

846 
NULL
, 
WDP
, 0 }

	)

848 
	#FILEBUF_LITERAL
(
CHAIN
, 
FLAGS
, 
FD
, 
WDP
) \

849 { 
_IO_MAGIC
+
_IO_LINKED
+
_IO_IS_FILEBUF
+
FLAGS
, \

850 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (
_IO_FILE
 *Ë
CHAIN
, 
FD
, \

851 0, 
_IO_pos_BAD
, 0, 0, { 0 }, 0, _IO_pos_BAD, \

852 0 }

	)

857 
	#_IO_va_°¨t
(
¨gs
, 
œ°
Ë
	`va_°¨t
◊rgs,Üa°)

	)

859 
_IO_Áke_°diobuf
 
_IO_°dö_buf
, 
_IO_°dout_buf
, 
_IO_°dîr_buf
;

862 
	#COERCE_FILE
(
FILE
Ë

	)

865 
	#COERCE_FILE
(
FILE
) \

866 (((
FILE
)->
_IO_fûe_Êags
 & 
_IO_MAGIC_MASK
Ë=
_OLD_MAGIC_MASK
 \

867 && (
FILE
Ë*(FILE**)&((*)
Â
)[1])

	)

870 #ifde‡
EINVAL


871 
	#MAYBE_SET_EINVAL
 
	`__£t_î∫o
 (
EINVAL
)

	)

873 
	#MAYBE_SET_EINVAL


	)

876 #ifde‡
IO_DEBUG


877 
	#CHECK_FILE
(
FILE
, 
RET
) \

878 i‡((
FILE
Ë=
NULL
Ë{ 
MAYBE_SET_EINVAL
;  
RET
; } \

879 { 
	`COERCE_FILE
(
FILE
); \

880 i‡(((
FILE
)->
_IO_fûe_Êags
 & 
_IO_MAGIC_MASK
Ë!
_IO_MAGIC
) \

881 { 
MAYBE_SET_EINVAL
;  
RET
; }}

	)

883 
	#CHECK_FILE
(
FILE
, 
RET
Ë
	`COERCE_FILE
 (FILE)

	)

886 
ölöe
 

887 
__©åibuã__
 ((
__Æways_ölöe__
))

888 
_IO_acquúe_lock_f˘
 (
_IO_FILE
 **
p
)

890 
_IO_FILE
 *
	gÂ
 = *
p
;

891 i‡((
	gÂ
->
	g_Êags
 & 
	g_IO_USER_LOCK
) == 0)

892 
_IO_fu∆ockfûe
 (
Â
);

895 
ölöe
 

896 
__©åibuã__
 ((
__Æways_ölöe__
))

897 
_IO_acquúe_lock_˛ór_Êags2_f˘
 (
_IO_FILE
 **
p
)

899 
_IO_FILE
 *
	gÂ
 = *
p
;

900 
	gÂ
->
	g_Êags2
 &~(
_IO_FLAGS2_FORTIFY
 | 
_IO_FLAGS2_SCANF_STD
);

901 i‡((
	gÂ
->
	g_Êags
 & 
	g_IO_USER_LOCK
) == 0)

902 
_IO_fu∆ockfûe
 (
Â
);

905 #i‡!
deföed
 
_IO_MTSAFE_IO
 && !deföed 
NOT_IN_libc


906 
	#_IO_acquúe_lock
(
_Â
) \

908 
_IO_FILE
 *
_IO_acquúe_lock_fûe
 = 
NULL


	)

909 
	#_IO_acquúe_lock_˛ór_Êags2
(
_Â
) \

911 
_IO_FILE
 *
_IO_acquúe_lock_fûe
 = (
_Â
)

	)

912 
	#_IO_ªÀa£_lock
(
_Â
) \

913 i‡(
_IO_acquúe_lock_fûe
 !
NULL
) \

914 
_IO_acquúe_lock_fûe
->
_Êags2
 &~(
_IO_FLAGS2_FORTIFY
 \

915 | 
_IO_FLAGS2_SCANF_STD
); \

916 } 0)

	)

	@../test-skeleton.c

20 
	~<as£π.h
>

21 
	~<î∫o.h
>

22 
	~<f˙é.h
>

23 
	~<gë›t.h
>

24 
	~<mÆloc.h
>

25 
	~<∑ths.h
>

26 
	~<£¨ch.h
>

27 
	~<sig«l.h
>

28 
	~<°dio.h
>

29 
	~<°dlib.h
>

30 
	~<°rög.h
>

31 
	~<uni°d.h
>

32 
	~<sys/ªsour˚.h
>

33 
	~<sys/waô.h
>

34 
	~<sys/∑øm.h
>

35 
	~<time.h
>

40 #i‚de‡
TEST_FUNCTION


41 
	#TEST_FUNCTION
 
	`do_ã°
 (
¨gc
, 
¨gv
)

	)

44 #i‚de‡
TEST_DATA_LIMIT


45 
	#TEST_DATA_LIMIT
 (64 << 20Ë

	)

48 
	#OPT_DIRECT
 1000

	)

49 
	#OPT_TESTDIR
 1001

	)

51 
›ti⁄
 
	g›ti⁄s
[] =

53 #ifde‡
CMDLINE_OPTIONS


54 
CMDLINE_OPTIONS


56 { "dúe˘", 
no_¨gumít
, 
NULL
, 
OPT_DIRECT
 },

57 { "ã°-dú", 
ªquúed_¨gumít
, 
NULL
, 
OPT_TESTDIR
 },

58 { 
NULL
, 0, NULL, 0 }

62 
pid_t
 
	gpid
;

65 c⁄° *
	gã°_dú
;

68 
	sãmp_«me_li°


70 
qñem
 
	mq
;

71 c⁄° *
	m«me
;

72 } *
	gãmp_«me_li°
;

76 
__©åibuã__
 ((
unu£d
))

77 
	$add_ãmp_fûe
 (c⁄° *
«me
)

79 
ãmp_«me_li°
 *
√wp


80 (
ãmp_«me_li°
 *Ë
	`ˇŒoc
 ( (*
√wp
), 1);

81 i‡(
√wp
 !
NULL
)

83 
√wp
->
«me
 =Çame;

84 i‡(
ãmp_«me_li°
 =
NULL
)

85 
ãmp_«me_li°
 = (ãmp_«me_li° *Ë&
√wp
->
q
;

87 
	`ösque
 (
√wp
, 
ãmp_«me_li°
);

89 
	}
}

93 
	$dñëe_ãmp_fûes
 ()

95 
ãmp_«me_li°
 !
NULL
)

97 
	`ªmove
 (
ãmp_«me_li°
->
«me
);

98 
ãmp_«me_li°
 = (ãmp_«me_li° *Ëãmp_«me_li°->
q
.
q_f‹w
;

100 
	}
}

104 
__©åibuã__
 ((
unu£d
))

105 
	$¸óã_ãmp_fûe
 (c⁄° *
ba£
, **
fûíame
)

107 *
‚ame
;

108 
fd
;

110 
‚ame
 = (*Ë
	`mÆloc
 (
	`°æí
 (
ã°_dú
Ë+ 1 + såÀ¿(
ba£
)

112 i‡(
‚ame
 =
NULL
)

114 
	`puts
 ("out of memory");

117 
	`°r˝y
 (
	`°p˝y
 (°p˝y (°p˝y (
‚ame
, 
ã°_dú
), "/"), 
ba£
), "XXXXXX");

119 
fd
 = 
	`mk°emp
 (
‚ame
);

120 i‡(
fd
 == -1)

122 
	`¥ötf
 ("ˇ¬Ÿ o≥¿ãmp‹¨y fûê'%s': %m\n", 
‚ame
);

123 
	`‰ì
 (
‚ame
);

127 
	`add_ãmp_fûe
 (
‚ame
);

128 i‡(
fûíame
 !
NULL
)

129 *
fûíame
 = 
‚ame
;

131  
fd
;

132 
	}
}

136 
__©åibuã__
 ((
n‹ëu∫
))

137 
sig«l_h™dÀr
 (
sig
 
__©åibuã__
 ((
unu£d
)))

139 
	gkûÀd
;

140 
	g°©us
;

142 
as£π
 (
pid
 > 1);

144 
kûl
 (-
pid
, 
SIGKILL
);

146 
kûl
 (
pid
, 
SIGKILL
);

149 
	gi
;

150 
	gi
 = 0; i < 5; ++i)

152 
	gkûÀd
 = 
waôpid
 (
pid
, &
°©us
, 
WNOHANG
|
WUNTRACED
);

153 i‡(
	gkûÀd
 != 0)

160 
time•ec
 
	gts
;

161 
	gts
.
	gtv_£c
 = 0;

162 
	gts
.
	gtv_n£c
 = 100000000;

163 
«no¶ìp
 (&
ts
, 
NULL
);

165 i‡(
	gkûÀd
 !0 && 
kûÀd
 !
pid
)

167 
¥ötf
 ("FailedÅo killÅestÖrocess: %m\n");

168 
exô
 (1);

171 #ifde‡
CLEANUP_HANDLER


172 
	gCLEANUP_HANDLER
;

175 i‡(
	gsig
 =
SIGINT
)

177 
sig«l
 (
sig
, 
SIG_DFL
);

178 
øi£
 (
sig
);

182 #ifde‡
EXPECTED_SIGNAL


183 i‡(
	gEXPECTED_SIGNAL
 =
SIGALRM
)

184 
exô
 (0);

187 i‡(
	gkûÀd
 =0 || (
WIFSIGNALED
 (
°©us
Ë&& 
WTERMSIG
 (°©usË=
SIGKILL
))

188 
puts
 ("Timed out: killedÅhe childÖrocess");

189 i‡(
WIFSTOPPED
 (
°©us
))

190 
¥ötf
 ("Timed out:Åhe childÖrocess was %s\n",

191 
°rsig«l
 (
WSTOPSIG
 (
°©us
)));

192 i‡(
WIFSIGNALED
 (
°©us
))

193 
¥ötf
 ("Timed out:Åhe childÖrocess got signal %s\n",

194 
°rsig«l
 (
WTERMSIG
 (
°©us
)));

196 
¥ötf
 ("Timed out: killedÅhe childÖrocess but itÉxited %d\n",

197 
WEXITSTATUS
 (
°©us
));

200 
exô
 (1);

206 
__©åibuã__
 ((
unu£d
))

207 
£t_f‹tify_h™dÀr
 ((*
h™dÀr
Ë(
sig
))

209 
siga˘i⁄
 
ß
;

211 
ß
.
ß_h™dÀr
 = 
h™dÀr
;

212 
ß
.
ß_Êags
 = 0;

213 
	`sigem±y£t
 (&
ß
.
ß_mask
);

215 
	`siga˘i⁄
 (
SIGABRT
, &
ß
, 
NULL
);

218 
fd
 = 
	`›í
 (
_PATH_DEVNULL
, 
O_WRONLY
);

219 i‡(
fd
 == -1)

220 
	`˛o£
 (
STDERR_FILENO
);

223 
	`dup2
 (
fd
, 
STDERR_FILENO
);

224 
	`˛o£
 (
fd
);

226 
	`£ãnv
 ("LIBC_FATAL_STDERR_", "1", 1);

227 
	}
}

231 
	$maö
 (
¨gc
, *
¨gv
[])

233 
dúe˘
 = 0;

234 
°©us
;

235 
›t
;

236 
timeoutÁ˘‹
 = 1;

237 
pid_t
 
ãrmpid
;

240 
	`mÆl›t
 (
M_PERTURB
, 42);

242 #ifde‡
STDOUT_UNBUFFERED


243 
	`£tbuf
 (
°dout
, 
NULL
);

246 (
›t
 = 
	`gë›t_l⁄g
 (
¨gc
, 
¨gv
, "+", 
›ti⁄s
, 
NULL
)) != -1)

247 
›t
)

250 
	`exô
 (1);

251 
OPT_DIRECT
:

252 
dúe˘
 = 1;

254 
OPT_TESTDIR
:

255 
ã°_dú
 = 
›èrg
;

257 #ifde‡
CMDLINE_PROCESS


258 
CMDLINE_PROCESS


264 *
ív°r_timeoutÁ˘‹
 = 
	`gëív
 ("TIMEOUTFACTOR");

265 i‡(
ív°r_timeoutÁ˘‹
 !
NULL
)

267 *
ív°r_c⁄v
 = 
ív°r_timeoutÁ˘‹
;

268 
ív_Á˘
;

270 
ív_Á˘
 = 
	`°πoul
 (
ív°r_timeoutÁ˘‹
, &
ív°r_c⁄v
, 0);

271 i‡(*
ív°r_c⁄v
 ='\0' &&Énv°r_c⁄v !
ív°r_timeoutÁ˘‹
)

272 
timeoutÁ˘‹
 = 
	`MAX
 (
ív_Á˘
, 1);

276 i‡(
ã°_dú
 !
NULL
)

278 
	`£ãnv
 ("TMPDIR", 
ã°_dú
, 1);

280 i‡(
	`chdú
 (
ã°_dú
) < 0)

282 
	`¥ötf
 ("chdir: %m\n");

283 
	`exô
 (1);

288 
ã°_dú
 = 
	`gëív
 ("TMPDIR");

289 i‡(
ã°_dú
 =
NULL
 ||Åest_dir[0] == '\0')

290 
ã°_dú
 = "/tmp";

294 
	`£tvbuf
 (
°dout
, 
NULL
, 
_IONBF
, 0);

297 
	`©exô
 (
dñëe_ãmp_fûes
);

300 
¨gv
[
›töd
 - 1] =árgv[0];

301 
¨gv
 +
›töd
 - 1;

302 
¨gc
 -
›töd
 - 1;

305 #ifde‡
PREPARE


306 
	`PREPARE
 (
¨gc
, 
¨gv
);

310 i‡(
dúe˘
)

311  
TEST_FUNCTION
;

318 
pid
 = 
	`f‹k
 ();

319 i‡(
pid
 == 0)

322 #ifde‡
RLIMIT_CORE


324 
æimô
 
c‹e_limô
;

325 
c‹e_limô
.
æim_cur
 = 0;

326 
c‹e_limô
.
æim_max
 = 0;

327 
	`£ålimô
 (
RLIMIT_CORE
, &
c‹e_limô
);

330 #ifde‡
RLIMIT_DATA


332 
æimô
 
d©a_limô
;

333 i‡(
	`gëæimô
 (
RLIMIT_DATA
, &
d©a_limô
) == 0)

335 i‡(
TEST_DATA_LIMIT
 =
RLIM_INFINITY
)

336 
d©a_limô
.
æim_cur
 = d©a_limô.
æim_max
;

337 i‡(
d©a_limô
.
æim_cur
 > (
æim_t
Ë
TEST_DATA_LIMIT
)

338 
d©a_limô
.
æim_cur
 = 
	`MIN
 ((
æim_t
Ë
TEST_DATA_LIMIT
,

339 
d©a_limô
.
æim_max
);

340 i‡(
	`£ålimô
 (
RLIMIT_DATA
, &
d©a_limô
) < 0)

341 
	`¥ötf
 ("setrlimit: RLIMIT_DATA: %m\n");

344 
	`¥ötf
 ("getrlimit: RLIMIT_DATA: %m\n");

349 i‡(
	`£çgid
 (0, 0) != 0)

350 
	`¥ötf
 ("FailedÅo setÅheÖrocess group ID: %m\n");

353 
	`exô
 (
TEST_FUNCTION
);

355 i‡(
pid
 < 0)

357 
	`¥ötf
 ("Cannot forkÅestÖrogram: %m\n");

358 
	`exô
 (1);

362 #i‚de‡
TIMEOUT


364 
	#TIMEOUT
 2

	)

366 
	`sig«l
 (
SIGALRM
, 
sig«l_h™dÀr
);

367 
	`Æ¨m
 (
TIMEOUT
 * 
timeoutÁ˘‹
);

370 
	`sig«l
 (
SIGINT
, 
sig«l_h™dÀr
);

373 
ãrmpid
 = 
	`TEMP_FAILURE_RETRY
 (
	`waôpid
 (
pid
, &
°©us
, 0));

374 i‡(
ãrmpid
 == -1)

376 
	`¥ötf
 ("Waiting forÅestÖrogram failed: %m\n");

377 
	`exô
 (1);

379 i‡(
ãrmpid
 !
pid
)

381 
	`¥ötf
 ("Oops, wrongÅestÖrogramÅerminated:Éxpected %ld, got %ld\n",

382 (Ë
pid
, (Ë
ãrmpid
);

383 
	`exô
 (1);

386 #i‚de‡
EXPECTED_SIGNAL


388 
	#EXPECTED_SIGNAL
 0

	)

390 i‡(
	`WTERMSIG
 (
°©us
Ë!
EXPECTED_SIGNAL
)

392 i‡(
EXPECTED_SIGNAL
 != 0)

394 i‡(
	`WTERMSIG
 (
°©us
) == 0)

395 
	`¥ötf
 ("Expected signal '%s' from child, gotÇone\n",

396 
	`°rsig«l
 (
EXPECTED_SIGNAL
));

398 
	`¥ötf
 ("Incorrect signal from child: got `%s',Çeed `%s'\n",

399 
	`°rsig«l
 (
	`WTERMSIG
 (
°©us
)),

400 
	`°rsig«l
 (
EXPECTED_SIGNAL
));

403 
	`¥ötf
 ("Didn'tÉxpect signal from child: got `%s'\n",

404 
	`°rsig«l
 (
	`WTERMSIG
 (
°©us
)));

405 
	`exô
 (1);

409 #i‚de‡
EXPECTED_STATUS


410  
	`WEXITSTATUS
 (
°©us
);

412 i‡(
	`WEXITSTATUS
 (
°©us
Ë!
EXPECTED_STATUS
)

414 
	`¥ötf
 ("Expected status %d, got %d\n",

415 
EXPECTED_STATUS
, 
	`WEXITSTATUS
 (
°©us
));

416 
	`exô
 (1);

421 
	}
}

	@../version.h

3 
	#RELEASE
 "°abÀ"

	)

4 
	#VERSION
 "2.20"

	)

	@/usr/include/argp.h

22 #i‚de‡
_ARGP_H


23 
	#_ARGP_H


	)

25 
	~<°dio.h
>

26 
	~<˘y≥.h
>

27 
	~<gë›t.h
>

28 
	~<limôs.h
>

30 
	#__√ed_îr‹_t


	)

31 
	~<î∫o.h
>

33 #i‚de‡
__c⁄°


34 
	#__c⁄°
 c⁄°

	)

37 #i‚de‡
__THROW


38 
	#__THROW


	)

40 #i‚de‡
__NTH


41 
	#__NTH
(
f˘
Ëf˘ 
__THROW


	)

44 #i‚de‡
__©åibuã__


46 #i‡
__GNUC__
 < 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 < 5Ë|| 
__STRICT_ANSI__


47 
	#__©åibuã__
(
S≥c
Ë

	)

51 #i‡
__GNUC__
 < 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 < 7Ë|| 
__STRICT_ANSI__


52 
	#__f‹m©__
 
f‹m©


	)

53 
	#__¥ötf__
 
¥ötf


	)

59 #i‚de‡
__ª°ri˘


60 #i‡! (2 < 
__GNUC__
 || (2 =__GNUC__ && 95 <
__GNUC_MINOR__
))

61 #i‡
deföed
 
ª°ri˘
 || 199901L <
__STDC_VERSION__


62 
	#__ª°ri˘
 
ª°ri˘


	)

64 
	#__ª°ri˘


	)

69 #i‚de‡
__îr‹_t_deföed


70 
	tîr‹_t
;

71 
	#__îr‹_t_deföed


	)

74 #ifde‡ 
__˝lu•lus


83 
	s¨gp_›ti⁄


87 
__c⁄°
 *
«me
;

91 
key
;

95 
__c⁄°
 *
¨g
;

98 
Êags
;

104 
__c⁄°
 *
doc
;

113 
group
;

117 
	#OPTION_ARG_OPTIONAL
 0x1

	)

120 
	#OPTION_HIDDEN
 0x2

	)

125 
	#OPTION_ALIAS
 0x4

	)

137 
	#OPTION_DOC
 0x8

	)

146 
	#OPTION_NO_USAGE
 0x10

	)

148 
¨gp
;

149 
¨gp_°©e
;

150 
¨gp_chûd
;

153 
îr‹_t
 (*
	t¨gp_∑r£r_t
Ë(
	t__key
, *
	t__¨g
,

154 
	t¨gp_°©e
 *
	t__°©e
);

161 
	#ARGP_ERR_UNKNOWN
 
E2BIG


	)

189 
	#ARGP_KEY_ARG
 0

	)

195 
	#ARGP_KEY_ARGS
 0x1000006

	)

197 
	#ARGP_KEY_END
 0x1000001

	)

203 
	#ARGP_KEY_NO_ARGS
 0x1000002

	)

207 
	#ARGP_KEY_INIT
 0x1000003

	)

209 
	#ARGP_KEY_FINI
 0x1000007

	)

212 
	#ARGP_KEY_SUCCESS
 0x1000004

	)

214 
	#ARGP_KEY_ERROR
 0x1000005

	)

222 
	s¨gp


226 
__c⁄°
 
¨gp_›ti⁄
 *
›ti⁄s
;

235 
¨gp_∑r£r_t
 
∑r£r
;

242 
__c⁄°
 *
¨gs_doc
;

247 
__c⁄°
 *
doc
;

255 
__c⁄°
 
¨gp_chûd
 *
chûdªn
;

267 *(*
hñp_fûãr
Ë(
__key
, 
__c⁄°
 *
__ãxt
, *
__öput
);

272 c⁄° *
¨gp_domaö
;

276 
	#ARGP_KEY_HELP_PRE_DOC
 0x2000001

	)

277 
	#ARGP_KEY_HELP_POST_DOC
 0x2000002

	)

278 
	#ARGP_KEY_HELP_HEADER
 0x2000003

	)

279 
	#ARGP_KEY_HELP_EXTRA
 0x2000004

	)

283 
	#ARGP_KEY_HELP_DUP_ARGS_NOTE
 0x2000005

	)

284 
	#ARGP_KEY_HELP_ARGS_DOC
 0x2000006

	)

288 
	s¨gp_chûd


291 
__c⁄°
 
¨gp
 *argp;

294 
Êags
;

300 
__c⁄°
 *
hódî
;

308 
group
;

313 
	s¨gp_°©e


316 
__c⁄°
 
¨gp
 *
roŸ_¨gp
;

319 
¨gc
;

320 **
¨gv
;

323 
√xt
;

326 
Êags
;

332 
¨g_num
;

337 
quŸed
;

340 *
öput
;

343 **
chûd_öputs
;

346 *
hook
;

350 *
«me
;

353 
FILE
 *
îr_°ªam
;

354 
FILE
 *
out_°ªam
;

356 *
p°©e
;

366 
	#ARGP_PARSE_ARGV0
 0x01

	)

372 
	#ARGP_NO_ERRS
 0x02

	)

384 
	#ARGP_NO_ARGS
 0x04

	)

388 
	#ARGP_IN_ORDER
 0x08

	)

392 
	#ARGP_NO_HELP
 0x10

	)

395 
	#ARGP_NO_EXIT
 0x20

	)

398 
	#ARGP_LONG_ONLY
 0x40

	)

401 
	#ARGP_SILENT
 (
ARGP_NO_EXIT
 | 
ARGP_NO_ERRS
 | 
ARGP_NO_HELP
)

	)

410 
îr‹_t
 
¨gp_∑r£
 (
__c⁄°
 
¨gp
 *
__ª°ri˘
 
__¨gp
,

411 
__¨gc
, **
__ª°ri˘
 
__¨gv
,

412 
__Êags
, *
__ª°ri˘
 
__¨g_ödex
,

413 *
__ª°ri˘
 
__öput
);

414 
îr‹_t
 
__¨gp_∑r£
 (
__c⁄°
 
¨gp
 *
__ª°ri˘
 
__¨gp
,

415 
__¨gc
, **
__ª°ri˘
 
__¨gv
,

416 
__Êags
, *
__ª°ri˘
 
__¨g_ödex
,

417 *
__ª°ri˘
 
__öput
);

425 
__c⁄°
 *
¨gp_¥ogøm_vîsi⁄
;

432 (*
¨gp_¥ogøm_vîsi⁄_hook
Ë(
FILE
 *
__ª°ri˘
 
__°ªam
,

433 
¨gp_°©e
 *
__ª°ri˘


434 
__°©e
);

441 
__c⁄°
 *
¨gp_¥ogøm_bug_addªss
;

446 
îr‹_t
 
¨gp_îr_exô_°©us
;

449 
	#ARGP_HELP_USAGE
 0x01

	)

450 
	#ARGP_HELP_SHORT_USAGE
 0x02

	)

451 
	#ARGP_HELP_SEE
 0x04

	)

452 
	#ARGP_HELP_LONG
 0x08

	)

453 
	#ARGP_HELP_PRE_DOC
 0x10

	)

454 
	#ARGP_HELP_POST_DOC
 0x20

	)

455 
	#ARGP_HELP_DOC
 (
ARGP_HELP_PRE_DOC
 | 
ARGP_HELP_POST_DOC
)

	)

456 
	#ARGP_HELP_BUG_ADDR
 0x40

	)

457 
	#ARGP_HELP_LONG_ONLY
 0x80

	)

461 
	#ARGP_HELP_EXIT_ERR
 0x100

	)

462 
	#ARGP_HELP_EXIT_OK
 0x200

	)

466 
	#ARGP_HELP_STD_ERR
 \

467 (
ARGP_HELP_SEE
 | 
ARGP_HELP_EXIT_ERR
)

	)

470 
	#ARGP_HELP_STD_USAGE
 \

471 (
ARGP_HELP_SHORT_USAGE
 | 
ARGP_HELP_SEE
 | 
ARGP_HELP_EXIT_ERR
)

	)

473 
	#ARGP_HELP_STD_HELP
 \

474 (
ARGP_HELP_SHORT_USAGE
 | 
ARGP_HELP_LONG
 | 
ARGP_HELP_EXIT_OK
 \

475 | 
ARGP_HELP_DOC
 | 
ARGP_HELP_BUG_ADDR
)

	)

479 
¨gp_hñp
 (
__c⁄°
 
¨gp
 *
__ª°ri˘
 
__¨gp
,

480 
FILE
 *
__ª°ri˘
 
__°ªam
,

481 
__Êags
, *
__ª°ri˘
 
__«me
);

482 
__¨gp_hñp
 (
__c⁄°
 
¨gp
 *
__ª°ri˘
 
__¨gp
,

483 
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êags
,

484 *
__«me
);

496 
¨gp_°©e_hñp
 (
__c⁄°
 
¨gp_°©e
 *
__ª°ri˘
 
__°©e
,

497 
FILE
 *
__ª°ri˘
 
__°ªam
,

498 
__Êags
);

499 
__¨gp_°©e_hñp
 (
__c⁄°
 
¨gp_°©e
 *
__ª°ri˘
 
__°©e
,

500 
FILE
 *
__ª°ri˘
 
__°ªam
,

501 
__Êags
);

504 
¨gp_ußge
 (
__c⁄°
 
¨gp_°©e
 *
__°©e
);

505 
__¨gp_ußge
 (
__c⁄°
 
¨gp_°©e
 *
__°©e
);

510 
¨gp_îr‹
 (
__c⁄°
 
¨gp_°©e
 *
__ª°ri˘
 
__°©e
,

511 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

512 
__©åibuã__
 ((
__f‹m©__
 (
__¥ötf__
, 2, 3)));

513 
__¨gp_îr‹
 (
__c⁄°
 
¨gp_°©e
 *
__ª°ri˘
 
__°©e
,

514 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

515 
__©åibuã__
 ((
__f‹m©__
 (
__¥ötf__
, 2, 3)));

525 
¨gp_Áûuª
 (
__c⁄°
 
¨gp_°©e
 *
__ª°ri˘
 
__°©e
,

526 
__°©us
, 
__î∫um
,

527 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

528 
__©åibuã__
 ((
__f‹m©__
 (
__¥ötf__
, 4, 5)));

529 
__¨gp_Áûuª
 (
__c⁄°
 
¨gp_°©e
 *
__ª°ri˘
 
__°©e
,

530 
__°©us
, 
__î∫um
,

531 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

532 
__©åibuã__
 ((
__f‹m©__
 (
__¥ötf__
, 4, 5)));

535 
_›ti⁄_is_sh‹t
 (
__c⁄°
 
¨gp_›ti⁄
 *
__›t
Ë
__THROW
;

536 
__›ti⁄_is_sh‹t
 (
__c⁄°
 
¨gp_›ti⁄
 *
__›t
Ë
__THROW
;

540 
_›ti⁄_is_íd
 (
__c⁄°
 
¨gp_›ti⁄
 *
__›t
Ë
__THROW
;

541 
__›ti⁄_is_íd
 (
__c⁄°
 
¨gp_›ti⁄
 *
__›t
Ë
__THROW
;

545 *
_¨gp_öput
 (
__c⁄°
 
¨gp
 *
__ª°ri˘
 
__¨gp
,

546 
__c⁄°
 
¨gp_°©e
 *
__ª°ri˘
 
__°©e
)

547 
__THROW
;

548 *
__¨gp_öput
 (
__c⁄°
 
¨gp
 *
__ª°ri˘
 
__¨gp
,

549 
__c⁄°
 
¨gp_°©e
 *
__ª°ri˘
 
__°©e
)

550 
__THROW
;

552 #ifde‡
__USE_EXTERN_INLINES


554 #i‡!
_LIBC


555 
	#__¨gp_ußge
 
¨gp_ußge


	)

556 
	#__¨gp_°©e_hñp
 
¨gp_°©e_hñp


	)

557 
	#__›ti⁄_is_sh‹t
 
_›ti⁄_is_sh‹t


	)

558 
	#__›ti⁄_is_íd
 
_›ti⁄_is_íd


	)

561 #i‚de‡
ARGP_EI


562 
	#ARGP_EI
 
__exã∫_ölöe


	)

565 
ARGP_EI
 

566 
__¨gp_ußge
 (
__c⁄°
 
¨gp_°©e
 *
__°©e
)

568 
__¨gp_°©e_hñp
 (
__°©e
, 
°dîr
, 
ARGP_HELP_STD_USAGE
);

571 
ARGP_EI
 

572 
__NTH
 (
__›ti⁄_is_sh‹t
 (
__c⁄°
 
¨gp_›ti⁄
 *
__›t
))

574 i‡(
	g__›t
->
	gÊags
 & 
	gOPTION_DOC
)

578 
	g__key
 = 
__›t
->
key
;

579  
	g__key
 > 0 && __key <
UCHAR_MAX
 && 
i•röt
 (
__key
);

583 
ARGP_EI
 

584 
__NTH
 (
__›ti⁄_is_íd
 (
__c⁄°
 
¨gp_›ti⁄
 *
__›t
))

586  !
	g__›t
->
	gkey
 && !__›t->
	g«me
 && !__›t->
	gdoc
 && !__›t->
	ggroup
;

589 #i‡!
_LIBC


590 #unde‡
__¨gp_ußge


591 #unde‡
__¨gp_°©e_hñp


592 #unde‡
__›ti⁄_is_sh‹t


593 #unde‡
__›ti⁄_is_íd


597 #ifde‡ 
__˝lu•lus


	@/usr/include/assert.h

24 #ifdef 
_ASSERT_H


26 #unde‡
_ASSERT_H


27 #unde‡
as£π


28 #unde‡
__ASSERT_VOID_CAST


30 #ifdef 
__USE_GNU


31 #unde‡
as£π_≥º‹


36 
	#_ASSERT_H
 1

	)

37 
	~<„©uªs.h
>

39 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,95)

40 
	#__ASSERT_VOID_CAST
 
°©ic_ˇ°
<>

	)

42 
	#__ASSERT_VOID_CAST
 ()

	)

50 #ifdef 
NDEBUG


52 
	#as£π
(
ex¥
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

60 #ifdef 
__USE_GNU


61 
	#as£π_≥º‹
(
î∫um
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

66 #i‚de‡
_ASSERT_H_DECLS


67 
	#_ASSERT_H_DECLS


	)

68 
__BEGIN_DECLS


71 
	$__as£π_Áû
 (
__c⁄°
 *
__as£πi⁄
, __c⁄° *
__fûe
,

72 
__löe
, 
__c⁄°
 *
__fun˘i⁄
)

73 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

76 
	$__as£π_≥º‹_Áû
 (
__î∫um
, 
__c⁄°
 *
__fûe
,

77 
__löe
,

78 
__c⁄°
 *
__fun˘i⁄
)

79 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

84 
	$__as£π
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
, 
__löe
)

85 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

88 
__END_DECLS


91 
	#as£π
(
ex¥
) \

92 ((
ex¥
) \

93 ? 
	`__ASSERT_VOID_CAST
 (0) \

94 : 
	`__as£π_Áû
 (
	`__STRING
(
ex¥
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

96 #ifdef 
__USE_GNU


97 
	#as£π_≥º‹
(
î∫um
) \

98 (!(
î∫um
) \

99 ? 
	`__ASSERT_VOID_CAST
 (0) \

100 : 
	`__as£π_≥º‹_Áû
 ((
î∫um
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

108 #i‡
deföed
 
__˝lu•lus
 ? 
	`__GNUC_PREREQ
 (2, 6) : __GNUC_PREREQ (2, 4)

109 
	#__ASSERT_FUNCTION
 
__PRETTY_FUNCTION__


	)

111 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

112 
	#__ASSERT_FUNCTION
 
__func__


	)

114 
	#__ASSERT_FUNCTION
 ((
__c⁄°
 *Ë0)

	)

	@/usr/include/dlfcn.h

20 #i‚def 
_DLFCN_H


21 
	#_DLFCN_H
 1

	)

23 
	~<„©uªs.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

28 
	~<bôs/dlf˙.h
>

31 #ifde‡
__USE_GNU


36 
	#RTLD_NEXT
 ((*Ë-1l)

	)

41 
	#RTLD_DEFAULT
 ((*Ë0)

	)

45 
	tLmid_t
;

48 
	#LM_ID_BASE
 0

	)

49 
	#LM_ID_NEWLM
 -1

	)

53 
__BEGIN_DECLS


57 *
	$dl›í
 (
__c⁄°
 *
__fûe
, 
__mode
Ë
__THROW
;

61 
	$dl˛o£
 (*
__h™dÀ
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

65 *
	$dlsym
 (*
__ª°ri˘
 
__h™dÀ
,

66 
__c⁄°
 *
__ª°ri˘
 
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

68 #ifde‡
__USE_GNU


70 *
	$dlm›í
 (
Lmid_t
 
__nsid
, 
__c⁄°
 *
__fûe
, 
__mode
Ë
__THROW
;

74 *
	$dlvsym
 (*
__ª°ri˘
 
__h™dÀ
,

75 
__c⁄°
 *
__ª°ri˘
 
__«me
,

76 
__c⁄°
 *
__ª°ri˘
 
__vîsi⁄
)

77 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

83 *
	$dÀº‹
 (Ë
__THROW
;

86 #ifde‡
__USE_GNU


91 
__c⁄°
 *
dli_‚ame
;

92 *
dli_fba£
;

93 
__c⁄°
 *
dli_¢ame
;

94 *
dli_ßddr
;

95 } 
	tDl_öfo
;

99 
	$dœddr
 (
__c⁄°
 *
__addªss
, 
Dl_öfo
 *
__öfo
)

100 
__THROW
 
	`__n⁄nuŒ
 ((2));

103 
	$dœddr1
 (
__c⁄°
 *
__addªss
, 
Dl_öfo
 *
__öfo
,

104 **
__exåa_öfo
, 
__Êags
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

112 
RTLD_DL_SYMENT
 = 1,

115 
RTLD_DL_LINKMAP
 = 2

124 
	$dlöfo
 (*
__ª°ri˘
 
__h™dÀ
,

125 
__ªque°
, *
__ª°ri˘
 
__¨g
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

132 
RTLD_DI_LMID
 = 1,

136 
RTLD_DI_LINKMAP
 = 2,

138 
RTLD_DI_CONFIGADDR
 = 3,

145 
RTLD_DI_SERINFO
 = 4,

146 
RTLD_DI_SERINFOSIZE
 = 5,

150 
RTLD_DI_ORIGIN
 = 6,

152 
RTLD_DI_PROFILENAME
 = 7,

153 
RTLD_DI_PROFILEOUT
 = 8,

158 
RTLD_DI_TLS_MODID
 = 9,

164 
RTLD_DI_TLS_DATA
 = 10,

166 
RTLD_DI_MAX
 = 10

174 *
dls_«me
;

175 
dls_Êags
;

176 } 
	tDl_£Ω©h
;

182 
size_t
 
dls_size
;

183 
dls_˙t
;

184 
Dl_£Ω©h
 
dls_£Ω©h
[1];

185 } 
	tDl_£röfo
;

189 
__END_DECLS


	@/usr/include/errno.h

23 #i‚def 
_ERRNO_H


27 #i‚def 
__√ed_Em©h


28 
	#_ERRNO_H
 1

	)

29 
	~<„©uªs.h
>

32 
	g__BEGIN_DECLS


36 
	~<bôs/î∫o.h
>

37 #unde‡
__√ed_Em©h


39 #ifdef 
_ERRNO_H


46 #i‚def 
î∫o


47 
î∫o
;

50 #ifde‡
__USE_GNU


55 *
¥ogøm_övoˇti⁄_«me
, *
¥ogøm_övoˇti⁄_sh‹t_«me
;

59 
	g__END_DECLS


67 #i‡
deföed
 
__USE_GNU
 || deföed 
__√ed_îr‹_t


68 #i‚de‡
__îr‹_t_deföed


69 
	tîr‹_t
;

70 
	#__îr‹_t_deföed
 1

	)

72 #unde‡
__√ed_îr‹_t


	@/usr/include/error.h

20 #i‚de‡
_ERROR_H


21 
	#_ERROR_H
 1

	)

23 
	~<„©uªs.h
>

26 
__BEGIN_DECLS


32 
	$îr‹
 (
__°©us
, 
__î∫um
, 
__c⁄°
 *
__f‹m©
, ...)

33 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

35 
	$îr‹_©_löe
 (
__°©us
, 
__î∫um
, 
__c⁄°
 *
__‚ame
,

36 
__löío
, 
__c⁄°
 *
__f‹m©
, ...)

37 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 5, 6)));

42 (*
îr‹_¥öt_¥og«me
) ();

45 
îr‹_mesßge_cou¡
;

49 
îr‹_⁄e_≥r_löe
;

52 #i‡
deföed
 
__exã∫_Æways_ölöe
 && deföed 
__va_¨g_∑ck


53 
	~<bôs/îr‹.h
>

56 
__END_DECLS


	@/usr/include/fcntl.h

24 #i‚def 
_FCNTL_H


25 
	#_FCNTL_H
 1

	)

27 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 
	~<bôs/f˙é.h
>

37 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


38 
	~<bôs/ty≥s.h
>

39 
	#__√ed_time•ec


	)

40 
	~<time.h
>

41 
	~<bôs/°©.h
>

43 
	#S_IFMT
 
__S_IFMT


	)

44 
	#S_IFDIR
 
__S_IFDIR


	)

45 
	#S_IFCHR
 
__S_IFCHR


	)

46 
	#S_IFBLK
 
__S_IFBLK


	)

47 
	#S_IFREG
 
__S_IFREG


	)

48 #ifde‡
__S_IFIFO


49 
	#S_IFIFO
 
__S_IFIFO


	)

51 #ifde‡
__S_IFLNK


52 
	#S_IFLNK
 
__S_IFLNK


	)

54 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
Ë&& deföed 
__S_IFSOCK


55 
	#S_IFSOCK
 
__S_IFSOCK


	)

60 
	#S_ISUID
 
__S_ISUID


	)

61 
	#S_ISGID
 
__S_ISGID


	)

63 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


65 
	#S_ISVTX
 
__S_ISVTX


	)

68 
	#S_IRUSR
 
__S_IREAD


	)

69 
	#S_IWUSR
 
__S_IWRITE


	)

70 
	#S_IXUSR
 
__S_IEXEC


	)

72 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

74 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

75 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

76 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

78 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

80 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

81 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

82 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

84 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

87 #ifdef 
__USE_MISC


88 #i‚de‡
R_OK


91 
	#R_OK
 4

	)

92 
	#W_OK
 2

	)

93 
	#X_OK
 1

	)

94 
	#F_OK
 0

	)

99 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


100 
	#SEEK_SET
 0

	)

101 
	#SEEK_CUR
 1

	)

102 
	#SEEK_END
 2

	)

110 
f˙é
 (
__fd
, 
__cmd
, ...);

118 #i‚de‡
__USE_FILE_OFFSET64


119 
	$›í
 (
__c⁄°
 *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

121 #ifde‡
__REDIRECT


122 
	`__REDIRECT
 (
›í
, (
__c⁄°
 *
__fûe
, 
__oÊag
, ...), 
›í64
)

123 
	`__n⁄nuŒ
 ((1));

125 
	#›í
 
›í64


	)

128 #ifde‡
__USE_LARGEFILE64


129 
	$›í64
 (
__c⁄°
 *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

132 #ifde‡
__USE_ATFILE


142 #i‚de‡
__USE_FILE_OFFSET64


143 
	$›í©
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
, ...)

144 
	`__n⁄nuŒ
 ((2));

146 #ifde‡
__REDIRECT


147 
	`__REDIRECT
 (
›í©
, (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
,

148 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

150 
	#›í©
 
›í©64


	)

153 #ifde‡
__USE_LARGEFILE64


154 
	$›í©64
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
, ...)

155 
	`__n⁄nuŒ
 ((2));

164 #i‚de‡
__USE_FILE_OFFSET64


165 
	$¸ót
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

167 #ifde‡
__REDIRECT


168 
	`__REDIRECT
 (
¸ót
, (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
),

169 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

171 
	#¸ót
 
¸ót64


	)

174 #ifde‡
__USE_LARGEFILE64


175 
	$¸ót64
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

178 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

179 && !
deföed
 
__USE_POSIX
))

188 
	#F_ULOCK
 0

	)

189 
	#F_LOCK
 1

	)

190 
	#F_TLOCK
 2

	)

191 
	#F_TEST
 3

	)

193 #i‚de‡
__USE_FILE_OFFSET64


194 
	`lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
);

196 #ifde‡
__REDIRECT


197 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

199 
	#lockf
 
lockf64


	)

202 #ifde‡
__USE_LARGEFILE64


203 
	`lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
);

207 #ifde‡
__USE_XOPEN2K


210 #i‚de‡
__USE_FILE_OFFSET64


211 
	$posix_Ádvi£
 (
__fd
, 
__off_t
 
__off£t
, __off_à
__Àn
,

212 
__advi£
Ë
__THROW
;

214 #ifde‡
__REDIRECT_NTH


215 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

216 
__off64_t
 
__Àn
, 
__advi£
),

217 
posix_Ádvi£64
);

219 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

222 #ifde‡
__USE_LARGEFILE64


223 
	$posix_Ádvi£64
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__Àn
,

224 
__advi£
Ë
__THROW
;

232 #i‚de‡
__USE_FILE_OFFSET64


233 
	`posix_ÁŒoˇã
 (
__fd
, 
__off_t
 
__off£t
, __off_à
__Àn
);

235 #ifde‡
__REDIRECT


236 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

237 
__off64_t
 
__Àn
),

238 
posix_ÁŒoˇã64
);

240 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

243 #ifde‡
__USE_LARGEFILE64


244 
	`posix_ÁŒoˇã64
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__Àn
);

250 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe
 \

251 && 
deföed
 
__va_¨g_∑ck_Àn


252 
	~<bôs/f˙é2.h
>

255 
__END_DECLS


	@/usr/include/features.h

20 #i‚def 
_FEATURES_H


21 
	#_FEATURES_H
 1

	)

98 #unde‡
__USE_ISOC99


99 #unde‡
__USE_ISOC95


100 #unde‡
__USE_POSIX


101 #unde‡
__USE_POSIX2


102 #unde‡
__USE_POSIX199309


103 #unde‡
__USE_POSIX199506


104 #unde‡
__USE_XOPEN


105 #unde‡
__USE_XOPEN_EXTENDED


106 #unde‡
__USE_UNIX98


107 #unde‡
__USE_XOPEN2K


108 #unde‡
__USE_XOPEN2KXSI


109 #unde‡
__USE_XOPEN2K8


110 #unde‡
__USE_XOPEN2K8XSI


111 #unde‡
__USE_LARGEFILE


112 #unde‡
__USE_LARGEFILE64


113 #unde‡
__USE_FILE_OFFSET64


114 #unde‡
__USE_BSD


115 #unde‡
__USE_SVID


116 #unde‡
__USE_MISC


117 #unde‡
__USE_ATFILE


118 #unde‡
__USE_GNU


119 #unde‡
__USE_REENTRANT


120 #unde‡
__USE_FORTIFY_LEVEL


121 #unde‡
__FAVOR_BSD


122 #unde‡
__KERNEL_STRICT_NAMES


126 #i‚de‡
_LOOSE_KERNEL_NAMES


127 
	#__KERNEL_STRICT_NAMES


	)

131 
	#__USE_ANSI
 1

	)

140 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


141 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

142 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

144 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

149 #i‡
deföed
 
_BSD_SOURCE
 && \

150 !(
deföed
 
	g_POSIX_SOURCE
 || deföed 
	g_POSIX_C_SOURCE
 || \

151 
deföed
 
	g_XOPEN_SOURCE
 || deföed 
	g_GNU_SOURCE
 || deföed 
	g_SVID_SOURCE
)

152 
	#__FAVOR_BSD
 1

	)

156 #ifde‡
_GNU_SOURCE


157 #unde‡
_ISOC95_SOURCE


158 
	#_ISOC95_SOURCE
 1

	)

159 #unde‡
_ISOC99_SOURCE


160 
	#_ISOC99_SOURCE
 1

	)

161 #unde‡
_POSIX_SOURCE


162 
	#_POSIX_SOURCE
 1

	)

163 #unde‡
_POSIX_C_SOURCE


164 
	#_POSIX_C_SOURCE
 200809L

	)

165 #unde‡
_XOPEN_SOURCE


166 
	#_XOPEN_SOURCE
 700

	)

167 #unde‡
_XOPEN_SOURCE_EXTENDED


168 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

169 #unde‡
_LARGEFILE64_SOURCE


170 
	#_LARGEFILE64_SOURCE
 1

	)

171 #unde‡
_BSD_SOURCE


172 
	#_BSD_SOURCE
 1

	)

173 #unde‡
_SVID_SOURCE


174 
	#_SVID_SOURCE
 1

	)

175 #unde‡
_ATFILE_SOURCE


176 
	#_ATFILE_SOURCE
 1

	)

181 #i‡(!
deföed
 
__STRICT_ANSI__
 && !deföed 
_ISOC99_SOURCE
 && \

182 !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 && \

183 !
deföed
 
	g_XOPEN_SOURCE
 && !deföed 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
)

184 
	#_BSD_SOURCE
 1

	)

185 
	#_SVID_SOURCE
 1

	)

192 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

193 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

194 
	#__USE_ISOC99
 1

	)

198 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

199 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

200 
	#__USE_ISOC95
 1

	)

205 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

206 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

207 
	#_POSIX_SOURCE
 1

	)

208 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

209 
	#_POSIX_C_SOURCE
 2

	)

210 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

211 
	#_POSIX_C_SOURCE
 199506L

	)

212 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

213 
	#_POSIX_C_SOURCE
 200112L

	)

215 
	#_POSIX_C_SOURCE
 200809L

	)

217 
	#__USE_POSIX_IMPLICITLY
 1

	)

220 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


221 
	#__USE_POSIX
 1

	)

224 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


225 
	#__USE_POSIX2
 1

	)

228 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

229 
	#__USE_POSIX199309
 1

	)

232 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

233 
	#__USE_POSIX199506
 1

	)

236 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

237 
	#__USE_XOPEN2K
 1

	)

238 #unde‡
__USE_ISOC95


239 
	#__USE_ISOC95
 1

	)

240 #unde‡
__USE_ISOC99


241 
	#__USE_ISOC99
 1

	)

244 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

245 
	#__USE_XOPEN2K8
 1

	)

246 #unde‡
_ATFILE_SOURCE


247 
	#_ATFILE_SOURCE
 1

	)

250 #ifdef 
_XOPEN_SOURCE


251 
	#__USE_XOPEN
 1

	)

252 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

253 
	#__USE_XOPEN_EXTENDED
 1

	)

254 
	#__USE_UNIX98
 1

	)

255 #unde‡
_LARGEFILE_SOURCE


256 
	#_LARGEFILE_SOURCE
 1

	)

257 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

258 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

259 
	#__USE_XOPEN2K8
 1

	)

260 
	#__USE_XOPEN2K8XSI
 1

	)

262 
	#__USE_XOPEN2K
 1

	)

263 
	#__USE_XOPEN2KXSI
 1

	)

264 #unde‡
__USE_ISOC95


265 
	#__USE_ISOC95
 1

	)

266 #unde‡
__USE_ISOC99


267 
	#__USE_ISOC99
 1

	)

270 #ifde‡
_XOPEN_SOURCE_EXTENDED


271 
	#__USE_XOPEN_EXTENDED
 1

	)

276 #ifde‡
_LARGEFILE_SOURCE


277 
	#__USE_LARGEFILE
 1

	)

280 #ifde‡
_LARGEFILE64_SOURCE


281 
	#__USE_LARGEFILE64
 1

	)

284 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

285 
	#__USE_FILE_OFFSET64
 1

	)

288 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


289 
	#__USE_MISC
 1

	)

292 #ifdef 
_BSD_SOURCE


293 
	#__USE_BSD
 1

	)

296 #ifdef 
_SVID_SOURCE


297 
	#__USE_SVID
 1

	)

300 #ifdef 
_ATFILE_SOURCE


301 
	#__USE_ATFILE
 1

	)

304 #ifdef 
_GNU_SOURCE


305 
	#__USE_GNU
 1

	)

308 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


309 
	#__USE_REENTRANT
 1

	)

312 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

313 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

314 #i‡
_FORTIFY_SOURCE
 > 1

315 
	#__USE_FORTIFY_LEVEL
 2

	)

317 
	#__USE_FORTIFY_LEVEL
 1

	)

320 
	#__USE_FORTIFY_LEVEL
 0

	)

324 
	~<bôs/¥edefs.h
>

327 
	#__STDC_ISO_10646__
 200009L

	)

335 #unde‡
__GNU_LIBRARY__


336 
	#__GNU_LIBRARY__
 6

	)

340 
	#__GLIBC__
 2

	)

341 
	#__GLIBC_MINOR__
 15

	)

343 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

344 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

347 #i‡
deföed
 
__GNUC__
 \

348 || (
deföed
 
	g__PGI
 && deföed 
	g__i386__
 ) \

349 || (
deföed
 
	g__INTEL_COMPILER
 && (deföed 
	g__i386__
 || deföed 
	g__ü64__
)) \

350 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L)

351 
	#__GLIBC_HAVE_LONG_LONG
 1

	)

355 #i‚de‡
__ASSEMBLER__


356 #i‚de‡
_SYS_CDEFS_H


357 
	~<sys/cdefs.h
>

362 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


363 
	#__USE_LARGEFILE
 1

	)

364 
	#__USE_LARGEFILE64
 1

	)

370 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

371 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

372 && 
deföed
 
	g__exã∫_ölöe


373 
	#__USE_EXTERN_INLINES
 1

	)

378 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

379 && (
deföed
 
	g_LIBC
 || !deföed 
	g__OPTIMIZE_SIZE__
Ë&& !deföed 
	g__NO_INLINE__
 \

380 && 
deföed
 
	g__exã∫_ölöe


381 
	#__USE_EXTERN_INLINES_IN_LIBC
 1

	)

389 
	~<gnu/°ubs.h
>

	@/usr/include/getopt.h

21 #i‚de‡
_GETOPT_H


23 #i‚de‡
__√ed_gë›t


24 
	#_GETOPT_H
 1

	)

34 #i‡!
deföed
 
__GNU_LIBRARY__


35 
	~<˘y≥.h
>

38 #i‚de‡
__THROW


39 #i‚de‡
__GNUC_PREREQ


40 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

42 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

43 
	#__THROW
 
	`throw
 ()

	)

45 
	#__THROW


	)

49 #ifdef 
__˝lu•lus


59 *
›èrg
;

73 
›töd
;

78 
›ãº
;

82 
›t›t
;

84 #i‚de‡
__√ed_gë›t


106 
	s›ti⁄


108 c⁄° *
	g«me
;

111 
	ghas_¨g
;

112 *
	gÊag
;

113 
	gvÆ
;

118 
	#no_¨gumít
 0

	)

119 
	#ªquúed_¨gumít
 1

	)

120 
	#›ti⁄Æ_¨gumít
 2

	)

148 #ifde‡
__GNU_LIBRARY__


152 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

153 
__THROW
;

155 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

156 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


160 #ifde‡
__REDIRECT


161 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

162 c⁄° *
__sh‹t›ts
),

163 
__posix_gë›t
);

165 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

166 c⁄° *
__sh‹t›ts
Ë
__THROW
;

167 
	#gë›t
 
__posix_gë›t


	)

171 
gë›t
 ();

174 #i‚de‡
__√ed_gë›t


175 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

176 c⁄° *
__sh‹t›ts
,

177 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

178 
__THROW
;

179 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

180 c⁄° *
__sh‹t›ts
,

181 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

182 
__THROW
;

186 #ifdef 
__˝lu•lus


191 #unde‡
__√ed_gë›t


	@/usr/include/gnu-versions.h

20 #i‚de‡
_GNU_VERSIONS_H


21 
	#_GNU_VERSIONS_H
 1

	)

47 
	#_GNU_OBSTACK_INTERFACE_VERSION
 1

	)

48 
	#_GNU_REGEX_INTERFACE_VERSION
 1

	)

49 
	#_GNU_GLOB_INTERFACE_VERSION
 1

	)

50 
	#_GNU_GETOPT_INTERFACE_VERSION
 2

	)

	@/usr/include/inttypes.h

23 #i‚de‡
_INTTYPES_H


24 
	#_INTTYPES_H
 1

	)

26 
	~<„©uªs.h
>

28 
	~<°döt.h
>

31 #i‚de‡
____gwch¨_t_deföed


32 #ifde‡
__˝lu•lus


33 
	#__gwch¨_t
 
wch¨_t


	)

34 #ñi‡
deföed
 
__WCHAR_TYPE__


35 
__WCHAR_TYPE__
 
	t__gwch¨_t
;

37 
	#__√ed_wch¨_t


	)

38 
	~<°ddef.h
>

39 
wch¨_t
 
	t__gwch¨_t
;

41 
	#____gwch¨_t_deföed
 1

	)

47 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_FORMAT_MACROS


49 #i‡
__WORDSIZE
 == 64

50 
	#__PRI64_PREFIX
 "l"

	)

51 
	#__PRIPTR_PREFIX
 "l"

	)

53 
	#__PRI64_PREFIX
 "Œ"

	)

54 
	#__PRIPTR_PREFIX


	)

60 
	#PRId8
 "d"

	)

61 
	#PRId16
 "d"

	)

62 
	#PRId32
 "d"

	)

63 
	#PRId64
 
__PRI64_PREFIX
 "d"

	)

65 
	#PRIdLEAST8
 "d"

	)

66 
	#PRIdLEAST16
 "d"

	)

67 
	#PRIdLEAST32
 "d"

	)

68 
	#PRIdLEAST64
 
__PRI64_PREFIX
 "d"

	)

70 
	#PRIdFAST8
 "d"

	)

71 
	#PRIdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

72 
	#PRIdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

73 
	#PRIdFAST64
 
__PRI64_PREFIX
 "d"

	)

76 
	#PRIi8
 "i"

	)

77 
	#PRIi16
 "i"

	)

78 
	#PRIi32
 "i"

	)

79 
	#PRIi64
 
__PRI64_PREFIX
 "i"

	)

81 
	#PRIiLEAST8
 "i"

	)

82 
	#PRIiLEAST16
 "i"

	)

83 
	#PRIiLEAST32
 "i"

	)

84 
	#PRIiLEAST64
 
__PRI64_PREFIX
 "i"

	)

86 
	#PRIiFAST8
 "i"

	)

87 
	#PRIiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

88 
	#PRIiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

89 
	#PRIiFAST64
 
__PRI64_PREFIX
 "i"

	)

92 
	#PRIo8
 "o"

	)

93 
	#PRIo16
 "o"

	)

94 
	#PRIo32
 "o"

	)

95 
	#PRIo64
 
__PRI64_PREFIX
 "o"

	)

97 
	#PRIoLEAST8
 "o"

	)

98 
	#PRIoLEAST16
 "o"

	)

99 
	#PRIoLEAST32
 "o"

	)

100 
	#PRIoLEAST64
 
__PRI64_PREFIX
 "o"

	)

102 
	#PRIoFAST8
 "o"

	)

103 
	#PRIoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

104 
	#PRIoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

105 
	#PRIoFAST64
 
__PRI64_PREFIX
 "o"

	)

108 
	#PRIu8
 "u"

	)

109 
	#PRIu16
 "u"

	)

110 
	#PRIu32
 "u"

	)

111 
	#PRIu64
 
__PRI64_PREFIX
 "u"

	)

113 
	#PRIuLEAST8
 "u"

	)

114 
	#PRIuLEAST16
 "u"

	)

115 
	#PRIuLEAST32
 "u"

	)

116 
	#PRIuLEAST64
 
__PRI64_PREFIX
 "u"

	)

118 
	#PRIuFAST8
 "u"

	)

119 
	#PRIuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

120 
	#PRIuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

121 
	#PRIuFAST64
 
__PRI64_PREFIX
 "u"

	)

124 
	#PRIx8
 "x"

	)

125 
	#PRIx16
 "x"

	)

126 
	#PRIx32
 "x"

	)

127 
	#PRIx64
 
__PRI64_PREFIX
 "x"

	)

129 
	#PRIxLEAST8
 "x"

	)

130 
	#PRIxLEAST16
 "x"

	)

131 
	#PRIxLEAST32
 "x"

	)

132 
	#PRIxLEAST64
 
__PRI64_PREFIX
 "x"

	)

134 
	#PRIxFAST8
 "x"

	)

135 
	#PRIxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

136 
	#PRIxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

137 
	#PRIxFAST64
 
__PRI64_PREFIX
 "x"

	)

140 
	#PRIX8
 "X"

	)

141 
	#PRIX16
 "X"

	)

142 
	#PRIX32
 "X"

	)

143 
	#PRIX64
 
__PRI64_PREFIX
 "X"

	)

145 
	#PRIXLEAST8
 "X"

	)

146 
	#PRIXLEAST16
 "X"

	)

147 
	#PRIXLEAST32
 "X"

	)

148 
	#PRIXLEAST64
 
__PRI64_PREFIX
 "X"

	)

150 
	#PRIXFAST8
 "X"

	)

151 
	#PRIXFAST16
 
__PRIPTR_PREFIX
 "X"

	)

152 
	#PRIXFAST32
 
__PRIPTR_PREFIX
 "X"

	)

153 
	#PRIXFAST64
 
__PRI64_PREFIX
 "X"

	)

157 
	#PRIdMAX
 
__PRI64_PREFIX
 "d"

	)

158 
	#PRIiMAX
 
__PRI64_PREFIX
 "i"

	)

159 
	#PRIoMAX
 
__PRI64_PREFIX
 "o"

	)

160 
	#PRIuMAX
 
__PRI64_PREFIX
 "u"

	)

161 
	#PRIxMAX
 
__PRI64_PREFIX
 "x"

	)

162 
	#PRIXMAX
 
__PRI64_PREFIX
 "X"

	)

166 
	#PRIdPTR
 
__PRIPTR_PREFIX
 "d"

	)

167 
	#PRIiPTR
 
__PRIPTR_PREFIX
 "i"

	)

168 
	#PRIoPTR
 
__PRIPTR_PREFIX
 "o"

	)

169 
	#PRIuPTR
 
__PRIPTR_PREFIX
 "u"

	)

170 
	#PRIxPTR
 
__PRIPTR_PREFIX
 "x"

	)

171 
	#PRIXPTR
 
__PRIPTR_PREFIX
 "X"

	)

177 
	#SCNd8
 "hhd"

	)

178 
	#SCNd16
 "hd"

	)

179 
	#SCNd32
 "d"

	)

180 
	#SCNd64
 
__PRI64_PREFIX
 "d"

	)

182 
	#SCNdLEAST8
 "hhd"

	)

183 
	#SCNdLEAST16
 "hd"

	)

184 
	#SCNdLEAST32
 "d"

	)

185 
	#SCNdLEAST64
 
__PRI64_PREFIX
 "d"

	)

187 
	#SCNdFAST8
 "hhd"

	)

188 
	#SCNdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

189 
	#SCNdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

190 
	#SCNdFAST64
 
__PRI64_PREFIX
 "d"

	)

193 
	#SCNi8
 "hhi"

	)

194 
	#SCNi16
 "hi"

	)

195 
	#SCNi32
 "i"

	)

196 
	#SCNi64
 
__PRI64_PREFIX
 "i"

	)

198 
	#SCNiLEAST8
 "hhi"

	)

199 
	#SCNiLEAST16
 "hi"

	)

200 
	#SCNiLEAST32
 "i"

	)

201 
	#SCNiLEAST64
 
__PRI64_PREFIX
 "i"

	)

203 
	#SCNiFAST8
 "hhi"

	)

204 
	#SCNiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

205 
	#SCNiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

206 
	#SCNiFAST64
 
__PRI64_PREFIX
 "i"

	)

209 
	#SCNu8
 "hhu"

	)

210 
	#SCNu16
 "hu"

	)

211 
	#SCNu32
 "u"

	)

212 
	#SCNu64
 
__PRI64_PREFIX
 "u"

	)

214 
	#SCNuLEAST8
 "hhu"

	)

215 
	#SCNuLEAST16
 "hu"

	)

216 
	#SCNuLEAST32
 "u"

	)

217 
	#SCNuLEAST64
 
__PRI64_PREFIX
 "u"

	)

219 
	#SCNuFAST8
 "hhu"

	)

220 
	#SCNuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

221 
	#SCNuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

222 
	#SCNuFAST64
 
__PRI64_PREFIX
 "u"

	)

225 
	#SCNo8
 "hho"

	)

226 
	#SCNo16
 "ho"

	)

227 
	#SCNo32
 "o"

	)

228 
	#SCNo64
 
__PRI64_PREFIX
 "o"

	)

230 
	#SCNoLEAST8
 "hho"

	)

231 
	#SCNoLEAST16
 "ho"

	)

232 
	#SCNoLEAST32
 "o"

	)

233 
	#SCNoLEAST64
 
__PRI64_PREFIX
 "o"

	)

235 
	#SCNoFAST8
 "hho"

	)

236 
	#SCNoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

237 
	#SCNoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

238 
	#SCNoFAST64
 
__PRI64_PREFIX
 "o"

	)

241 
	#SCNx8
 "hhx"

	)

242 
	#SCNx16
 "hx"

	)

243 
	#SCNx32
 "x"

	)

244 
	#SCNx64
 
__PRI64_PREFIX
 "x"

	)

246 
	#SCNxLEAST8
 "hhx"

	)

247 
	#SCNxLEAST16
 "hx"

	)

248 
	#SCNxLEAST32
 "x"

	)

249 
	#SCNxLEAST64
 
__PRI64_PREFIX
 "x"

	)

251 
	#SCNxFAST8
 "hhx"

	)

252 
	#SCNxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

253 
	#SCNxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

254 
	#SCNxFAST64
 
__PRI64_PREFIX
 "x"

	)

258 
	#SCNdMAX
 
__PRI64_PREFIX
 "d"

	)

259 
	#SCNiMAX
 
__PRI64_PREFIX
 "i"

	)

260 
	#SCNoMAX
 
__PRI64_PREFIX
 "o"

	)

261 
	#SCNuMAX
 
__PRI64_PREFIX
 "u"

	)

262 
	#SCNxMAX
 
__PRI64_PREFIX
 "x"

	)

265 
	#SCNdPTR
 
__PRIPTR_PREFIX
 "d"

	)

266 
	#SCNiPTR
 
__PRIPTR_PREFIX
 "i"

	)

267 
	#SCNoPTR
 
__PRIPTR_PREFIX
 "o"

	)

268 
	#SCNuPTR
 
__PRIPTR_PREFIX
 "u"

	)

269 
	#SCNxPTR
 
__PRIPTR_PREFIX
 "x"

	)

274 
	g__BEGIN_DECLS


276 #i‡
__WORDSIZE
 == 64

281 
	mquŸ
;

282 
	mªm
;

283 } 
	timaxdiv_t
;

290 
	mquŸ
;

291 
	mªm
;

292 } 
	timaxdiv_t
;

298 
ötmax_t
 
	$imaxabs
 (
ötmax_t
 
__n
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

301 
imaxdiv_t
 
	$imaxdiv
 (
ötmax_t
 
__numî
, i¡max_à
__díom
)

302 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

305 
ötmax_t
 
	$°πoimax
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

306 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

309 
uötmax_t
 
	$°πoumax
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

310 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

313 
ötmax_t
 
	$wc°oimax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

314 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

315 
__THROW
;

318 
uötmax_t
 
	$wc°oumax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

319 
__gwch¨_t
 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
)

320 
__THROW
;

322 #ifde‡
__USE_EXTERN_INLINES


324 #i‡
__WORDSIZE
 == 64

326 
	$__°πﬁ_öã∫Æ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

327 **
__ª°ri˘
 
__íd±r
,

328 
__ba£
, 
__group
)

329 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

331 
__exã∫_ölöe
 
ötmax_t


332 
	`__NTH
 (
	$°πoimax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

333 
ba£
))

335  
	`__°πﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

336 
	}
}

338 
	$__°πoul_öã∫Æ
 (
__c⁄°
 *

339 
__ª°ri˘
 
__≈å
,

340 ** 
__ª°ri˘
 
__íd±r
,

341 
__ba£
, 
__group
)

342 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

344 
__exã∫_ölöe
 
uötmax_t


345 
	`__NTH
 (
	$°πoumax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

346 
ba£
))

348  
	`__°πoul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

349 
	}
}

351 
	$__wc°ﬁ_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 * 
__ª°ri˘
 
__≈å
,

352 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

353 
__ba£
, 
__group
)

354 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

356 
__exã∫_ölöe
 
ötmax_t


357 
	`__NTH
 (
	$wc°oimax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

358 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

360  
	`__wc°ﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

361 
	}
}

363 
	$__wc°oul_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 *

364 
__ª°ri˘
 
__≈å
,

365 
__gwch¨_t
 **

366 
__ª°ri˘
 
__íd±r
,

367 
__ba£
, 
__group
)

368 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

370 
__exã∫_ölöe
 
uötmax_t


371 
	`__NTH
 (
	$wc°oumax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

372 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

374  
	`__wc°oul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

375 
	}
}

379 
__exãnsi⁄__


380 
	$__°πﬁl_öã∫Æ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

381 **
__ª°ri˘
 
__íd±r
,

382 
__ba£
, 
__group
)

383 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

385 
__exã∫_ölöe
 
ötmax_t


386 
	`__NTH
 (
	$°πoimax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

387 
ba£
))

389  
	`__°πﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

390 
	}
}

392 
__exãnsi⁄__


393 
	$__°πouŒ_öã∫Æ
 (
__c⁄°
 *

394 
__ª°ri˘
 
__≈å
,

396 
__ª°ri˘
 
__íd±r
,

397 
__ba£
,

398 
__group
)

399 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

401 
__exã∫_ölöe
 
uötmax_t


402 
	`__NTH
 (
	$°πoumax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

403 
ba£
))

405  
	`__°πouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

406 
	}
}

408 
__exãnsi⁄__


409 
	$__wc°ﬁl_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 *

410 
__ª°ri˘
 
__≈å
,

411 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

412 
__ba£
, 
__group
)

413 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

415 
__exã∫_ölöe
 
ötmax_t


416 
	`__NTH
 (
	$wc°oimax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

417 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

419  
	`__wc°ﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

420 
	}
}

423 
__exãnsi⁄__


424 
	$__wc°ouŒ_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 *

425 
__ª°ri˘
 
__≈å
,

426 
__gwch¨_t
 **

427 
__ª°ri˘
 
__íd±r
,

428 
__ba£
,

429 
__group
)

430 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

432 
__exã∫_ölöe
 
uötmax_t


433 
	`__NTH
 (
	$wc°oumax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

434 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

436  
	`__wc°ouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

437 
	}
}

442 
	g__END_DECLS


	@/usr/include/libintl.h

21 #i‚de‡
_LIBINTL_H


22 
	#_LIBINTL_H
 1

	)

24 
	~<„©uªs.h
>

28 
	#__USE_GNU_GETTEXT
 1

	)

32 
	#__GNU_GETTEXT_SUPPORTED_REVISION
(
maj‹
) \

33 ((
maj‹
Ë=0 ? 1 : -1)

	)

35 
__BEGIN_DECLS


40 *
	$gëãxt
 (
__c⁄°
 *
__msgid
)

41 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (1);

45 *
	$dgëãxt
 (
__c⁄°
 *
__domaö«me
, __c⁄° *
__msgid
)

46 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (2);

47 *
	$__dgëãxt
 (
__c⁄°
 *
__domaö«me
, __c⁄° *
__msgid
)

48 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (2);

52 *
	$dcgëãxt
 (
__c⁄°
 *
__domaö«me
,

53 
__c⁄°
 *
__msgid
, 
__ˇãg‹y
)

54 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (2);

55 *
	$__dcgëãxt
 (
__c⁄°
 *
__domaö«me
,

56 
__c⁄°
 *
__msgid
, 
__ˇãg‹y
)

57 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (2);

62 *
	$ngëãxt
 (
__c⁄°
 *
__msgid1
, __c⁄° *
__msgid2
,

63 
__n
)

64 
__THROW
 
	$__©åibuã_f‹m©_¨g__
 (1Ë
	`__©åibuã_f‹m©_¨g__
 (2);

68 *
	$dngëãxt
 (
__c⁄°
 *
__domaö«me
, __c⁄° *
__msgid1
,

69 
__c⁄°
 *
__msgid2
, 
__n
)

70 
__THROW
 
	$__©åibuã_f‹m©_¨g__
 (2Ë
	`__©åibuã_f‹m©_¨g__
 (3);

74 *
	$d˙gëãxt
 (
__c⁄°
 *
__domaö«me
, __c⁄° *
__msgid1
,

75 
__c⁄°
 *
__msgid2
, 
__n
,

76 
__ˇãg‹y
)

77 
__THROW
 
	$__©åibuã_f‹m©_¨g__
 (2Ë
	`__©åibuã_f‹m©_¨g__
 (3);

83 *
	$ãxtdomaö
 (
__c⁄°
 *
__domaö«me
Ë
__THROW
;

87 *
	$bödãxtdomaö
 (
__c⁄°
 *
__domaö«me
,

88 
__c⁄°
 *
__dú«me
Ë
__THROW
;

92 *
	$böd_ãxtdomaö_code£t
 (
__c⁄°
 *
__domaö«me
,

93 
__c⁄°
 *
__code£t
Ë
__THROW
;

97 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


100 
	#__√ed_NULL


	)

101 
	~<°ddef.h
>

104 
	~<loˇÀ.h
>

110 
	#gëãxt
(
msgid
Ë
	`dgëãxt
 (
NULL
, msgid)

	)

112 
	#dgëãxt
(
domaö«me
, 
msgid
) \

113 
	`dcgëãxt
 (
domaö«me
, 
msgid
, 
LC_MESSAGES
)

	)

115 
	#ngëãxt
(
msgid1
, 
msgid2
, 
n
Ë
	`dngëãxt
 (
NULL
, msgid1, msgid2,Ç)

	)

117 
	#dngëãxt
(
domaö«me
, 
msgid1
, 
msgid2
, 
n
) \

118 
	`d˙gëãxt
 (
domaö«me
, 
msgid1
, 
msgid2
, 
n
, 
LC_MESSAGES
)

	)

122 
__END_DECLS


	@/usr/include/limits.h

24 #i‚de‡
_LIBC_LIMITS_H_


25 
	#_LIBC_LIMITS_H_
 1

	)

27 
	~<„©uªs.h
>

33 
	#MB_LEN_MAX
 16

	)

38 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

43 #i‚de‡
_LIMITS_H


44 
	#_LIMITS_H
 1

	)

46 
	~<bôs/w‹dsize.h
>

55 
	#CHAR_BIT
 8

	)

58 
	#SCHAR_MIN
 (-128)

	)

59 
	#SCHAR_MAX
 127

	)

62 
	#UCHAR_MAX
 255

	)

65 #ifde‡
__CHAR_UNSIGNED__


66 
	#CHAR_MIN
 0

	)

67 
	#CHAR_MAX
 
UCHAR_MAX


	)

69 
	#CHAR_MIN
 
SCHAR_MIN


	)

70 
	#CHAR_MAX
 
SCHAR_MAX


	)

74 
	#SHRT_MIN
 (-32768)

	)

75 
	#SHRT_MAX
 32767

	)

78 
	#USHRT_MAX
 65535

	)

81 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

82 
	#INT_MAX
 2147483647

	)

85 
	#UINT_MAX
 4294967295U

	)

88 #i‡
__WORDSIZE
 == 64

89 
	#LONG_MAX
 9223372036854775807L

	)

91 
	#LONG_MAX
 2147483647L

	)

93 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

96 #i‡
__WORDSIZE
 == 64

97 
	#ULONG_MAX
 18446744073709551615UL

	)

99 
	#ULONG_MAX
 4294967295UL

	)

102 #ifde‡
__USE_ISOC99


105 
	#LLONG_MAX
 9223372036854775807LL

	)

106 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

109 
	#ULLONG_MAX
 18446744073709551615ULL

	)

123 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


125 #ö˛ude_√xà<
limôs
.
h
>

131 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__


132 #i‚de‡
LLONG_MIN


133 
	#LLONG_MIN
 (-
LLONG_MAX
-1)

	)

135 #i‚de‡
LLONG_MAX


136 
	#LLONG_MAX
 
__LONG_LONG_MAX__


	)

138 #i‚de‡
ULLONG_MAX


139 
	#ULLONG_MAX
 (
LLONG_MAX
 * 2ULL + 1)

	)

143 #ifdef 
__USE_POSIX


145 
	~<bôs/posix1_lim.h
>

148 #ifdef 
__USE_POSIX2


149 
	~<bôs/posix2_lim.h
>

152 #ifdef 
__USE_XOPEN


153 
	~<bôs/x›í_lim.h
>

	@/usr/include/paths.h

32 #i‚de‡
_PATHS_H_


33 
	#_PATHS_H_


	)

36 
	#_PATH_DEFPATH
 "/u§/bö:/bö"

	)

38 
	#_PATH_STDPATH
 \

39 "/u§/bö:/bö:/u§/sbö:/sbö"

	)

41 
	#_PATH_BSHELL
 "/bö/sh"

	)

42 
	#_PATH_CONSOLE
 "/dev/c⁄sﬁe"

	)

43 
	#_PATH_CSHELL
 "/bö/csh"

	)

44 
	#_PATH_DEVDB
 "/v¨/run/dev.db"

	)

45 
	#_PATH_DEVNULL
 "/dev/nuŒ"

	)

46 
	#_PATH_DRUM
 "/dev/drum"

	)

47 
	#_PATH_GSHADOW
 "/ëc/gshadow"

	)

48 
	#_PATH_KLOG
 "/¥oc/kmsg"

	)

49 
	#_PATH_KMEM
 "/dev/kmem"

	)

50 
	#_PATH_LASTLOG
 "/v¨/log/œ°log"

	)

51 
	#_PATH_MAILDIR
 "/v¨/maû"

	)

52 
	#_PATH_MAN
 "/u§/sh¨e/m™"

	)

53 
	#_PATH_MEM
 "/dev/mem"

	)

54 
	#_PATH_MNTTAB
 "/ëc/f°ab"

	)

55 
	#_PATH_MOUNTED
 "/ëc/mèb"

	)

56 
	#_PATH_NOLOGIN
 "/ëc/nﬁogö"

	)

57 
	#_PATH_PRESERVE
 "/v¨/lib"

	)

58 
	#_PATH_RWHODIR
 "/v¨/•oﬁ/rwho"

	)

59 
	#_PATH_SENDMAIL
 "/u§/sbö/£ndmaû"

	)

60 
	#_PATH_SHADOW
 "/ëc/shadow"

	)

61 
	#_PATH_SHELLS
 "/ëc/shñls"

	)

62 
	#_PATH_TTY
 "/dev/ây"

	)

63 
	#_PATH_UNIX
 "/boŸ/vmlöux"

	)

64 
	#_PATH_UTMP
 "/v¨/run/utmp"

	)

65 
	#_PATH_VI
 "/u§/bö/vi"

	)

66 
	#_PATH_WTMP
 "/v¨/log/wtmp"

	)

69 
	#_PATH_DEV
 "/dev/"

	)

70 
	#_PATH_TMP
 "/tmp/"

	)

71 
	#_PATH_VARDB
 "/v¨/lib/misc/"

	)

72 
	#_PATH_VARRUN
 "/v¨/run/"

	)

73 
	#_PATH_VARTMP
 "/v¨/tmp/"

	)

	@/usr/include/search.h

20 #i‚de‡
_SEARCH_H


21 
	#_SEARCH_H
 1

	)

23 
	~<„©uªs.h
>

25 
	#__√ed_size_t


	)

26 
	~<°ddef.h
>

28 
	g__BEGIN_DECLS


30 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


34 #ifde‡
__USE_GNU


35 
	sqñem


37 
qñem
 *
	mq_f‹w
;

38 
qñem
 *
	mq_back
;

39 
	mq_d©a
[1];

45 
	$ösque
 (*
__ñem
, *
__¥ev
Ë
__THROW
;

48 
	$ªmque
 (*
__ñem
Ë
__THROW
;

53 #i‚de‡
__COMPAR_FN_T


54 
	#__COMPAR_FN_T


	)

55 (*
	t__com∑r_‚_t
Ë(
	t__c⁄°
 *, __const *);

57 #ifdef 
__USE_GNU


58 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

65 
FIND
,

66 
ENTER


68 
	tACTION
;

70 
	síåy


72 *
key
;

73 *
d©a
;

75 
	tENTRY
;

78 
_ENTRY
;

88 
ENTRY
 *
	$h£¨ch
 (
ENTRY
 
__ôem
, 
ACTION
 
__a˘i⁄
Ë
__THROW
;

91 
	$h¸óã
 (
size_t
 
__√l
Ë
__THROW
;

94 
	$hde°roy
 (Ë
__THROW
;

96 #ifde‡
__USE_GNU


98 
	sh£¨ch_d©a


100 
_ENTRY
 *
èbÀ
;

101 
size
;

102 
fûÀd
;

107 
	$h£¨ch_r
 (
ENTRY
 
__ôem
, 
ACTION
 
__a˘i⁄
, ENTRY **
__ªtvÆ
,

108 
h£¨ch_d©a
 *
__hèb
Ë
__THROW
;

109 
	$h¸óã_r
 (
size_t
 
__√l
, 
h£¨ch_d©a
 *
__hèb
Ë
__THROW
;

110 
	$hde°roy_r
 (
h£¨ch_d©a
 *
__hèb
Ë
__THROW
;

121 
¥e‹dî
,

122 
po°‹dî
,

123 
íd‹dî
,

124 
Àaf


126 
	tVISIT
;

130 *
	`t£¨ch
 (
__c⁄°
 *
__key
, **
__roŸp
,

131 
__com∑r_‚_t
 
__com∑r
);

135 *
	`tföd
 (
__c⁄°
 *
__key
, *__c⁄° *
__roŸp
,

136 
__com∑r_‚_t
 
__com∑r
);

139 *
	`tdñëe
 (
__c⁄°
 *
__ª°ri˘
 
__key
,

140 **
__ª°ri˘
 
__roŸp
,

141 
__com∑r_‚_t
 
__com∑r
);

143 #i‚de‡
__ACTION_FN_T


144 
	#__ACTION_FN_T


	)

145 (*
	t__a˘i⁄_‚_t
Ë(
	t__c⁄°
 *
	t__nodï
, 
	tVISIT
 
	t__vÆue
,

146 
	t__Àvñ
);

151 
	`twÆk
 (
__c⁄°
 *
__roŸ
, 
__a˘i⁄_‚_t
 
__a˘i⁄
);

153 #ifde‡
__USE_GNU


156 (*
	t__‰ì_‚_t
Ë(*
	t__nodï
);

159 
	`tde°roy
 (*
__roŸ
, 
__‰ì_‚_t
 
__‰ìf˘
);

165 *
	`lföd
 (
__c⁄°
 *
__key
, __c⁄° *
__ba£
,

166 
size_t
 *
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
);

170 *
	`l£¨ch
 (
__c⁄°
 *
__key
, *
__ba£
,

171 
size_t
 *
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
);

173 
__END_DECLS


	@/usr/include/signal.h

23 #i‚def 
_SIGNAL_H


25 #i‡!
deföed
 
__√ed_sig_©omic_t
 && !deföed 
__√ed_sig£t_t


26 
	#_SIGNAL_H


	)

29 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


33 
	~<bôs/sig£t.h
>

37 #i‡
deföed
 
__√ed_sig_©omic_t
 || deföed 
_SIGNAL_H


38 #i‚de‡
__sig_©omic_t_deföed


39 
	#__sig_©omic_t_deföed


	)

40 
__BEGIN_NAMESPACE_STD


41 
__sig_©omic_t
 
	tsig_©omic_t
;

42 
	g__END_NAMESPACE_STD


44 #unde‡
__√ed_sig_©omic_t


47 #i‡
deföed
 
__√ed_sig£t_t
 || (deföed 
_SIGNAL_H
 && deföed 
__USE_POSIX
)

48 #i‚de‡
__sig£t_t_deföed


49 
	#__sig£t_t_deföed


	)

50 
__sig£t_t
 
	tsig£t_t
;

52 #unde‡
__√ed_sig£t_t


55 #ifde‡
_SIGNAL_H


57 
	~<bôs/ty≥s.h
>

58 
	~<bôs/signum.h
>

60 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


61 #i‚de‡
__pid_t_deföed


62 
__pid_t
 
	tpid_t
;

63 
	#__pid_t_deföed


	)

65 #ifde‡
__USE_XOPEN


67 #i‚de‡
__uid_t_deföed


68 
__uid_t
 
	tuid_t
;

69 
	#__uid_t_deföed


	)

73 #ifde‡
__USE_POSIX199309


75 
	#__√ed_time•ec


	)

76 
	~<time.h
>

79 
	~<bôs/sigöfo.h
>

84 (*
	t__sigh™dÀr_t
) ();

89 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

90 
__THROW
;

91 #ifde‡
__USE_GNU


92 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

93 
__THROW
;

99 
__BEGIN_NAMESPACE_STD


100 #ifde‡
__USE_BSD


101 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

102 
__THROW
;

105 #ifde‡
__REDIRECT_NTH


106 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

107 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

108 
__sysv_sig«l
);

110 
	#sig«l
 
__sysv_sig«l


	)

113 
__END_NAMESPACE_STD


115 #ifde‡
__USE_XOPEN


118 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

119 
__THROW
;

125 #ifde‡
__USE_POSIX


126 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

129 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


133 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

136 
__BEGIN_NAMESPACE_STD


138 
	$øi£
 (
__sig
Ë
__THROW
;

139 
__END_NAMESPACE_STD


141 #ifde‡
__USE_SVID


143 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

144 
__THROW
;

145 
	$gsig«l
 (
__sig
Ë
__THROW
;

148 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K


150 
	`psig«l
 (
__sig
, 
__c⁄°
 *
__s
);

153 #ifde‡
__USE_XOPEN2K


155 
	`psigöfo
 (
__c⁄°
 
sigöfo_t
 *
__pöfo
, __c⁄° *
__s
);

168 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

170 #ifde‡
__FAVOR_BSD


173 
	$sig∑u£
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

175 #ifde‡
__USE_XOPEN


176 #ifde‡
__GNUC__


177 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

180 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

186 #ifde‡
__USE_BSD


193 
	#sigmask
(
sig
Ë
	`__sigmask
(sig)

	)

196 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

199 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

202 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

206 #ifde‡
__USE_MISC


207 
	#NSIG
 
_NSIG


	)

210 #ifde‡
__USE_GNU


211 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

215 #ifde‡
__USE_BSD


216 
__sigh™dÀr_t
 
	tsig_t
;

219 #ifde‡
__USE_POSIX


222 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

225 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

228 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

231 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

234 
	$sigismembî
 (
__c⁄°
 
sig£t_t
 *
__£t
, 
__signo
)

235 
__THROW
 
	`__n⁄nuŒ
 ((1));

237 #ifde‡
__USE_GNU


239 
	$sigi£m±y£t
 (
__c⁄°
 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

242 
	$sig™d£t
 (
sig£t_t
 *
__£t
, 
__c⁄°
 sig£t_à*
__À·
,

243 
__c⁄°
 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

246 
	$sig‹£t
 (
sig£t_t
 *
__£t
, 
__c⁄°
 sig£t_à*
__À·
,

247 
__c⁄°
 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

252 
	~<bôs/siga˘i⁄.h
>

255 
	$sig¥ocmask
 (
__how
, 
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

256 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

263 
	$sigsu•íd
 (
__c⁄°
 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

266 
	$siga˘i⁄
 (
__sig
, 
__c⁄°
 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

267 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

270 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

277 
	$sigwaô
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

278 
	`__n⁄nuŒ
 ((1, 2));

280 #ifde‡
__USE_POSIX199309


285 
	$sigwaôöfo
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

286 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

293 
	$sigtimedwaô
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

294 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

295 
__c⁄°
 
time•ec
 *
__ª°ri˘
 
__timeout
)

296 
	`__n⁄nuŒ
 ((1));

300 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, 
__c⁄°
 
sigvÆ
 
__vÆ
)

301 
__THROW
;

306 #ifde‡
__USE_BSD


310 
__c⁄°
 *__c⁄° 
_sys_sigli°
[
_NSIG
];

311 
__c⁄°
 *__c⁄° 
sys_sigli°
[
_NSIG
];

314 
	ssigvec


316 
__sigh™dÀr_t
 
sv_h™dÀr
;

317 
sv_mask
;

319 
sv_Êags
;

320 
	#sv_⁄°ack
 
sv_Êags


	)

324 
	#SV_ONSTACK
 (1 << 0)

	)

325 
	#SV_INTERRUPT
 (1 << 1)

	)

326 
	#SV_RESETHAND
 (1 << 2)

	)

334 
	$sigvec
 (
__sig
, 
__c⁄°
 
sigvec
 *
__vec
,

335 
sigvec
 *
__ovec
Ë
__THROW
;

339 
	~<bôs/sigc⁄ãxt.h
>

342 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

347 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


348 
	#__√ed_size_t


	)

349 
	~<°ddef.h
>

354 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

356 
	~<bôs/sig°ack.h
>

357 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


359 
	~<sys/uc⁄ãxt.h
>

365 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

366 
__THROW
 
__©åibuã_dïªˇãd__
;

370 
	$sigÆt°ack
 (
__c⁄°
 
sigÆt°ack
 *
__ª°ri˘
 
__ss
,

371 
sigÆt°ack
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

375 #ifde‡
__USE_XOPEN_EXTENDED


379 
	$sighﬁd
 (
__sig
Ë
__THROW
;

382 
	$sigªl£
 (
__sig
Ë
__THROW
;

385 
	$sigign‹e
 (
__sig
Ë
__THROW
;

388 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

391 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


394 
	~<bôs/±hªadty≥s.h
>

395 
	~<bôs/sigthªad.h
>

402 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

404 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

408 
__END_DECLS


	@/usr/include/stdint.h

23 #i‚de‡
_STDINT_H


24 
	#_STDINT_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/wch¨.h
>

28 
	~<bôs/w‹dsize.h
>

35 #i‚de‡
__öt8_t_deföed


36 
	#__öt8_t_deföed


	)

37 sig√d 
	töt8_t
;

38 
	töt16_t
;

39 
	töt32_t
;

40 #i‡
__WORDSIZE
 == 64

41 
	töt64_t
;

43 
__exãnsi⁄__


44 
	töt64_t
;

49 
	tuöt8_t
;

50 
	tuöt16_t
;

51 #i‚de‡
__uöt32_t_deföed


52 
	tuöt32_t
;

53 
	#__uöt32_t_deföed


	)

55 #i‡
__WORDSIZE
 == 64

56 
	tuöt64_t
;

58 
__exãnsi⁄__


59 
	tuöt64_t
;

66 sig√d 
	töt_Àa°8_t
;

67 
	töt_Àa°16_t
;

68 
	töt_Àa°32_t
;

69 #i‡
__WORDSIZE
 == 64

70 
	töt_Àa°64_t
;

72 
__exãnsi⁄__


73 
	töt_Àa°64_t
;

77 
	tuöt_Àa°8_t
;

78 
	tuöt_Àa°16_t
;

79 
	tuöt_Àa°32_t
;

80 #i‡
__WORDSIZE
 == 64

81 
	tuöt_Àa°64_t
;

83 
__exãnsi⁄__


84 
	tuöt_Àa°64_t
;

91 sig√d 
	töt_Á°8_t
;

92 #i‡
__WORDSIZE
 == 64

93 
	töt_Á°16_t
;

94 
	töt_Á°32_t
;

95 
	töt_Á°64_t
;

97 
	töt_Á°16_t
;

98 
	töt_Á°32_t
;

99 
__exãnsi⁄__


100 
	töt_Á°64_t
;

104 
	tuöt_Á°8_t
;

105 #i‡
__WORDSIZE
 == 64

106 
	tuöt_Á°16_t
;

107 
	tuöt_Á°32_t
;

108 
	tuöt_Á°64_t
;

110 
	tuöt_Á°16_t
;

111 
	tuöt_Á°32_t
;

112 
__exãnsi⁄__


113 
	tuöt_Á°64_t
;

118 #i‡
__WORDSIZE
 == 64

119 #i‚de‡
__öçå_t_deföed


120 
	töçå_t
;

121 
	#__öçå_t_deföed


	)

123 
	tuöçå_t
;

125 #i‚de‡
__öçå_t_deföed


126 
	töçå_t
;

127 
	#__öçå_t_deföed


	)

129 
	tuöçå_t
;

134 #i‡
__WORDSIZE
 == 64

135 
	tötmax_t
;

136 
	tuötmax_t
;

138 
__exãnsi⁄__


139 
	tötmax_t
;

140 
__exãnsi⁄__


141 
	tuötmax_t
;

147 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_LIMIT_MACROS


149 #i‡
__WORDSIZE
 == 64

150 
	#__INT64_C
(
c
Ë¯## 
L


	)

151 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

153 
	#__INT64_C
(
c
Ë¯## 
LL


	)

154 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

160 
	#INT8_MIN
 (-128)

	)

161 
	#INT16_MIN
 (-32767-1)

	)

162 
	#INT32_MIN
 (-2147483647-1)

	)

163 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

165 
	#INT8_MAX
 (127)

	)

166 
	#INT16_MAX
 (32767)

	)

167 
	#INT32_MAX
 (2147483647)

	)

168 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

171 
	#UINT8_MAX
 (255)

	)

172 
	#UINT16_MAX
 (65535)

	)

173 
	#UINT32_MAX
 (4294967295U)

	)

174 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

178 
	#INT_LEAST8_MIN
 (-128)

	)

179 
	#INT_LEAST16_MIN
 (-32767-1)

	)

180 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

181 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

183 
	#INT_LEAST8_MAX
 (127)

	)

184 
	#INT_LEAST16_MAX
 (32767)

	)

185 
	#INT_LEAST32_MAX
 (2147483647)

	)

186 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

189 
	#UINT_LEAST8_MAX
 (255)

	)

190 
	#UINT_LEAST16_MAX
 (65535)

	)

191 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

192 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

196 
	#INT_FAST8_MIN
 (-128)

	)

197 #i‡
__WORDSIZE
 == 64

198 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

199 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

201 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

202 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

204 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

206 
	#INT_FAST8_MAX
 (127)

	)

207 #i‡
__WORDSIZE
 == 64

208 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

209 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

211 
	#INT_FAST16_MAX
 (2147483647)

	)

212 
	#INT_FAST32_MAX
 (2147483647)

	)

214 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

217 
	#UINT_FAST8_MAX
 (255)

	)

218 #i‡
__WORDSIZE
 == 64

219 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

220 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

222 
	#UINT_FAST16_MAX
 (4294967295U)

	)

223 
	#UINT_FAST32_MAX
 (4294967295U)

	)

225 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

229 #i‡
__WORDSIZE
 == 64

230 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

231 
	#INTPTR_MAX
 (9223372036854775807L)

	)

232 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

234 
	#INTPTR_MIN
 (-2147483647-1)

	)

235 
	#INTPTR_MAX
 (2147483647)

	)

236 
	#UINTPTR_MAX
 (4294967295U)

	)

241 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

243 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

246 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

252 #i‡
__WORDSIZE
 == 64

253 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

254 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

256 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

257 
	#PTRDIFF_MAX
 (2147483647)

	)

261 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

262 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

265 #i‡
__WORDSIZE
 == 64

266 
	#SIZE_MAX
 (18446744073709551615UL)

	)

268 
	#SIZE_MAX
 (4294967295U)

	)

272 #i‚de‡
WCHAR_MIN


274 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

275 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

279 
	#WINT_MIN
 (0u)

	)

280 
	#WINT_MAX
 (4294967295u)

	)

287 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_CONSTANT_MACROS


290 
	#INT8_C
(
c
Ë
	)
c

291 
	#INT16_C
(
c
Ë
	)
c

292 
	#INT32_C
(
c
Ë
	)
c

293 #i‡
__WORDSIZE
 == 64

294 
	#INT64_C
(
c
Ë¯## 
L


	)

296 
	#INT64_C
(
c
Ë¯## 
LL


	)

300 
	#UINT8_C
(
c
Ë
	)
c

301 
	#UINT16_C
(
c
Ë
	)
c

302 
	#UINT32_C
(
c
Ë¯## 
U


	)

303 #i‡
__WORDSIZE
 == 64

304 
	#UINT64_C
(
c
Ë¯## 
UL


	)

306 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

310 #i‡
__WORDSIZE
 == 64

311 
	#INTMAX_C
(
c
Ë¯## 
L


	)

312 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

314 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

315 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/stdio.h

24 #i‚de‡
_STDIO_H


26 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


27 
	#_STDIO_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

36 
	~<bôs/ty≥s.h
>

37 
	#__√ed_FILE


	)

38 
	#__√ed___FILE


	)

42 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


45 
	g_IO_FILE
;

47 
__BEGIN_NAMESPACE_STD


49 
_IO_FILE
 
	tFILE
;

50 
	g__END_NAMESPACE_STD


51 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_SVID
 || deföed 
__USE_POSIX
 \

52 || 
deföed
 
	g__USE_BSD
 || deföed 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

53 || 
deföed
 
__USE_POSIX2


54 
	$__USING_NAMESPACE_STD
(
FILE
)

57 
	#__FILE_deföed
 1

	)

59 #unde‡
__√ed_FILE


62 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


65 
_IO_FILE
 
	t__FILE
;

67 
	#____FILE_deföed
 1

	)

69 #unde‡
__√ed___FILE


72 #ifdef 
_STDIO_H


73 
	#_STDIO_USES_IOSTREAM


	)

75 
	~<libio.h
>

77 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


78 #ifde‡
__GNUC__


79 #i‚de‡
_VA_LIST_DEFINED


80 
_G_va_li°
 
	tva_li°
;

81 
	#_VA_LIST_DEFINED


	)

84 
	~<°d¨g.h
>

88 #ifde‡
__USE_XOPEN2K8


89 #i‚de‡
__off_t_deföed


90 #i‚de‡
__USE_FILE_OFFSET64


91 
__off_t
 
	toff_t
;

93 
__off64_t
 
	toff_t
;

95 
	#__off_t_deföed


	)

97 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


98 
__off64_t
 
	toff64_t
;

99 
	#__off64_t_deföed


	)

102 #i‚de‡
__ssize_t_deföed


103 
__ssize_t
 
	tssize_t
;

104 
	#__ssize_t_deföed


	)

109 
__BEGIN_NAMESPACE_STD


110 #i‚de‡
__USE_FILE_OFFSET64


111 
_G_Âos_t
 
	tÂos_t
;

113 
_G_Âos64_t
 
	tÂos_t
;

115 
__END_NAMESPACE_STD


116 #ifde‡
__USE_LARGEFILE64


117 
_G_Âos64_t
 
	tÂos64_t
;

121 
	#_IOFBF
 0

	)

122 
	#_IOLBF
 1

	)

123 
	#_IONBF
 2

	)

127 #i‚de‡
BUFSIZ


128 
	#BUFSIZ
 
_IO_BUFSIZ


	)

134 #i‚de‡
EOF


135 
	#EOF
 (-1)

	)

141 
	#SEEK_SET
 0

	)

142 
	#SEEK_CUR
 1

	)

143 
	#SEEK_END
 2

	)

144 #ifde‡
__USE_GNU


145 
	#SEEK_DATA
 3

	)

146 
	#SEEK_HOLE
 4

	)

150 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


152 
	#P_tmpdú
 "/tmp"

	)

165 
	~<bôs/°dio_lim.h
>

169 
_IO_FILE
 *
°dö
;

170 
_IO_FILE
 *
°dout
;

171 
_IO_FILE
 *
°dîr
;

173 
	#°dö
 
°dö


	)

174 
	#°dout
 
°dout


	)

175 
	#°dîr
 
°dîr


	)

177 
__BEGIN_NAMESPACE_STD


179 
	$ªmove
 (
__c⁄°
 *
__fûíame
Ë
__THROW
;

181 
	$ª«me
 (
__c⁄°
 *
__ﬁd
, __c⁄° *
__√w
Ë
__THROW
;

182 
__END_NAMESPACE_STD


184 #ifde‡
__USE_ATFILE


186 
	$ª«mót
 (
__ﬁdfd
, 
__c⁄°
 *
__ﬁd
, 
__√wfd
,

187 
__c⁄°
 *
__√w
Ë
__THROW
;

190 
__BEGIN_NAMESPACE_STD


195 #i‚de‡
__USE_FILE_OFFSET64


196 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

198 #ifde‡
__REDIRECT


199 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

201 
	#tmpfûe
 
tmpfûe64


	)

205 #ifde‡
__USE_LARGEFILE64


206 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

210 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

211 
__END_NAMESPACE_STD


213 #ifde‡
__USE_MISC


216 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

220 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


228 *
	$ãm≤am
 (
__c⁄°
 *
__dú
, __c⁄° *
__pfx
)

229 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

233 
__BEGIN_NAMESPACE_STD


238 
	`f˛o£
 (
FILE
 *
__°ªam
);

243 
	`fÊush
 (
FILE
 *
__°ªam
);

244 
__END_NAMESPACE_STD


246 #ifde‡
__USE_MISC


253 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

256 #ifde‡
__USE_GNU


263 
	`f˛o£Æl
 ();

267 
__BEGIN_NAMESPACE_STD


268 #i‚de‡
__USE_FILE_OFFSET64


273 
FILE
 *
	$f›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

274 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

279 
FILE
 *
	$‰e›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

280 
__c⁄°
 *
__ª°ri˘
 
__modes
,

281 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

283 #ifde‡
__REDIRECT


284 
FILE
 *
	`__REDIRECT
 (
f›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

285 
__c⁄°
 *
__ª°ri˘
 
__modes
), 
f›í64
)

286 
__wur
;

287 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

288 
__c⁄°
 *
__ª°ri˘
 
__modes
,

289 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

290 
__wur
;

292 
	#f›í
 
f›í64


	)

293 
	#‰e›í
 
‰e›í64


	)

296 
__END_NAMESPACE_STD


297 #ifde‡
__USE_LARGEFILE64


298 
FILE
 *
	$f›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

299 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

300 
FILE
 *
	$‰e›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

301 
__c⁄°
 *
__ª°ri˘
 
__modes
,

302 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

305 #ifdef 
__USE_POSIX


307 
FILE
 *
	$fd›í
 (
__fd
, 
__c⁄°
 *
__modes
Ë
__THROW
 
__wur
;

310 #ifdef 
__USE_GNU


313 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

314 
__c⁄°
 *
__ª°ri˘
 
__modes
,

315 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

318 #ifde‡
__USE_XOPEN2K8


320 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, 
__c⁄°
 *
__modes
)

321 
__THROW
 
__wur
;

326 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

330 
__BEGIN_NAMESPACE_STD


333 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

337 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

338 
__modes
, 
size_t
 
__n
Ë
__THROW
;

339 
__END_NAMESPACE_STD


341 #ifdef 
__USE_BSD


344 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

345 
size_t
 
__size
Ë
__THROW
;

348 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

352 
__BEGIN_NAMESPACE_STD


357 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

358 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

363 
	`¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

365 
	$•rötf
 (*
__ª°ri˘
 
__s
,

366 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

372 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

373 
_G_va_li°
 
__¨g
);

378 
	`v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

380 
	$v•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

381 
_G_va_li°
 
__¨g
Ë
__THROWNL
;

382 
__END_NAMESPACE_STD


384 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


385 
__BEGIN_NAMESPACE_C99


387 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

388 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

389 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

391 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

392 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

393 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

394 
__END_NAMESPACE_C99


397 #ifde‡
__USE_GNU


400 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__f
,

401 
_G_va_li°
 
__¨g
)

402 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

403 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

404 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

405 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

406 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

407 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

408 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

411 #ifde‡
__USE_XOPEN2K8


418 
	$vd¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
,

419 
_G_va_li°
 
__¨g
)

420 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

421 
	$d¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

422 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

426 
__BEGIN_NAMESPACE_STD


431 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

432 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

437 
	$sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

439 
	$ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

440 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

442 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

443 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

444 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

445 #ifde‡
__REDIRECT


449 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

450 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

451 
__isoc99_fsˇnf
Ë
__wur
;

452 
	`__REDIRECT
 (
sˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

453 
__isoc99_sˇnf
Ë
__wur
;

454 
	`__REDIRECT_NTH
 (
ssˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__s
,

455 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

456 
__isoc99_ssˇnf
);

458 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

459 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

460 
	$__isoc99_sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

461 
	$__isoc99_ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

462 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

463 
	#fsˇnf
 
__isoc99_fsˇnf


	)

464 
	#sˇnf
 
__isoc99_sˇnf


	)

465 
	#ssˇnf
 
__isoc99_ssˇnf


	)

469 
__END_NAMESPACE_STD


471 #ifdef 
__USE_ISOC99


472 
__BEGIN_NAMESPACE_C99


477 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

478 
_G_va_li°
 
__¨g
)

479 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

485 
	$vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

486 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

489 
	$vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

490 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

491 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

493 #i‡!
deföed
 
__USE_GNU
 \

494 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

495 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

496 #ifde‡
__REDIRECT


500 
	`__REDIRECT
 (
vfsˇnf
,

501 (
FILE
 *
__ª°ri˘
 
__s
,

502 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

503 
__isoc99_vfsˇnf
)

504 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

505 
	`__REDIRECT
 (
vsˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

506 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

507 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

508 
	`__REDIRECT_NTH
 (
vssˇnf
,

509 (
__c⁄°
 *
__ª°ri˘
 
__s
,

510 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

511 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

512 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

514 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

515 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

516 
_G_va_li°
 
__¨g
Ë
__wur
;

517 
	$__isoc99_vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

518 
_G_va_li°
 
__¨g
Ë
__wur
;

519 
	$__isoc99_vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

520 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

521 
_G_va_li°
 
__¨g
Ë
__THROW
;

522 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

523 
	#vsˇnf
 
__isoc99_vsˇnf


	)

524 
	#vssˇnf
 
__isoc99_vssˇnf


	)

528 
__END_NAMESPACE_C99


532 
__BEGIN_NAMESPACE_STD


537 
	`fgëc
 (
FILE
 *
__°ªam
);

538 
	`gëc
 (
FILE
 *
__°ªam
);

544 
	`gëch¨
 ();

545 
__END_NAMESPACE_STD


549 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

551 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


556 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

557 
	`gëch¨_u∆ocked
 ();

560 #ifde‡
__USE_MISC


567 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

571 
__BEGIN_NAMESPACE_STD


579 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

580 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

586 
	`putch¨
 (
__c
);

587 
__END_NAMESPACE_STD


591 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

593 #ifde‡
__USE_MISC


600 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

603 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


608 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

609 
	`putch¨_u∆ocked
 (
__c
);

613 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 \

614 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

616 
	`gëw
 (
FILE
 *
__°ªam
);

619 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

623 
__BEGIN_NAMESPACE_STD


628 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

629 
__wur
;

636 *
	$gës
 (*
__s
Ë
__wur
;

637 
__END_NAMESPACE_STD


639 #ifde‡
__USE_GNU


646 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

647 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

651 #ifdef 
__USE_XOPEN2K8


662 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

663 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

664 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

665 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

666 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

667 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

675 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

676 
size_t
 *
__ª°ri˘
 
__n
,

677 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

681 
__BEGIN_NAMESPACE_STD


686 
	`Âuts
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

692 
	`puts
 (
__c⁄°
 *
__s
);

699 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

706 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

707 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

712 
size_t
 
	`fwrôe
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, size_à
__size
,

713 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

714 
__END_NAMESPACE_STD


716 #ifde‡
__USE_GNU


723 
	`Âuts_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

724 
FILE
 *
__ª°ri˘
 
__°ªam
);

727 #ifde‡
__USE_MISC


734 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

735 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

736 
size_t
 
	`fwrôe_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, size_à
__size
,

737 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

741 
__BEGIN_NAMESPACE_STD


746 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

751 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

756 
	`ªwöd
 (
FILE
 *
__°ªam
);

757 
__END_NAMESPACE_STD


764 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


765 #i‚de‡
__USE_FILE_OFFSET64


770 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

775 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

777 #ifde‡
__REDIRECT


778 
	`__REDIRECT
 (
f£eko
,

779 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

780 
f£eko64
);

781 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

783 
	#f£eko
 
f£eko64


	)

784 
	#·ñlo
 
·ñlo64


	)

789 
__BEGIN_NAMESPACE_STD


790 #i‚de‡
__USE_FILE_OFFSET64


795 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

800 
	`f£ços
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
);

802 #ifde‡
__REDIRECT


803 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

804 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

805 
	`__REDIRECT
 (
f£ços
,

806 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
), 
f£ços64
);

808 
	#fgëpos
 
fgëpos64


	)

809 
	#f£ços
 
f£ços64


	)

812 
__END_NAMESPACE_STD


814 #ifde‡
__USE_LARGEFILE64


815 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

816 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

817 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

818 
	`f£ços64
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos64_t
 *
__pos
);

821 
__BEGIN_NAMESPACE_STD


823 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

825 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

827 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

828 
__END_NAMESPACE_STD


830 #ifde‡
__USE_MISC


832 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

833 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

834 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

838 
__BEGIN_NAMESPACE_STD


843 
	`≥º‹
 (
__c⁄°
 *
__s
);

844 
__END_NAMESPACE_STD


850 
	~<bôs/sys_îæi°.h
>

853 #ifdef 
__USE_POSIX


855 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

858 #ifde‡
__USE_MISC


860 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

864 #i‡(
deföed
 
__USE_POSIX2
 || deföed 
__USE_SVID
 || deföed 
__USE_BSD
 || \

865 
deföed
 
__USE_MISC
)

870 
FILE
 *
	$p›í
 (
__c⁄°
 *
__comm™d
, __c⁄° *
__modes
Ë
__wur
;

876 
	`p˛o£
 (
FILE
 *
__°ªam
);

880 #ifdef 
__USE_POSIX


882 *
	$˘îmid
 (*
__s
Ë
__THROW
;

886 #ifde‡
__USE_XOPEN


888 *
	`cu£rid
 (*
__s
);

892 #ifdef 
__USE_GNU


893 
ob°ack
;

896 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

897 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

898 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

899 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

900 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

901 
_G_va_li°
 
__¨gs
)

902 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

906 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


910 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

914 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

917 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

920 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


924 
	#__√ed_gë›t


	)

925 
	~<gë›t.h
>

930 #ifde‡
__USE_EXTERN_INLINES


931 
	~<bôs/°dio.h
>

933 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


934 
	~<bôs/°dio2.h
>

936 #ifde‡
__LDBL_COMPAT


937 
	~<bôs/°dio-ldbl.h
>

940 
__END_DECLS


	@/usr/include/stdlib.h

23 #i‚def 
_STDLIB_H


25 
	~<„©uªs.h
>

28 
	#__√ed_size_t


	)

29 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


30 
	#__√ed_wch¨_t


	)

31 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	g__BEGIN_DECLS


37 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


38 
	#_STDLIB_H
 1

	)

40 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


42 
	~<bôs/waôÊags.h
>

43 
	~<bôs/waô°©us.h
>

45 #ifde‡
__USE_BSD


50 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


51 
	#__WAIT_INT
(
°©us
) \

52 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

53 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

55 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

63 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


64 
	#__WAIT_STATUS
 *

	)

65 
	#__WAIT_STATUS_DEFN
 *

	)

70 
waô
 *
	m__u±r
;

71 *
	m__ùå
;

72 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

73 
	#__WAIT_STATUS_DEFN
 *

	)

78 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

79 
	#__WAIT_STATUS
 *

	)

80 
	#__WAIT_STATUS_DEFN
 *

	)

85 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

90 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

91 #ifde‡
__WIFCONTINUED


92 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

96 
__BEGIN_NAMESPACE_STD


100 
	mquŸ
;

101 
	mªm
;

102 } 
	tdiv_t
;

105 #i‚de‡
__ldiv_t_deföed


108 
	mquŸ
;

109 
	mªm
;

110 } 
	tldiv_t
;

111 
	#__ldiv_t_deföed
 1

	)

113 
	g__END_NAMESPACE_STD


115 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


116 
__BEGIN_NAMESPACE_C99


118 
__exãnsi⁄__
 struct

120 
	mquŸ
;

121 
	mªm
;

122 } 
	tŒdiv_t
;

123 
	#__Œdiv_t_deföed
 1

	)

124 
	g__END_NAMESPACE_C99


129 
	#RAND_MAX
 2147483647

	)

134 
	#EXIT_FAILURE
 1

	)

135 
	#EXIT_SUCCESS
 0

	)

139 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

140 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

143 
__BEGIN_NAMESPACE_STD


145 
	$©of
 (
__c⁄°
 *
__≈å
)

146 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

148 
	$©oi
 (
__c⁄°
 *
__≈å
)

149 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

151 
	$©ﬁ
 (
__c⁄°
 *
__≈å
)

152 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

153 
__END_NAMESPACE_STD


155 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

156 
__BEGIN_NAMESPACE_C99


158 
__exãnsi⁄__
 
	$©ﬁl
 (
__c⁄°
 *
__≈å
)

159 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

160 
__END_NAMESPACE_C99


163 
__BEGIN_NAMESPACE_STD


165 
	$°πod
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

166 **
__ª°ri˘
 
__íd±r
)

167 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

168 
__END_NAMESPACE_STD


170 #ifdef 
__USE_ISOC99


171 
__BEGIN_NAMESPACE_C99


173 
	$°πof
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

174 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

176 
	$°πﬁd
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

177 **
__ª°ri˘
 
__íd±r
)

178 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

179 
__END_NAMESPACE_C99


182 
__BEGIN_NAMESPACE_STD


184 
	$°πﬁ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

185 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

186 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

188 
	$°πoul
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

189 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

190 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

191 
__END_NAMESPACE_STD


193 #i‡
deföed
 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_BSD


195 
__exãnsi⁄__


196 
	$°πoq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

197 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

198 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

200 
__exãnsi⁄__


201 
	$°πouq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

202 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

203 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

206 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

207 
__BEGIN_NAMESPACE_C99


209 
__exãnsi⁄__


210 
	$°πﬁl
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

211 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

212 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

214 
__exãnsi⁄__


215 
	$°πouŒ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

216 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

217 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

218 
__END_NAMESPACE_C99


222 #ifde‡
__USE_GNU


236 
	~<xloˇÀ.h
>

240 
	$°πﬁ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

241 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

242 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

244 
	$°πoul_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

245 **
__ª°ri˘
 
__íd±r
,

246 
__ba£
, 
__loˇÀ_t
 
__loc
)

247 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

249 
__exãnsi⁄__


250 
	$°πﬁl_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

251 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

252 
__loˇÀ_t
 
__loc
)

253 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

255 
__exãnsi⁄__


256 
	$°πouŒ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

257 **
__ª°ri˘
 
__íd±r
,

258 
__ba£
, 
__loˇÀ_t
 
__loc
)

259 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

261 
	$°πod_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

262 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

263 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

265 
	$°πof_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

266 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

267 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

269 
	$°πﬁd_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

270 **
__ª°ri˘
 
__íd±r
,

271 
__loˇÀ_t
 
__loc
)

272 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

276 #ifde‡
__USE_EXTERN_INLINES


277 
__BEGIN_NAMESPACE_STD


278 
__exã∫_ölöe
 

279 
	`__NTH
 (
	$©of
 (
__c⁄°
 *
__≈å
))

281  
	`°πod
 (
__≈å
, (**Ë
NULL
);

282 
	}
}

283 
__exã∫_ölöe
 

284 
__NTH
 (
	$©oi
 (
__c⁄°
 *
__≈å
))

286  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

287 
	}
}

288 
__exã∫_ölöe
 

289 
__NTH
 (
	$©ﬁ
 (
__c⁄°
 *
__≈å
))

291  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

292 
	}
}

293 
	g__END_NAMESPACE_STD


295 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


296 
__BEGIN_NAMESPACE_C99


297 
__exãnsi⁄__
 
__exã∫_ölöe
 

298 
__NTH
 (
	$©ﬁl
 (
__c⁄°
 *
__≈å
))

300  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

301 
	}
}

302 
	g__END_NAMESPACE_C99


307 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


311 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

314 
	$a64l
 (
__c⁄°
 *
__s
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

319 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_BSD


320 
	~<sys/ty≥s.h
>

327 
	$øndom
 (Ë
__THROW
;

330 
	$§™dom
 (
__£ed
Ë
__THROW
;

336 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

337 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

341 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

344 #ifde‡
__USE_MISC


349 
	søndom_d©a


351 
öt32_t
 *
Âå
;

352 
öt32_t
 *
Ωå
;

353 
öt32_t
 *
°©e
;

354 
ønd_ty≥
;

355 
ønd_deg
;

356 
ønd_£p
;

357 
öt32_t
 *
íd_±r
;

360 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

361 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

363 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

364 
__THROW
 
	`__n⁄nuŒ
 ((2));

366 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

367 
size_t
 
__°©ñí
,

368 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

369 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

371 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

372 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

373 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

378 
__BEGIN_NAMESPACE_STD


380 
	$ønd
 (Ë
__THROW
;

382 
	$§™d
 (
__£ed
Ë
__THROW
;

383 
__END_NAMESPACE_STD


385 #ifde‡
__USE_POSIX


387 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

391 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


395 
	$dønd48
 (Ë
__THROW
;

396 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

399 
	$Ã™d48
 (Ë
__THROW
;

400 
	$ƒ™d48
 (
__xsubi
[3])

401 
__THROW
 
	`__n⁄nuŒ
 ((1));

404 
	$mønd48
 (Ë
__THROW
;

405 
	$jønd48
 (
__xsubi
[3])

406 
__THROW
 
	`__n⁄nuŒ
 ((1));

409 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

410 *
	$£ed48
 (
__£ed16v
[3])

411 
__THROW
 
	`__n⁄nuŒ
 ((1));

412 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

414 #ifde‡
__USE_MISC


418 
	sdønd48_d©a


420 
__x
[3];

421 
__ﬁd_x
[3];

422 
__c
;

423 
__öô
;

424 
__a
;

428 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

429 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$î™d48_r
 (
__xsubi
[3],

431 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

432 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

435 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

436 *
__ª°ri˘
 
__ªsu…
)

437 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

438 
	$ƒ™d48_r
 (
__xsubi
[3],

439 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

444 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

445 *
__ª°ri˘
 
__ªsu…
)

446 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

447 
	$jønd48_r
 (
__xsubi
[3],

448 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

449 *
__ª°ri˘
 
__ªsu…
)

450 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

453 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

454 
__THROW
 
	`__n⁄nuŒ
 ((2));

456 
	$£ed48_r
 (
__£ed16v
[3],

457 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$lc⁄g48_r
 (
__∑øm
[7],

460 
dønd48_d©a
 *
__buf„r
)

461 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

467 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


468 
	#__mÆloc_™d_ˇŒoc_deföed


	)

469 
__BEGIN_NAMESPACE_STD


471 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

473 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

474 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

475 
__END_NAMESPACE_STD


478 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


479 
__BEGIN_NAMESPACE_STD


485 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

486 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

488 
	$‰ì
 (*
__±r
Ë
__THROW
;

489 
__END_NAMESPACE_STD


491 #ifdef 
__USE_MISC


493 
	$c‰ì
 (*
__±r
Ë
__THROW
;

496 #i‡
deföed
 
__USE_GNU
 || deföed 
__USE_BSD
 || deföed 
__USE_MISC


497 
	~<Æloˇ.h
>

500 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

501 || 
deföed
 
__USE_BSD


503 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

506 #ifde‡
__USE_XOPEN2K


508 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

509 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

512 
__BEGIN_NAMESPACE_STD


514 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

518 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

520 #ifde‡
__USE_GNU


524 #ifde‡
__˝lu•lus


525 "C++" 
	`©_quick_exô
 ((*
__func
) ())

526 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

528 
	`©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

531 
__END_NAMESPACE_STD


533 #ifdef 
__USE_MISC


536 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

537 
__THROW
 
	`__n⁄nuŒ
 ((1));

540 
__BEGIN_NAMESPACE_STD


544 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

546 #ifde‡
__USE_GNU


552 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

554 
__END_NAMESPACE_STD


556 #ifde‡
__USE_ISOC99


557 
__BEGIN_NAMESPACE_C99


560 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

561 
__END_NAMESPACE_C99


565 
__BEGIN_NAMESPACE_STD


567 *
	$gëív
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

568 
__END_NAMESPACE_STD


572 *
	$__£cuª_gëív
 (
__c⁄°
 *
__«me
)

573 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

575 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


579 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

582 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


585 
	$£ãnv
 (
__c⁄°
 *
__«me
, __c⁄° *
__vÆue
, 
__ª∂a˚
)

586 
__THROW
 
	`__n⁄nuŒ
 ((2));

589 
	$un£ãnv
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

592 #ifdef 
__USE_MISC


596 
	$˛óªnv
 (Ë
__THROW
;

600 #i‡
deföed
 
__USE_MISC
 \

601 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
)

606 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

609 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 \

610 || 
deföed
 
__USE_XOPEN2K8


619 #i‚de‡
__USE_FILE_OFFSET64


620 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

622 #ifde‡
__REDIRECT


623 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

624 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

626 
	#mk°emp
 
mk°emp64


	)

629 #ifde‡
__USE_LARGEFILE64


630 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

634 #ifde‡
__USE_MISC


641 #i‚de‡
__USE_FILE_OFFSET64


642 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

644 #ifde‡
__REDIRECT


645 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

646 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

648 
	#mk°emps
 
mk°emps64


	)

651 #ifde‡
__USE_LARGEFILE64


652 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

653 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

657 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K8


663 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

666 #ifde‡
__USE_GNU


673 #i‚de‡
__USE_FILE_OFFSET64


674 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

676 #ifde‡
__REDIRECT


677 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

678 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

680 
	#mko°emp
 
mko°emp64


	)

683 #ifde‡
__USE_LARGEFILE64


684 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

693 #i‚de‡
__USE_FILE_OFFSET64


694 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

695 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

697 #ifde‡
__REDIRECT


698 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

699 
__Êags
), 
mko°emps64
)

700 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

702 
	#mko°emps
 
mko°emps64


	)

705 #ifde‡
__USE_LARGEFILE64


706 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

707 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

712 
__BEGIN_NAMESPACE_STD


717 
	$sy°em
 (
__c⁄°
 *
__comm™d
Ë
__wur
;

718 
__END_NAMESPACE_STD


721 #ifdef 
__USE_GNU


724 *
	$ˇn⁄iˇlize_fûe_«me
 (
__c⁄°
 *
__«me
)

725 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

728 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


734 *
	$ªÆ∑th
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

735 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

740 #i‚de‡
__COMPAR_FN_T


741 
	#__COMPAR_FN_T


	)

742 (*
	t__com∑r_‚_t
Ë(
	t__c⁄°
 *, __const *);

744 #ifdef 
__USE_GNU


745 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

748 #ifde‡
__USE_GNU


749 (*
	t__com∑r_d_‚_t
Ë(
	t__c⁄°
 *, __const *, *);

752 
__BEGIN_NAMESPACE_STD


755 *
	$b£¨ch
 (
__c⁄°
 *
__key
, __c⁄° *
__ba£
,

756 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

757 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

761 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

762 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

763 #ifde‡
__USE_GNU


764 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

765 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

766 
	`__n⁄nuŒ
 ((1, 4));

771 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

772 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

773 
__END_NAMESPACE_STD


775 #ifde‡
__USE_ISOC99


776 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

777 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

781 
__BEGIN_NAMESPACE_STD


785 
div_t
 
	$div
 (
__numî
, 
__díom
)

786 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

787 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

788 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

789 
__END_NAMESPACE_STD


791 #ifde‡
__USE_ISOC99


792 
__BEGIN_NAMESPACE_C99


793 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

794 
__díom
)

795 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

796 
__END_NAMESPACE_C99


800 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

801 || 
deföed
 
__USE_SVID


808 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

809 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

814 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

815 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

820 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

821 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

824 #ifde‡
__USE_MISC


826 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

827 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

828 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

829 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

830 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

831 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

832 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

833 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

838 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

839 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

840 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

841 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

842 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

843 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

845 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

846 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

847 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

848 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

849 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

850 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

851 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

852 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

857 
__BEGIN_NAMESPACE_STD


860 
	$mbÀn
 (
__c⁄°
 *
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

863 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

864 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

867 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
 
__wur
;

871 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

872 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

874 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

875 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

876 
__THROW
;

877 
__END_NAMESPACE_STD


880 #ifde‡
__USE_SVID


885 
	$Ωm©ch
 (
__c⁄°
 *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

889 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


896 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

897 *
__c⁄°
 *
__ª°ri˘
 
__tokís
,

898 **
__ª°ri˘
 
__vÆuï
)

899 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

903 #ifde‡
__USE_XOPEN


905 
	$£tkey
 (
__c⁄°
 *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

911 #ifde‡
__USE_XOPEN2KXSI


913 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

916 #ifde‡
__USE_XOPEN


921 
	$gø¡±
 (
__fd
Ë
__THROW
;

925 
	$u∆ock±
 (
__fd
Ë
__THROW
;

930 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

933 #ifde‡
__USE_GNU


937 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

938 
__THROW
 
	`__n⁄nuŒ
 ((2));

941 
	`gë±
 ();

944 #ifde‡
__USE_BSD


948 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

949 
__THROW
 
	`__n⁄nuŒ
 ((1));

954 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


955 
	~<bôs/°dlib.h
>

957 #ifde‡
__LDBL_COMPAT


958 
	~<bôs/°dlib-ldbl.h
>

962 #unde‡
__√ed_mÆloc_™d_ˇŒoc


964 
__END_DECLS


	@/usr/include/string.h

24 #i‚def 
_STRING_H


25 
	#_STRING_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

37 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

38 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

42 
__BEGIN_NAMESPACE_STD


44 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
,

45 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

46 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

49 *
	$memmove
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
)

50 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

51 
__END_NAMESPACE_STD


56 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN


57 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

58 
__c
, 
size_t
 
__n
)

59 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

63 
__BEGIN_NAMESPACE_STD


65 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

68 
	$memcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

69 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

72 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


75 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

76 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

77 
__c⁄°
 *
	`memchr
 (__c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

78 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

80 #ifde‡
__OPTIMIZE__


81 
__exã∫_Æways_ölöe
 *

82 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


84  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

87 
__exã∫_Æways_ölöe
 
__c⁄°
 *

88 
	`memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


90  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

93 
	}
}

95 *
	$memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

96 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

98 
__END_NAMESPACE_STD


100 #ifde‡
__USE_GNU


103 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


104 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

105 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

106 "C++" 
__c⁄°
 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

107 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

109 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

110 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

114 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


115 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

116 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

117 "C++" 
__c⁄°
 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

118 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

120 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

121 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

126 
__BEGIN_NAMESPACE_STD


128 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

129 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

131 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

132 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

133 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

137 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

139 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

140 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

143 
	$°rcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

146 
	$°∫cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

147 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

150 
	$°rcﬁl
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

153 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

154 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

155 
__THROW
 
	`__n⁄nuŒ
 ((2));

156 
__END_NAMESPACE_STD


158 #ifde‡
__USE_XOPEN2K8


162 
	~<xloˇÀ.h
>

165 
	$°rcﬁl_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

166 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

168 
size_t
 
	$°rx‰m_l
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
,

169 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

172 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 \

173 || 
deföed
 
__USE_XOPEN2K8


175 *
	$°rdup
 (
__c⁄°
 *
__s
)

176 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

182 #i‡
deföed
 
__USE_XOPEN2K8


183 *
	$°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

184 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

187 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


189 
	#°rdu∑
(
s
) \

190 (
__exãnsi⁄__
 \

192 
__c⁄°
 *
__ﬁd
 = (
s
); \

193 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

194 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

195 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

196 
	}
}))

	)

199 
	#°∫du∑
(
s
, 
n
) \

200 (
__exãnsi⁄__
 \

202 
__c⁄°
 *
__ﬁd
 = (
s
); \

203 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

204 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

205 
__√w
[
__Àn
] = '\0'; \

206 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

207 }))

	)

210 
	g__BEGIN_NAMESPACE_STD


212 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


215 *
°rchr
 (*
__s
, 
__c
)

216 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

217 
__c⁄°
 *
°rchr
 (__c⁄° *
__s
, 
__c
)

218 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

220 #ifde‡
__OPTIMIZE__


221 
__exã∫_Æways_ölöe
 *

222 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


224  
__buûtö_°rchr
 (
__s
, 
__c
);

227 
__exã∫_Æways_ölöe
 
__c⁄°
 *

228 
°rchr
 (
__c⁄°
 *
__s
, 
__c
Ë
	g__THROW


230  
__buûtö_°rchr
 (
__s
, 
__c
);

235 *
	$°rchr
 (
__c⁄°
 *
__s
, 
__c
)

236 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

239 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


242 *
	`°ºchr
 (*
__s
, 
__c
)

243 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

244 
__c⁄°
 *
	`°ºchr
 (__c⁄° *
__s
, 
__c
)

245 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

247 #ifde‡
__OPTIMIZE__


248 
__exã∫_Æways_ölöe
 *

249 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


251  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

254 
__exã∫_Æways_ölöe
 
__c⁄°
 *

255 
	`°ºchr
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


257  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

260 
	}
}

262 *
	$°ºchr
 (
__c⁄°
 *
__s
, 
__c
)

263 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

265 
__END_NAMESPACE_STD


267 #ifde‡
__USE_GNU


270 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


271 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

272 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

273 "C++" 
__c⁄°
 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

274 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

276 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

277 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

281 
__BEGIN_NAMESPACE_STD


284 
size_t
 
	$°rc•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ªje˘
)

285 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

288 
size_t
 
	$°r•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

289 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

291 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


294 *
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
)

295 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

296 
__c⁄°
 *
	`°Ωbrk
 (__c⁄° *
__s
, __c⁄° *
__ac˚±
)

297 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

299 #ifde‡
__OPTIMIZE__


300 
__exã∫_Æways_ölöe
 *

301 
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
Ë
__THROW


303  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

306 
__exã∫_Æways_ölöe
 
__c⁄°
 *

307 
	`°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
Ë
__THROW


309  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

312 
	}
}

314 *
	$°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

318 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


321 *
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

322 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

323 
__c⁄°
 *
	`°r°r
 (__c⁄° *
__hay°ack
,

324 
__c⁄°
 *
__√edÀ
)

325 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

327 #ifde‡
__OPTIMIZE__


328 
__exã∫_Æways_ölöe
 *

329 
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
Ë
__THROW


331  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

334 
__exã∫_Æways_ölöe
 
__c⁄°
 *

335 
	`°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
Ë
__THROW


337  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

340 
	}
}

342 *
	$°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

343 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

348 *
	$°πok
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
)

349 
__THROW
 
	`__n⁄nuŒ
 ((2));

350 
__END_NAMESPACE_STD


354 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

355 
__c⁄°
 *
__ª°ri˘
 
__dñim
,

356 **
__ª°ri˘
 
__ßve_±r
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

358 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


359 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
,

360 **
__ª°ri˘
 
__ßve_±r
)

361 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

364 #ifde‡
__USE_GNU


366 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


367 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

368 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

369 "C++" 
__c⁄°
 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
,

370 
__c⁄°
 *
__√edÀ
)

371 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

373 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

374 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

378 #ifde‡
__USE_GNU


382 *
	$memmem
 (
__c⁄°
 *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

383 
__c⁄°
 *
__√edÀ
, 
size_t
 
__√edÀÀn
)

384 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

388 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

389 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

391 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

392 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

393 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

397 
__BEGIN_NAMESPACE_STD


399 
size_t
 
	$°æí
 (
__c⁄°
 *
__s
)

400 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

401 
__END_NAMESPACE_STD


403 #ifdef 
__USE_XOPEN2K8


406 
size_t
 
	$°∫Àn
 (
__c⁄°
 *
__°rög
, 
size_t
 
__maxÀn
)

407 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

411 
__BEGIN_NAMESPACE_STD


413 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

414 
__END_NAMESPACE_STD


415 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_MISC


423 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


426 #ifde‡
__REDIRECT_NTH


427 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

428 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

429 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

431 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

433 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

438 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

439 
__THROW
 
	`__n⁄nuŒ
 ((2));

443 #ifde‡
__USE_XOPEN2K8


445 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

451 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

453 #ifde‡
__USE_BSD


455 
	$bc›y
 (
__c⁄°
 *
__§c
, *
__de°
, 
size_t
 
__n
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

462 
	$bcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

463 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

466 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


469 *
	`ödex
 (*
__s
, 
__c
)

470 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

471 
__c⁄°
 *
	`ödex
 (__c⁄° *
__s
, 
__c
)

472 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

474 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


475 
__exã∫_Æways_ölöe
 *

476 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


478  
	`__buûtö_ödex
 (
__s
, 
__c
);

481 
__exã∫_Æways_ölöe
 
__c⁄°
 *

482 
	`ödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


484  
	`__buûtö_ödex
 (
__s
, 
__c
);

487 
	}
}

489 *
	$ödex
 (
__c⁄°
 *
__s
, 
__c
)

490 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

494 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


497 *
	`rödex
 (*
__s
, 
__c
)

498 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

499 
__c⁄°
 *
	`rödex
 (__c⁄° *
__s
, 
__c
)

500 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

502 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


503 
__exã∫_Æways_ölöe
 *

504 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


506  
	`__buûtö_rödex
 (
__s
, 
__c
);

509 
__exã∫_Æways_ölöe
 
__c⁄°
 *

510 
	`rödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


512  
	`__buûtö_rödex
 (
__s
, 
__c
);

515 
	}
}

517 *
	$rödex
 (
__c⁄°
 *
__s
, 
__c
)

518 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

523 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

527 #ifdef 
__USE_GNU


528 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

529 #ifde‡
__GNUC__


530 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

531 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

536 
	$°rˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

537 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

540 
	$°∫ˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

541 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

544 #ifdef 
__USE_GNU


547 
	$°rˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

548 
__loˇÀ_t
 
__loc
)

549 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

551 
	$°∫ˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

552 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

553 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

556 #ifdef 
__USE_BSD


559 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

560 
__c⁄°
 *
__ª°ri˘
 
__dñim
)

561 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

564 #ifdef 
__USE_XOPEN2K8


566 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

569 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

570 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

571 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

572 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

576 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

577 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

578 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

579 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

580 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

581 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 #ifdef 
__USE_GNU


586 
	$°rvîscmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

587 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

590 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

593 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

595 #i‚de‡
ba£«me


600 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


601 "C++" *
	$ba£«me
 (*
__fûíame
)

602 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

603 "C++" 
__c⁄°
 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
)

604 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

606 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

612 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

613 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

614 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


634 
	~<bôs/°rög.h
>

637 
	~<bôs/°rög2.h
>

640 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


642 
	~<bôs/°rög3.h
>

646 
__END_DECLS


	@/usr/include/unistd.h

23 #i‚def 
_UNISTD_H


24 
	#_UNISTD_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


33 #ifde‡
__USE_XOPEN2K8


35 
	#_POSIX_VERSION
 200809L

	)

36 #ñi‡
deföed
 
__USE_XOPEN2K


38 
	#_POSIX_VERSION
 200112L

	)

39 #ñi‡
deföed
 
__USE_POSIX199506


41 
	#_POSIX_VERSION
 199506L

	)

42 #ñi‡
deföed
 
__USE_POSIX199309


44 
	#_POSIX_VERSION
 199309L

	)

47 
	#_POSIX_VERSION
 199009L

	)

53 #ifde‡
__USE_XOPEN2K8


54 
	#__POSIX2_THIS_VERSION
 200809L

	)

56 #ñi‡
deföed
 
__USE_XOPEN2K


58 
	#__POSIX2_THIS_VERSION
 200112L

	)

59 #ñi‡
deföed
 
__USE_POSIX199506


61 
	#__POSIX2_THIS_VERSION
 199506L

	)

64 
	#__POSIX2_THIS_VERSION
 199209L

	)

68 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

72 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

76 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

80 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

84 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

87 #ifde‡
__USE_XOPEN2K8


88 
	#_XOPEN_VERSION
 700

	)

89 #ñi‡
deföed
 
__USE_XOPEN2K


90 
	#_XOPEN_VERSION
 600

	)

91 #ñi‡
deföed
 
__USE_UNIX98


92 
	#_XOPEN_VERSION
 500

	)

94 
	#_XOPEN_VERSION
 4

	)

98 
	#_XOPEN_XCU_VERSION
 4

	)

101 
	#_XOPEN_XPG2
 1

	)

102 
	#_XOPEN_XPG3
 1

	)

103 
	#_XOPEN_XPG4
 1

	)

106 
	#_XOPEN_UNIX
 1

	)

109 
	#_XOPEN_CRYPT
 1

	)

113 
	#_XOPEN_ENH_I18N
 1

	)

116 
	#_XOPEN_LEGACY
 1

	)

203 
	~<bôs/posix_›t.h
>

206 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


207 
	~<bôs/ívú⁄míts.h
>

211 
	#STDIN_FILENO
 0

	)

212 
	#STDOUT_FILENO
 1

	)

213 
	#STDERR_FILENO
 2

	)

218 
	~<bôs/ty≥s.h
>

220 #i‚def 
__ssize_t_deföed


221 
__ssize_t
 
	tssize_t
;

222 
	#__ssize_t_deföed


	)

225 
	#__√ed_size_t


	)

226 
	#__√ed_NULL


	)

227 
	~<°ddef.h
>

229 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


232 #i‚de‡
__gid_t_deföed


233 
__gid_t
 
	tgid_t
;

234 
	#__gid_t_deföed


	)

237 #i‚de‡
__uid_t_deföed


238 
__uid_t
 
	tuid_t
;

239 
	#__uid_t_deföed


	)

242 #i‚de‡
__off_t_deföed


243 #i‚de‡
__USE_FILE_OFFSET64


244 
__off_t
 
	toff_t
;

246 
__off64_t
 
	toff_t
;

248 
	#__off_t_deföed


	)

250 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


251 
__off64_t
 
	toff64_t
;

252 
	#__off64_t_deföed


	)

255 #i‚de‡
__u£c⁄ds_t_deföed


256 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

257 
	#__u£c⁄ds_t_deföed


	)

260 #i‚de‡
__pid_t_deföed


261 
__pid_t
 
	tpid_t
;

262 
	#__pid_t_deföed


	)

266 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


267 #i‚de‡
__öçå_t_deföed


268 
__öçå_t
 
	töçå_t
;

269 
	#__öçå_t_deföed


	)

273 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


274 #i‚de‡
__sockÀn_t_deföed


275 
__sockÀn_t
 
	tsockÀn_t
;

276 
	#__sockÀn_t_deföed


	)

282 
	#R_OK
 4

	)

283 
	#W_OK
 2

	)

284 
	#X_OK
 1

	)

285 
	#F_OK
 0

	)

288 
	$ac˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

290 #ifde‡
__USE_GNU


293 
	$euidac˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
)

294 
__THROW
 
	`__n⁄nuŒ
 ((1));

297 
	$óc˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
)

298 
__THROW
 
	`__n⁄nuŒ
 ((1));

301 #ifde‡
__USE_ATFILE


305 
	$Ác˚sßt
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__ty≥
, 
__Êag
)

306 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

311 #i‚def 
_STDIO_H


312 
	#SEEK_SET
 0

	)

313 
	#SEEK_CUR
 1

	)

314 
	#SEEK_END
 2

	)

315 #ifde‡
__USE_GNU


316 
	#SEEK_DATA
 3

	)

317 
	#SEEK_HOLE
 4

	)

321 #i‡
deföed
 
__USE_BSD
 && !deföed 
L_SET


323 
	#L_SET
 
SEEK_SET


	)

324 
	#L_INCR
 
SEEK_CUR


	)

325 
	#L_XTND
 
SEEK_END


	)

334 #i‚de‡
__USE_FILE_OFFSET64


335 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

337 #ifde‡
__REDIRECT_NTH


338 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

339 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

340 
l£ek64
);

342 
	#l£ek
 
l£ek64


	)

345 #ifde‡
__USE_LARGEFILE64


346 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

347 
__THROW
;

354 
	`˛o£
 (
__fd
);

361 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

367 
ssize_t
 
	$wrôe
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
Ë
__wur
;

369 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


370 #i‚de‡
__USE_FILE_OFFSET64


377 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

378 
__off_t
 
__off£t
Ë
__wur
;

385 
ssize_t
 
	$pwrôe
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

386 
__off_t
 
__off£t
Ë
__wur
;

388 #ifde‡
__REDIRECT


389 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

390 
__off64_t
 
__off£t
),

391 
¥ód64
Ë
__wur
;

392 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, 
__c⁄°
 *
__buf
,

393 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

394 
pwrôe64
Ë
__wur
;

396 
	#¥ód
 
¥ód64


	)

397 
	#pwrôe
 
pwrôe64


	)

401 #ifde‡
__USE_LARGEFILE64


405 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

406 
__off64_t
 
__off£t
Ë
__wur
;

409 
ssize_t
 
	$pwrôe64
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

410 
__off64_t
 
__off£t
Ë
__wur
;

418 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

420 #ifde‡
__USE_GNU


423 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

433 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

445 
	`¶ìp
 (
__£c⁄ds
);

447 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

448 || 
deföed
 
__USE_BSD


453 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

454 
__THROW
;

461 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

470 
	`∑u£
 ();

474 
	$chown
 (
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

475 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

477 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


479 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

484 
	$lchown
 (
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

485 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

489 #ifde‡
__USE_ATFILE


492 
	$fchow«t
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
,

493 
__gid_t
 
__group
, 
__Êag
)

494 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

498 
	$chdú
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

500 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


502 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

512 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

514 #ifdef 
__USE_GNU


518 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

521 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

522 || 
deföed
 
__USE_BSD


526 *
	$gëwd
 (*
__buf
)

527 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

532 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

535 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

537 #ifde‡
__USE_GNU


540 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

544 **
__ívú⁄
;

545 #ifde‡
__USE_GNU


546 **
ívú⁄
;

552 
	$execve
 (
__c⁄°
 *
__∑th
, *__c⁄° 
__¨gv
[],

553 *
__c⁄°
 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

555 #ifde‡
__USE_XOPEN2K8


558 
	$„xecve
 (
__fd
, *
__c⁄°
 
__¨gv
[], *__c⁄° 
__ívp
[])

559 
__THROW
 
	`__n⁄nuŒ
 ((2));

564 
	$execv
 (
__c⁄°
 *
__∑th
, *__c⁄° 
__¨gv
[])

565 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

569 
	$exe˛e
 (
__c⁄°
 *
__∑th
, __c⁄° *
__¨g
, ...)

570 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

574 
	$exe˛
 (
__c⁄°
 *
__∑th
, __c⁄° *
__¨g
, ...)

575 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

579 
	$execvp
 (
__c⁄°
 *
__fûe
, *__c⁄° 
__¨gv
[])

580 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

585 
	$exe˛p
 (
__c⁄°
 *
__fûe
, __c⁄° *
__¨g
, ...)

586 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

588 #ifde‡
__USE_GNU


591 
	$execv≥
 (
__c⁄°
 *
__fûe
, *__c⁄° 
__¨gv
[],

592 *
__c⁄°
 
__ívp
[])

593 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

597 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


599 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

604 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

610 
	~<bôs/c⁄‚ame.h
>

613 
	$∑thc⁄f
 (
__c⁄°
 *
__∑th
, 
__«me
)

614 
__THROW
 
	`__n⁄nuŒ
 ((1));

617 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

620 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

622 #ifdef 
__USE_POSIX2


624 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

629 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

632 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

636 #i‚de‡
__FAVOR_BSD


637 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

639 #ifde‡
__REDIRECT_NTH


640 
__pid_t
 
	`__REDIRECT_NTH
 (
gëpgΩ
, (__pid_à
__pid
), 
__gëpgid
);

642 
	#gëpgΩ
 
__gëpgid


	)

647 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

648 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


649 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

656 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

658 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


669 #i‚de‡
__FAVOR_BSD


673 
	$£çgΩ
 (Ë
__THROW
;

678 #ifde‡
__REDIRECT_NTH


679 
	`__REDIRECT_NTH
 (
£çgΩ
, (
__pid_t
 
__pid
, __pid_à
__pgΩ
), 
£çgid
);

681 
	#£çgΩ
 
£çgid


	)

690 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

692 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


694 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

698 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

701 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

704 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

707 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

712 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

714 #ifdef 
__USE_GNU


716 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

723 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
;

725 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


728 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
;

731 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


733 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
;

740 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
;

742 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


745 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
;

748 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


750 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
;

753 #ifde‡
__USE_GNU


756 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

757 
__THROW
;

761 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

762 
__THROW
;

766 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

767 
__THROW
;

771 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

772 
__THROW
;

779 
__pid_t
 
	$f‹k
 (Ë
__THROWNL
;

781 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

782 || 
deföed
 
__USE_BSD


787 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

793 *
	$ây«me
 (
__fd
Ë
__THROW
;

797 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

798 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

802 
	$ißây
 (
__fd
Ë
__THROW
;

804 #i‡
deföed
 
__USE_BSD
 \

805 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_UNIX98
)

808 
	$ây¶Ÿ
 (Ë
__THROW
;

813 
	$lök
 (
__c⁄°
 *
__‰om
, __c⁄° *
__to
)

814 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

816 #ifde‡
__USE_ATFILE


819 
	$lök©
 (
__‰omfd
, 
__c⁄°
 *
__‰om
, 
__tofd
,

820 
__c⁄°
 *
__to
, 
__Êags
)

821 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

824 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


826 
	$symlök
 (
__c⁄°
 *
__‰om
, __c⁄° *
__to
)

827 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

832 
ssize_t
 
	$ªadlök
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

833 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

834 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

837 #ifde‡
__USE_ATFILE


839 
	$symlök©
 (
__c⁄°
 *
__‰om
, 
__tofd
,

840 
__c⁄°
 *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

843 
ssize_t
 
	$ªadlök©
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

844 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

845 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

849 
	$u∆ök
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

851 #ifde‡
__USE_ATFILE


853 
	$u∆ök©
 (
__fd
, 
__c⁄°
 *
__«me
, 
__Êag
)

854 
__THROW
 
	`__n⁄nuŒ
 ((2));

858 
	$rmdú
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

862 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

865 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

872 *
	`gëlogö
 ();

873 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


880 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

883 #ifdef 
__USE_BSD


885 
	$£éogö
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

889 #ifdef 
__USE_POSIX2


893 
	#__√ed_gë›t


	)

894 
	~<gë›t.h
>

898 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


902 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

906 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

909 
	$£tho°«me
 (
__c⁄°
 *
__«me
, 
size_t
 
__Àn
)

910 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

914 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

920 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

921 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

922 
	$£tdomaö«me
 (
__c⁄°
 *
__«me
, 
size_t
 
__Àn
)

923 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

929 
	$vh™gup
 (Ë
__THROW
;

932 
	$ªvoke
 (
__c⁄°
 *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

940 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

941 
size_t
 
__off£t
, 
__sˇÀ
)

942 
__THROW
 
	`__n⁄nuŒ
 ((1));

948 
	$ac˘
 (
__c⁄°
 *
__«me
Ë
__THROW
;

952 *
	$gëu£rshñl
 (Ë
__THROW
;

953 
	$ídu£rshñl
 (Ë
__THROW
;

954 
	$£tu£rshñl
 (Ë
__THROW
;

960 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

964 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

967 
	$chroŸ
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

971 *
	$gë∑ss
 (
__c⁄°
 *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

975 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


980 
	`fsync
 (
__fd
);

984 #ifde‡
__USE_GNU


987 
	$syncfs
 (
__fd
Ë
__THROW
;

991 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


994 
	`gëho°id
 ();

997 
	$sync
 (Ë
__THROW
;

1000 #i‡
deföed
 
__USE_BSD
 || !deföed 
__USE_XOPEN2K


1003 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

1008 
	$gëdèbÀsize
 (Ë
__THROW
;

1014 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


1017 #i‚de‡
__USE_FILE_OFFSET64


1018 
	$åunˇã
 (
__c⁄°
 *
__fûe
, 
__off_t
 
__Àngth
)

1019 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1021 #ifde‡
__REDIRECT_NTH


1022 
	`__REDIRECT_NTH
 (
åunˇã
,

1023 (
__c⁄°
 *
__fûe
, 
__off64_t
 
__Àngth
),

1024 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1026 
	#åunˇã
 
åunˇã64


	)

1029 #ifde‡
__USE_LARGEFILE64


1030 
	$åunˇã64
 (
__c⁄°
 *
__fûe
, 
__off64_t
 
__Àngth
)

1031 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1036 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1039 #i‚de‡
__USE_FILE_OFFSET64


1040 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1042 #ifde‡
__REDIRECT_NTH


1043 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1044 
·runˇã64
Ë
__wur
;

1046 
	#·runˇã
 
·runˇã64


	)

1049 #ifde‡
__USE_LARGEFILE64


1050 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1056 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1057 || 
deföed
 
__USE_MISC


1061 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1067 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1071 #ifde‡
__USE_MISC


1082 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1087 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1099 
	#F_ULOCK
 0

	)

1100 
	#F_LOCK
 1

	)

1101 
	#F_TLOCK
 2

	)

1102 
	#F_TEST
 3

	)

1104 #i‚de‡
__USE_FILE_OFFSET64


1105 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1107 #ifde‡
__REDIRECT


1108 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1109 
lockf64
Ë
__wur
;

1111 
	#lockf
 
lockf64


	)

1114 #ifde‡
__USE_LARGEFILE64


1115 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1120 #ifde‡
__USE_GNU


1125 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1126 (
__exãnsi⁄__
 \

1127 ({ 
__ªsu…
; \

1128 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1129 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1130 
__ªsu…
; 
	}
}))

	)

1133 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1136 
fd©async
 (
__fûdes
);

1142 #ifdef 
__USE_XOPEN


1144 *
	$¸y±
 (
__c⁄°
 *
__key
, __c⁄° *
__ß…
)

1145 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1149 
	$í¸y±
 (*
__libc_block
, 
__edÊag
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1156 
	$swab
 (
__c⁄°
 *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1157 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1163 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


1165 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1170 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


1171 
	~<bôs/uni°d.h
>

1174 
__END_DECLS


	@/usr/include/alloca.h

19 #i‚def 
_ALLOCA_H


20 
	#_ALLOCA_H
 1

	)

22 
	~<„©uªs.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

27 
	g__BEGIN_DECLS


30 #unde‡
Æloˇ


33 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

35 #ifdef 
__GNUC__


36 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

39 
__END_DECLS


	@/usr/include/ctype.h

24 #i‚def 
_CTYPE_H


25 
	#_CTYPE_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

30 
	g__BEGIN_DECLS


32 #i‚de‡
_ISbô


41 
	~<ídün.h
>

42 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


43 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

45 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

50 
	m_ISuµî
 = 
_ISbô
 (0),

51 
	m_ISlowî
 = 
_ISbô
 (1),

52 
	m_ISÆpha
 = 
_ISbô
 (2),

53 
	m_ISdigô
 = 
_ISbô
 (3),

54 
	m_ISxdigô
 = 
_ISbô
 (4),

55 
	m_IS•a˚
 = 
_ISbô
 (5),

56 
	m_IS¥öt
 = 
_ISbô
 (6),

57 
	m_ISgøph
 = 
_ISbô
 (7),

58 
	m_ISbœnk
 = 
_ISbô
 (8),

59 
	m_IS˙ål
 = 
_ISbô
 (9),

60 
	m_ISpun˘
 = 
_ISbô
 (10),

61 
	m_ISÆnum
 = 
_ISbô
 (11)

81 
__c⁄°
 **
	$__˘y≥_b_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

83 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

85 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

86 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

89 #i‚de‡
__˝lu•lus


90 
	#__is˘y≥
(
c
, 
ty≥
) \

91 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

92 #ñi‡
deföed
 
__USE_EXTERN_INLINES


93 
	#__is˘y≥_f
(
ty≥
) \

94 
__exã∫_ölöe
 \

95 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

97  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

98 
	}

	)
}

101 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

102 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

104 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

106 
__BEGIN_NAMESPACE_STD


112 
__ex˘y≥
 (
iß um
);

113 
__ex˘y≥
 (
ißÕha
);

114 
__ex˘y≥
 (
is˙ål
);

115 
__ex˘y≥
 (
isdigô
);

116 
__ex˘y≥
 (
i¶owî
);

117 
__ex˘y≥
 (
isgøph
);

118 
__ex˘y≥
 (
i•röt
);

119 
__ex˘y≥
 (
i•un˘
);

120 
__ex˘y≥
 (
is•a˚
);

121 
__ex˘y≥
 (
isuµî
);

122 
__ex˘y≥
 (
isxdigô
);

126 
	$tﬁowî
 (
__c
Ë
__THROW
;

129 
	$touµî
 (
__c
Ë
__THROW
;

131 
__END_NAMESPACE_STD


135 #ifdef 
__USE_ISOC99


136 
__BEGIN_NAMESPACE_C99


138 
	`__ex˘y≥
 (
isbœnk
);

140 
__END_NAMESPACE_C99


143 #ifde‡
__USE_GNU


145 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

148 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


152 
	$ißscii
 (
__c
Ë
__THROW
;

156 
	$tﬂscii
 (
__c
Ë
__THROW
;

160 
	`__ex˘y≥
 (
_touµî
);

161 
	`__ex˘y≥
 (
_tﬁowî
);

165 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

166 (
__exãnsi⁄__
 \

167 ({ 
__ªs
; \

168 i‡( (
c
) > 1) \

170 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

172 
__c
 = (
c
); \

173 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

176 
__ªs
 = 
f
 
¨gs
; \

179 
__ªs
 = (
a
)[(Ë(
c
)]; \

180 
__ªs
; 
	}
}))

	)

182 #i‡!
deföed
 
__NO_CTYPE


183 #ifde‡
__is˘y≥_f


184 
	$__is˘y≥_f
 (
Ænum
)

185 
	$__is˘y≥_f
 (
Æpha
)

186 
	$__is˘y≥_f
 (
˙ål
)

187 
	$__is˘y≥_f
 (
digô
)

188 
	$__is˘y≥_f
 (
lowî
)

189 
	$__is˘y≥_f
 (
gøph
)

190 
	$__is˘y≥_f
 (
¥öt
)

191 
	$__is˘y≥_f
 (
pun˘
)

192 
	$__is˘y≥_f
 (
•a˚
)

193 
	$__is˘y≥_f
 (
uµî
)

194 
	$__is˘y≥_f
 (
xdigô
)

195 #ifde‡
__USE_ISOC99


196 
	$__is˘y≥_f
 (
bœnk
)

198 #ñi‡
deföed
 
__is˘y≥


199 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

200 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

201 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

202 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

203 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

204 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

205 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

206 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

207 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

208 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

209 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

210 #ifde‡
__USE_ISOC99


211 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

215 #ifde‡
__USE_EXTERN_INLINES


216 
__exã∫_ölöe
 

217 
	`__NTH
 (
	$tﬁowî
 (
__c
))

219  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

220 
	}
}

222 
__exã∫_ölöe
 

223 
__NTH
 (
	$touµî
 (
__c
))

225  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

226 
	}
}

229 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


230 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

231 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

234 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


235 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

236 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

238 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

239 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

245 #ifde‡
__USE_XOPEN2K8


259 
	~<xloˇÀ.h
>

263 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

264 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

266 
	#__ex˘y≥_l
(
«me
) \

267 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

273 
__ex˘y≥_l
 (
iß um_l
);

274 
__ex˘y≥_l
 (
ißÕha_l
);

275 
__ex˘y≥_l
 (
is˙ål_l
);

276 
__ex˘y≥_l
 (
isdigô_l
);

277 
__ex˘y≥_l
 (
i¶owî_l
);

278 
__ex˘y≥_l
 (
isgøph_l
);

279 
__ex˘y≥_l
 (
i•röt_l
);

280 
__ex˘y≥_l
 (
i•un˘_l
);

281 
__ex˘y≥_l
 (
is•a˚_l
);

282 
__ex˘y≥_l
 (
isuµî_l
);

283 
__ex˘y≥_l
 (
isxdigô_l
);

285 
__ex˘y≥_l
 (
isbœnk_l
);

289 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

290 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

293 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

294 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

296 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


297 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

298 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

299 
	#__touµî_l
(
c
, 
loˇÀ
) \

300 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

301 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

302 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

306 #i‚de‡
__NO_CTYPE


307 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

308 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

309 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

310 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

311 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

312 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

313 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

314 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

315 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

316 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

317 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

319 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

321 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


322 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

323 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

326 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

327 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

328 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

329 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

330 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

331 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

332 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

333 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

334 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

335 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

336 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

338 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

340 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


341 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

342 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

349 
__END_DECLS


	@/usr/include/libio.h

29 #i‚de‡
_IO_STDIO_H


30 
	#_IO_STDIO_H


	)

32 
	~<_G_c⁄fig.h
>

34 
	#_IO_pos_t
 
_G_Âos_t


	)

35 
	#_IO_Âos_t
 
_G_Âos_t


	)

36 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

37 
	#_IO_size_t
 
_G_size_t


	)

38 
	#_IO_ssize_t
 
_G_ssize_t


	)

39 
	#_IO_off_t
 
_G_off_t


	)

40 
	#_IO_off64_t
 
_G_off64_t


	)

41 
	#_IO_pid_t
 
_G_pid_t


	)

42 
	#_IO_uid_t
 
_G_uid_t


	)

43 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

44 
	#_IO_HAVE_SYS_WAIT
 
_G_HAVE_SYS_WAIT


	)

45 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

46 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

47 
	#_IO_va_li°
 
_G_va_li°


	)

48 
	#_IO_wöt_t
 
_G_wöt_t


	)

50 #ifde‡
_G_NEED_STDARG_H


52 
	#__√ed___va_li°


	)

53 
	~<°d¨g.h
>

54 #ifde‡
__GNUC_VA_LIST


55 #unde‡
_IO_va_li°


56 
	#_IO_va_li°
 
__gnuc_va_li°


	)

60 #i‚de‡
__P


61 #i‡
_G_HAVE_SYS_CDEFS


62 
	~<sys/cdefs.h
>

64 #ifde‡
__STDC__


65 
	#__P
(
p
Ë
	)
p

66 
	#__PMT
(
p
Ë
	)
p

68 
	#__P
(
p
Ë()

	)

69 
	#__PMT
(
p
Ë()

	)

75 #i‚de‡
_PARAMS


76 
	#_PARAMS
(
¥Ÿos
Ë
	`__P
’rŸos)

	)

79 #i‚de‡
__STDC__


81 c⁄°

	)

84 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

85 #i‚de‡
_G_HAVE_PRINTF_FP


86 
	#_IO_USE_DTOA
 1

	)

89 #i‚de‡
EOF


90 
	#EOF
 (-1)

	)

92 #i‚de‡
NULL


93 #i‡
deföed
 
__GNUG__
 && \

94 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

95 
	#NULL
 (
__nuŒ
)

	)

97 #i‡!
deföed
(
__˝lu•lus
)

98 
	#NULL
 ((*)0)

	)

100 
	#NULL
 (0)

	)

105 
	#_IOS_INPUT
 1

	)

106 
	#_IOS_OUTPUT
 2

	)

107 
	#_IOS_ATEND
 4

	)

108 
	#_IOS_APPEND
 8

	)

109 
	#_IOS_TRUNC
 16

	)

110 
	#_IOS_NOCREATE
 32

	)

111 
	#_IOS_NOREPLACE
 64

	)

112 
	#_IOS_BIN
 128

	)

120 
	#_IO_MAGIC
 0xFBAD0000

	)

121 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

122 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

123 
	#_IO_USER_BUF
 1

	)

124 
	#_IO_UNBUFFERED
 2

	)

125 
	#_IO_NO_READS
 4

	)

126 
	#_IO_NO_WRITES
 8

	)

127 
	#_IO_EOF_SEEN
 0x10

	)

128 
	#_IO_ERR_SEEN
 0x20

	)

129 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

130 
	#_IO_LINKED
 0x80

	)

131 
	#_IO_IN_BACKUP
 0x100

	)

132 
	#_IO_LINE_BUF
 0x200

	)

133 
	#_IO_TIED_PUT_GET
 0x400

	)

134 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

135 
	#_IO_IS_APPENDING
 0x1000

	)

136 
	#_IO_IS_FILEBUF
 0x2000

	)

137 
	#_IO_BAD_SEEN
 0x4000

	)

138 
	#_IO_USER_LOCK
 0x8000

	)

140 
	#_IO_FLAGS2_MMAP
 1

	)

141 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

142 #ifde‡
_LIBC


143 
	#_IO_FLAGS2_FORTIFY
 4

	)

145 
	#_IO_FLAGS2_USER_WBUF
 8

	)

146 #ifde‡
_LIBC


147 
	#_IO_FLAGS2_SCANF_STD
 16

	)

148 
	#_IO_FLAGS2_NOCLOSE
 32

	)

149 
	#_IO_FLAGS2_CLOEXEC
 64

	)

153 
	#_IO_SKIPWS
 01

	)

154 
	#_IO_LEFT
 02

	)

155 
	#_IO_RIGHT
 04

	)

156 
	#_IO_INTERNAL
 010

	)

157 
	#_IO_DEC
 020

	)

158 
	#_IO_OCT
 040

	)

159 
	#_IO_HEX
 0100

	)

160 
	#_IO_SHOWBASE
 0200

	)

161 
	#_IO_SHOWPOINT
 0400

	)

162 
	#_IO_UPPERCASE
 01000

	)

163 
	#_IO_SHOWPOS
 02000

	)

164 
	#_IO_SCIENTIFIC
 04000

	)

165 
	#_IO_FIXED
 010000

	)

166 
	#_IO_UNITBUF
 020000

	)

167 
	#_IO_STDIO
 040000

	)

168 
	#_IO_DONT_CLOSE
 0100000

	)

169 
	#_IO_BOOLALPHA
 0200000

	)

172 
_IO_jump_t
; 
	g_IO_FILE
;

175 #ifde‡
_IO_MTSAFE_IO


176 #i‡
deföed
 
__GLIBC__
 && __GLIBC__ >= 2

177 
	~<bôs/°dio-lock.h
>

182 
	t_IO_lock_t
;

188 
	s_IO_m¨kî
 {

189 
_IO_m¨kî
 *
	m_√xt
;

190 
_IO_FILE
 *
	m_sbuf
;

194 
	m_pos
;

196 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

197 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

198 
	mpublic
:

199 
°ªamm¨kî
(
°ªambuf
 *
sb
);

200 ~
°ªamm¨kî
();

201 
ßvög
(Ë{  
	m_•os
 == -2; }

202 
dñè
(
°ªamm¨kî
&);

203 
dñè
();

208 
	e__codecvt_ªsu…


210 
	m__codecvt_ok
,

211 
	m__codecvt_∑πül
,

212 
	m__codecvt_îr‹
,

213 
	m__codecvt_noc⁄v


216 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


219 
	s_IO_codecvt


221 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

222 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

223 
	m__mb°©e_t
 *,

224 c⁄° 
	mwch¨_t
 *,

225 c⁄° 
	mwch¨_t
 *,

226 c⁄° 
	mwch¨_t
 **, *,

228 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

229 
	m__mb°©e_t
 *, *,

231 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

232 
	m__mb°©e_t
 *,

234 c⁄° **, 
	mwch¨_t
 *,

235 
	mwch¨_t
 *, wchar_t **);

236 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

237 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

238 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

239 c⁄° *, c⁄° *, 
	m_IO_size_t
);

240 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

242 
_IO_ic⁄v_t
 
	m__cd_ö
;

243 
_IO_ic⁄v_t
 
	m__cd_out
;

247 
	s_IO_wide_d©a


249 
wch¨_t
 *
	m_IO_ªad_±r
;

250 
wch¨_t
 *
	m_IO_ªad_íd
;

251 
wch¨_t
 *
	m_IO_ªad_ba£
;

252 
wch¨_t
 *
	m_IO_wrôe_ba£
;

253 
wch¨_t
 *
	m_IO_wrôe_±r
;

254 
wch¨_t
 *
	m_IO_wrôe_íd
;

255 
wch¨_t
 *
	m_IO_buf_ba£
;

256 
wch¨_t
 *
	m_IO_buf_íd
;

258 
wch¨_t
 *
	m_IO_ßve_ba£
;

259 
wch¨_t
 *
	m_IO_backup_ba£
;

261 
wch¨_t
 *
	m_IO_ßve_íd
;

263 
__mb°©e_t
 
	m_IO_°©e
;

264 
__mb°©e_t
 
	m_IO_œ°_°©e
;

265 
_IO_codecvt
 
	m_codecvt
;

267 
wch¨_t
 
	m_sh‹tbuf
[1];

269 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

273 
	s_IO_FILE
 {

274 
	m_Êags
;

275 
	#_IO_fûe_Êags
 
_Êags


	)

279 * 
	m_IO_ªad_±r
;

280 * 
	m_IO_ªad_íd
;

281 * 
	m_IO_ªad_ba£
;

282 * 
	m_IO_wrôe_ba£
;

283 * 
	m_IO_wrôe_±r
;

284 * 
	m_IO_wrôe_íd
;

285 * 
	m_IO_buf_ba£
;

286 * 
	m_IO_buf_íd
;

288 *
	m_IO_ßve_ba£
;

289 *
	m_IO_backup_ba£
;

290 *
	m_IO_ßve_íd
;

292 
_IO_m¨kî
 *
	m_m¨kîs
;

294 
_IO_FILE
 *
	m_chaö
;

296 
	m_fûío
;

298 
	m_blksize
;

300 
	m_Êags2
;

302 
_IO_off_t
 
	m_ﬁd_off£t
;

304 
	#__HAVE_COLUMN


	)

306 
	m_cur_cﬁumn
;

307 sig√d 
	m_vèbÀ_off£t
;

308 
	m_sh‹tbuf
[1];

312 
_IO_lock_t
 *
	m_lock
;

313 #ifde‡
_IO_USE_OLD_IO_FILE


316 
	s_IO_FILE_com∂ëe


318 
_IO_FILE
 
	m_fûe
;

320 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

321 
_IO_off64_t
 
	m_off£t
;

322 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


324 
_IO_codecvt
 *
	m_codecvt
;

325 
_IO_wide_d©a
 *
	m_wide_d©a
;

326 
_IO_FILE
 *
	m_‰ìªs_li°
;

327 *
	m_‰ìªs_buf
;

328 
size_t
 
	m_‰ìªs_size
;

330 *
	m__∑d1
;

331 *
	m__∑d2
;

332 *
	m__∑d3
;

333 *
	m__∑d4
;

334 
size_t
 
	m__∑d5
;

336 
	m_mode
;

338 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

342 #i‚de‡
__˝lu•lus


343 
_IO_FILE
 
	t_IO_FILE
;

346 
	g_IO_FILE_∂us
;

348 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

349 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

350 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

351 #i‚de‡
_LIBC


352 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

353 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

354 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

356 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

357 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

358 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

366 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

374 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, 
	t__c⁄°
 *
	t__buf
,

375 
	tsize_t
 
	t__n
);

383 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

386 
	t__io_˛o£_‚
 (*
	t__cookõ
);

389 #ifde‡
_GNU_SOURCE


391 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

392 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

393 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

394 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

399 
__io_ªad_‚
 *
	mªad
;

400 
__io_wrôe_‚
 *
	mwrôe
;

401 
__io_£ek_‚
 *
	m£ek
;

402 
__io_˛o£_‚
 *
	m˛o£
;

403 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

404 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

406 
	g_IO_cookõ_fûe
;

409 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

410 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

414 #ifde‡
__˝lu•lus


418 
__undîÊow
 (
_IO_FILE
 *);

419 
__uÊow
 (
_IO_FILE
 *);

420 
__ovîÊow
 (
_IO_FILE
 *, );

421 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


422 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

423 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

424 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

427 #i‡ 
__GNUC__
 >= 3

428 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

430 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

433 
	#_IO_gëc_u∆ocked
(
_Â
) \

434 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

435 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

436 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

437 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

438 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

439 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

440 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

441 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

442 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

443 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

445 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


446 
	#_IO_gëwc_u∆ocked
(
_Â
) \

447 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

448 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

449 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

450 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

451 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

452 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

453 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

454 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

455 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

456 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

459 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

460 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

462 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

463 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

464 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

465 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

467 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

470 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

471 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

473 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

474 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

475 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

477 #ifde‡
_IO_MTSAFE_IO


478 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

479 
	#_IO_Êockfûe
(
_Â
) \

480 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

481 
	#_IO_fu∆ockfûe
(
_Â
) \

482 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

484 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

485 
	#_IO_Êockfûe
(
_Â
Ë

	)

486 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

487 
	#_IO_·rylockfûe
(
_Â
Ë

	)

488 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

489 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

492 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

493 
_IO_va_li°
, *
__ª°ri˘
);

494 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

495 
_IO_va_li°
);

496 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

497 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

499 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

500 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

502 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

504 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


505 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

506 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

507 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

508 #i‡
__GNUC__
 >= 2

511 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


512 
	~<shlib-com∑t.h
>

513 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

514 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

515 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

516 c⁄° 
_IO_°dö_u£d
;

517 
wók_exã∫
 (
_IO_°dö_u£d
);

520 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


521 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

525 
	#_IO_fwide
(
__Â
, 
__mode
) \

526 ({ 
__ªsu…
 = (
__mode
); \

527 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

529 i‡((
__Â
)->
_mode
 == 0) \

531 (
__Â
)->
_mode
 = -1; \

532 
__ªsu…
 = (
__Â
)->
_mode
; \

534 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

535 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

537 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

538 
__ªsu…
; })

	)

541 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

542 
_IO_va_li°
, *
__ª°ri˘
);

543 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

544 
_IO_va_li°
);

545 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

546 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

549 #ifde‡
__LDBL_COMPAT


550 
	~<bôs/libio-ldbl.h
>

553 #ifde‡
__˝lu•lus


	@/usr/include/locale.h

23 #i‚def 
_LOCALE_H


24 
	#_LOCALE_H
 1

	)

26 
	~<„©uªs.h
>

28 
	#__√ed_NULL


	)

29 
	~<°ddef.h
>

30 
	~<bôs/loˇÀ.h
>

32 
	g__BEGIN_DECLS


36 
	#LC_CTYPE
 
__LC_CTYPE


	)

37 
	#LC_NUMERIC
 
__LC_NUMERIC


	)

38 
	#LC_TIME
 
__LC_TIME


	)

39 
	#LC_COLLATE
 
__LC_COLLATE


	)

40 
	#LC_MONETARY
 
__LC_MONETARY


	)

41 
	#LC_MESSAGES
 
__LC_MESSAGES


	)

42 
	#LC_ALL
 
__LC_ALL


	)

43 
	#LC_PAPER
 
__LC_PAPER


	)

44 
	#LC_NAME
 
__LC_NAME


	)

45 
	#LC_ADDRESS
 
__LC_ADDRESS


	)

46 
	#LC_TELEPHONE
 
__LC_TELEPHONE


	)

47 
	#LC_MEASUREMENT
 
__LC_MEASUREMENT


	)

48 
	#LC_IDENTIFICATION
 
__LC_IDENTIFICATION


	)

51 
__BEGIN_NAMESPACE_STD


54 
	slc⁄v


58 *
	mdecimÆ_poöt
;

59 *
	mthoußnds_£p
;

65 *
	mgroupög
;

71 *
	möt_cuº_symbﬁ
;

72 *
	mcuºícy_symbﬁ
;

73 *
	mm⁄_decimÆ_poöt
;

74 *
	mm⁄_thoußnds_£p
;

75 *
	mm⁄_groupög
;

76 *
	mposôive_sign
;

77 *
	m√g©ive_sign
;

78 
	möt_‰ac_digôs
;

79 
	m‰ac_digôs
;

81 
	mp_cs_¥e˚des
;

83 
	mp_£p_by_•a˚
;

85 
	mn_cs_¥e˚des
;

87 
	mn_£p_by_•a˚
;

94 
	mp_sign_po¢
;

95 
	mn_sign_po¢
;

96 #ifde‡
__USE_ISOC99


98 
	möt_p_cs_¥e˚des
;

100 
	möt_p_£p_by_•a˚
;

102 
	möt_n_cs_¥e˚des
;

104 
	möt_n_£p_by_•a˚
;

111 
	möt_p_sign_po¢
;

112 
	möt_n_sign_po¢
;

114 
	m__öt_p_cs_¥e˚des
;

115 
	m__öt_p_£p_by_•a˚
;

116 
	m__öt_n_cs_¥e˚des
;

117 
	m__öt_n_£p_by_•a˚
;

118 
	m__öt_p_sign_po¢
;

119 
	m__öt_n_sign_po¢
;

125 *
	$£éoˇÀ
 (
__ˇãg‹y
, 
__c⁄°
 *
__loˇÀ
Ë
__THROW
;

128 
lc⁄v
 *
	$loˇÀc⁄v
 (Ë
__THROW
;

130 
__END_NAMESPACE_STD


133 #ifdef 
__USE_XOPEN2K8


146 
	~<xloˇÀ.h
>

152 
__loˇÀ_t
 
	$√wloˇÀ
 (
__ˇãg‹y_mask
, 
__c⁄°
 *
__loˇÀ
,

153 
__loˇÀ_t
 
__ba£
Ë
__THROW
;

159 
	#LC_CTYPE_MASK
 (1 << 
__LC_CTYPE
)

	)

160 
	#LC_NUMERIC_MASK
 (1 << 
__LC_NUMERIC
)

	)

161 
	#LC_TIME_MASK
 (1 << 
__LC_TIME
)

	)

162 
	#LC_COLLATE_MASK
 (1 << 
__LC_COLLATE
)

	)

163 
	#LC_MONETARY_MASK
 (1 << 
__LC_MONETARY
)

	)

164 
	#LC_MESSAGES_MASK
 (1 << 
__LC_MESSAGES
)

	)

165 
	#LC_PAPER_MASK
 (1 << 
__LC_PAPER
)

	)

166 
	#LC_NAME_MASK
 (1 << 
__LC_NAME
)

	)

167 
	#LC_ADDRESS_MASK
 (1 << 
__LC_ADDRESS
)

	)

168 
	#LC_TELEPHONE_MASK
 (1 << 
__LC_TELEPHONE
)

	)

169 
	#LC_MEASUREMENT_MASK
 (1 << 
__LC_MEASUREMENT
)

	)

170 
	#LC_IDENTIFICATION_MASK
 (1 << 
__LC_IDENTIFICATION
)

	)

171 
	#LC_ALL_MASK
 (
LC_CTYPE_MASK
 \

172 | 
LC_NUMERIC_MASK
 \

173 | 
LC_TIME_MASK
 \

174 | 
LC_COLLATE_MASK
 \

175 | 
LC_MONETARY_MASK
 \

176 | 
LC_MESSAGES_MASK
 \

177 | 
LC_PAPER_MASK
 \

178 | 
LC_NAME_MASK
 \

179 | 
LC_ADDRESS_MASK
 \

180 | 
LC_TELEPHONE_MASK
 \

181 | 
LC_MEASUREMENT_MASK
 \

182 | 
LC_IDENTIFICATION_MASK
 \

183 )

	)

187 
__loˇÀ_t
 
	$du∂oˇÀ
 (
__loˇÀ_t
 
__d©a£t
Ë
__THROW
;

191 
	$‰ìloˇÀ
 (
__loˇÀ_t
 
__d©a£t
Ë
__THROW
;

198 
__loˇÀ_t
 
	$u£loˇÀ
 (
__loˇÀ_t
 
__d©a£t
Ë
__THROW
;

202 
	#LC_GLOBAL_LOCALE
 ((
__loˇÀ_t
Ë-1L)

	)

206 
__END_DECLS


	@/usr/include/time.h

23 #i‚def 
_TIME_H


25 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

26 ! 
deföed
 
	g__√ed_time•ec
)

27 
	#_TIME_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 #ifdef 
_TIME_H


36 
	#__√ed_size_t


	)

37 
	#__√ed_NULL


	)

38 
	~<°ddef.h
>

42 
	~<bôs/time.h
>

45 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


46 #i‚de‡
CLK_TCK


47 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

53 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

54 
	#__˛ock_t_deföed
 1

	)

56 
	~<bôs/ty≥s.h
>

58 
__BEGIN_NAMESPACE_STD


60 
__˛ock_t
 
	t˛ock_t
;

61 
	g__END_NAMESPACE_STD


62 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


63 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

67 #unde‡
__√ed_˛ock_t


69 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

70 
	#__time_t_deföed
 1

	)

72 
	~<bôs/ty≥s.h
>

74 
__BEGIN_NAMESPACE_STD


76 
__time_t
 
	ttime_t
;

77 
__END_NAMESPACE_STD


78 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


79 
	$__USING_NAMESPACE_STD
(
time_t
)

83 #unde‡
__√ed_time_t


85 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

86 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

87 
	#__˛ockid_t_deföed
 1

	)

89 
	~<bôs/ty≥s.h
>

92 
__˛ockid_t
 
	t˛ockid_t
;

95 #unde‡
__˛ockid_time_t


97 #i‡!
deföed
 
__timî_t_deföed
 && \

98 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

99 
	#__timî_t_deföed
 1

	)

101 
	~<bôs/ty≥s.h
>

104 
__timî_t
 
	ttimî_t
;

107 #unde‡
__√ed_timî_t


110 #i‡!
deföed
 
__time•ec_deföed
 && \

111 ((
deföed
 
_TIME_H
 && \

112 (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
)) || \

113 
deföed
 
__√ed_time•ec
)

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_BSD


146 
tm_gmtoff
;

147 
__c⁄°
 *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 
__c⁄°
 *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 
__BEGIN_NAMESPACE_STD


183 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

186 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

189 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

190 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

193 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

199 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

200 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

201 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

202 
__END_NAMESPACE_STD


204 #ifde‡
__USE_XOPEN


207 *
	$°Ωtime
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

208 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

209 
__THROW
;

212 #ifde‡
__USE_XOPEN2K8


215 
	~<xloˇÀ.h
>

217 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

218 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

219 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

220 
__loˇÀ_t
 
__loc
Ë
__THROW
;

223 #ifde‡
__USE_GNU


224 *
	$°Ωtime_l
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

225 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

230 
__BEGIN_NAMESPACE_STD


233 
tm
 *
	$gmtime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

237 
tm
 *
	$loˇ…ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

238 
__END_NAMESPACE_STD


240 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


243 
tm
 *
	$gmtime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

244 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

248 
tm
 *
	$loˇ…ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

249 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

252 
__BEGIN_NAMESPACE_STD


255 *
	$as˘ime
 (
__c⁄°
 
tm
 *
__ç
Ë
__THROW
;

258 *
	$˘ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

259 
__END_NAMESPACE_STD


261 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


266 *
	$as˘ime_r
 (
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

267 *
__ª°ri˘
 
__buf
Ë
__THROW
;

270 *
	$˘ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

271 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
__tz«me
[2];

277 
__daylight
;

278 
__timez⁄e
;

281 #ifdef 
__USE_POSIX


283 *
tz«me
[2];

287 
	$tz£t
 (Ë
__THROW
;

290 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


291 
daylight
;

292 
timez⁄e
;

295 #ifde‡
__USE_SVID


298 
	$°ime
 (
__c⁄°
 
time_t
 *
__whí
Ë
__THROW
;

304 
	#__i¶óp
(
yór
) \

305 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

308 #ifde‡
__USE_MISC


313 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

316 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

319 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

323 #ifde‡
__USE_POSIX199309


328 
	`«no¶ìp
 (
__c⁄°
 
time•ec
 *
__ªque°ed_time
,

329 
time•ec
 *
__ªmaöög
);

333 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

336 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

339 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, 
__c⁄°
 
time•ec
 *
__ç
)

340 
__THROW
;

342 #ifde‡
__USE_XOPEN2K


347 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

348 
__c⁄°
 
time•ec
 *
__ªq
,

349 
time•ec
 *
__ªm
);

352 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

357 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

358 
sigevít
 *
__ª°ri˘
 
__evp
,

359 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

362 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

365 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

366 
__c⁄°
 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

367 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

370 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

371 
__THROW
;

374 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

378 #ifde‡
__USE_XOPEN_EXTENDED


390 
gëd©e_îr
;

399 
tm
 *
	`gëd©e
 (
__c⁄°
 *
__°rög
);

402 #ifde‡
__USE_GNU


413 
	`gëd©e_r
 (
__c⁄°
 *
__ª°ri˘
 
__°rög
,

414 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

417 
__END_DECLS


	@/usr/include/xlocale.h

21 #i‚de‡
_XLOCALE_H


22 
	#_XLOCALE_H
 1

	)

28 
	s__loˇÀ_°ru˘


31 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

34 c⁄° *
	m__˘y≥_b
;

35 c⁄° *
	m__˘y≥_tﬁowî
;

36 c⁄° *
	m__˘y≥_touµî
;

39 c⁄° *
	m__«mes
[13];

40 } *
	t__loˇÀ_t
;

43 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

21 
	#_G_size_t
 
size_t


	)

24 
__off_t
 
	m__pos
;

25 
__mb°©e_t
 
	m__°©e
;

26 } 
	t_G_Âos_t
;

29 
__off64_t
 
	m__pos
;

30 
__mb°©e_t
 
	m__°©e
;

31 } 
	t_G_Âos64_t
;

32 
	#_G_ssize_t
 
__ssize_t


	)

33 
	#_G_off_t
 
__off_t


	)

34 
	#_G_off64_t
 
__off64_t


	)

35 
	#_G_pid_t
 
__pid_t


	)

36 
	#_G_uid_t
 
__uid_t


	)

37 
	#_G_wch¨_t
 
wch¨_t


	)

38 
	#_G_wöt_t
 
wöt_t


	)

39 
	#_G_°©64
 
°©64


	)

40 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


41 
	~<gc⁄v.h
>

44 
__gc⁄v_öfo
 
	m__cd
;

47 
__gc⁄v_öfo
 
	m__cd
;

48 
__gc⁄v_°ï_d©a
 
	m__d©a
;

49 } 
	m__comböed
;

50 } 
	t_G_ic⁄v_t
;

53 
	t_G_öt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

54 
	t_G_öt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

55 
	t_G_uöt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

56 
	t_G_uöt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

58 
	#_G_HAVE_BOOL
 1

	)

62 
	#_G_HAVE_ATEXIT
 1

	)

63 
	#_G_HAVE_SYS_CDEFS
 1

	)

64 
	#_G_HAVE_SYS_WAIT
 1

	)

65 
	#_G_NEED_STDARG_H
 1

	)

66 
	#_G_va_li°
 
__gnuc_va_li°


	)

68 
	#_G_HAVE_PRINTF_FP
 1

	)

69 
	#_G_HAVE_MMAP
 1

	)

70 
	#_G_HAVE_MREMAP
 1

	)

71 
	#_G_HAVE_LONG_DOUBLE_IO
 1

	)

72 
	#_G_HAVE_IO_FILE_OPEN
 1

	)

73 
	#_G_HAVE_IO_GETLINE_INFO
 1

	)

75 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

77 
	#_G_OPEN64
 
__›í64


	)

78 
	#_G_LSEEK64
 
__l£ek64


	)

79 
	#_G_MMAP64
 
__mm≠64


	)

80 
	#_G_FSTAT64
(
fd
,
buf
Ë
	`__fx°©64
 (
_STAT_VER
, fd, buf)

	)

83 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

85 
	#_G_BUFSIZ
 8192

	)

88 
	#_G_NAMES_HAVE_UNDERSCORE
 0

	)

89 
	#_G_VTABLE_LABEL_HAS_LENGTH
 1

	)

90 
	#_G_USING_THUNKS
 1

	)

91 
	#_G_VTABLE_LABEL_PREFIX
 "__vt_"

	)

92 
	#_G_VTABLE_LABEL_PREFIX_ID
 
__vt_


	)

95 #i‡
deföed
 
__˝lu•lus
 || deföed 
__STDC__


96 
	#_G_ARGS
(
ARGLIST
Ë
	)
ARGLIST

98 
	#_G_ARGS
(
ARGLIST
Ë()

	)

	@/usr/include/endian.h

19 #i‚def 
_ENDIAN_H


20 
	#_ENDIAN_H
 1

	)

22 
	~<„©uªs.h
>

32 
	#__LITTLE_ENDIAN
 1234

	)

33 
	#__BIG_ENDIAN
 4321

	)

34 
	#__PDP_ENDIAN
 3412

	)

37 
	~<bôs/ídün.h
>

41 #i‚de‡
__FLOAT_WORD_ORDER


42 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

45 #ifdef 
__USE_BSD


46 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

47 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

48 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

49 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

52 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


53 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

54 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


55 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

59 #ifde‡
__USE_BSD


61 
	~<bôs/byãsw≠.h
>

63 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


64 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

65 
	#htﬁe16
(
x
Ë(x)

	)

66 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

67 
	#À16toh
(
x
Ë(x)

	)

69 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

70 
	#htﬁe32
(
x
Ë(x)

	)

71 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

72 
	#À32toh
(
x
Ë(x)

	)

74 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

75 
	#htﬁe64
(
x
Ë(x)

	)

76 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

77 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/gconv.h

23 #i‚de‡
_GCONV_H


24 
	#_GCONV_H
 1

	)

26 
	~<„©uªs.h
>

27 
	#__√ed_mb°©e_t


	)

28 
	#__√ed_wöt_t


	)

29 
	~<wch¨.h
>

30 
	#__√ed_size_t


	)

31 
	#__√ed_wch¨_t


	)

32 
	~<°ddef.h
>

35 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

40 
	m__GCONV_OK
 = 0,

41 
	m__GCONV_NOCONV
,

42 
	m__GCONV_NODB
,

43 
	m__GCONV_NOMEM
,

45 
	m__GCONV_EMPTY_INPUT
,

46 
	m__GCONV_FULL_OUTPUT
,

47 
	m__GCONV_ILLEGAL_INPUT
,

48 
	m__GCONV_INCOMPLETE_INPUT
,

50 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

51 
	m__GCONV_INTERNAL_ERROR


58 
	m__GCONV_IS_LAST
 = 0x0001,

59 
	m__GCONV_IGNORE_ERRORS
 = 0x0002,

60 
	m__GCONV_SWAP
 = 0x0004

65 
	g__gc⁄v_°ï
;

66 
	g__gc⁄v_°ï_d©a
;

67 
	g__gc⁄v_lﬂded_obje˘
;

68 
	g__gc⁄v_å™s_d©a
;

72 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

73 
	t__c⁄°
 **, __const *,

74 **, 
	tsize_t
 *, , );

77 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

80 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

81 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

85 (*
	t__gc⁄v_å™s_f˘
Ë(
	t__gc⁄v_°ï
 *,

86 
	t__gc⁄v_°ï_d©a
 *, *,

87 
	t__c⁄°
 *,

88 
	t__c⁄°
 **,

89 
	t__c⁄°
 *, **,

90 
	tsize_t
 *);

93 (*
	t__gc⁄v_å™s_c⁄ãxt_f˘
Ë(*, 
	t__c⁄°
 *,

94 
	t__c⁄°
 *,

98 (*
	t__gc⁄v_å™s_quîy_f˘
Ë(
	t__c⁄°
 *, __const ***,

99 
	tsize_t
 *);

102 (*
	t__gc⁄v_å™s_öô_f˘
) (**, const *);

103 (*
	t__gc⁄v_å™s_íd_f˘
) (*);

105 
	s__gc⁄v_å™s_d©a


108 
__gc⁄v_å™s_f˘
 
__å™s_f˘
;

109 
__gc⁄v_å™s_c⁄ãxt_f˘
 
__å™s_c⁄ãxt_f˘
;

110 
__gc⁄v_å™s_íd_f˘
 
__å™s_íd_f˘
;

111 *
__d©a
;

112 
__gc⁄v_å™s_d©a
 *
__√xt
;

117 
	s__gc⁄v_°ï


119 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

120 
__c⁄°
 *
__mod«me
;

122 
__cou¡î
;

124 *
__‰om_«me
;

125 *
__to_«me
;

127 
__gc⁄v_f˘
 
__f˘
;

128 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

129 
__gc⁄v_öô_f˘
 
__öô_f˘
;

130 
__gc⁄v_íd_f˘
 
__íd_f˘
;

134 
__mö_√eded_‰om
;

135 
__max_√eded_‰om
;

136 
__mö_√eded_to
;

137 
__max_√eded_to
;

140 
__°©eful
;

142 *
__d©a
;

147 
	s__gc⁄v_°ï_d©a


149 *
__outbuf
;

150 *
__outbu„nd
;

154 
__Êags
;

158 
__övoˇti⁄_cou¡î
;

162 
__öã∫Æ_u£
;

164 
__mb°©e_t
 *
__°©ï
;

165 
__mb°©e_t
 
__°©e
;

169 
__gc⁄v_å™s_d©a
 *
__å™s
;

174 
	s__gc⁄v_öfo


176 
size_t
 
__n°ïs
;

177 
__gc⁄v_°ï
 *
__°ïs
;

178 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

179 } *
	t__gc⁄v_t
;

	@/usr/include/wchar.h

24 #i‚de‡
_WCHAR_H


26 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


27 
	#_WCHAR_H
 1

	)

28 
	~<„©uªs.h
>

31 #ifde‡
_WCHAR_H


33 
	#__√ed___FILE


	)

34 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


35 
	#__√ed_FILE


	)

37 
	~<°dio.h
>

39 
	#__√ed___va_li°


	)

40 
	~<°d¨g.h
>

42 
	~<bôs/wch¨.h
>

45 
	#__√ed_size_t


	)

46 
	#__√ed_wch¨_t


	)

47 
	#__√ed_NULL


	)

49 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


50 #unde‡
__√ed_wöt_t


51 
	#__√ed_wöt_t


	)

52 
	~<°ddef.h
>

56 #i‚de‡
_WINT_T


61 
	#_WINT_T


	)

62 
	twöt_t
;

66 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

67 && 
deföed
 
__WINT_TYPE__


68 
__BEGIN_NAMESPACE_STD


69 
__WINT_TYPE__
 
	twöt_t
;

70 
	g__END_NAMESPACE_STD


75 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

76 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

80 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
__mb°©e_t_deföed


81 
	#__mb°©e_t_deföed
 1

	)

85 
	m__cou¡
;

88 #ifde‡
__WINT_TYPE__


89 
__WINT_TYPE__
 
	m__wch
;

91 
wöt_t
 
	m__wch
;

93 
	m__wchb
[4];

94 } 
	m__vÆue
;

95 } 
	t__mb°©e_t
;

97 #unde‡
__√ed_mb°©e_t


102 #ifde‡
_WCHAR_H


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 #ifde‡
__USE_GNU


109 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

112 #i‚de‡
WCHAR_MIN


114 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

115 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

118 #i‚de‡
WEOF


119 
	#WEOF
 (0xffffffffu)

	)

124 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


125 
	~<w˘y≥.h
>

129 
__BEGIN_DECLS


131 
__BEGIN_NAMESPACE_STD


134 
tm
;

135 
__END_NAMESPACE_STD


139 
	$__USING_NAMESPACE_STD
(
tm
)

142 
__BEGIN_NAMESPACE_STD


144 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

145 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

147 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

149 
__THROW
;

152 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

153 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

155 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

156 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

157 
__THROW
;

160 
	$wcscmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
)

161 
__THROW
 
__©åibuã_puª__
;

163 
	$wc¢cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

164 
__THROW
 
__©åibuã_puª__
;

165 
__END_NAMESPACE_STD


167 #ifde‡
__USE_XOPEN2K8


169 
	$wcsˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

172 
	$wc¢ˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

173 
size_t
 
__n
Ë
__THROW
;

177 
	~<xloˇÀ.h
>

179 
	$wcsˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

180 
__loˇÀ_t
 
__loc
Ë
__THROW
;

182 
	$wc¢ˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

183 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

186 
__BEGIN_NAMESPACE_STD


189 
	$wcscﬁl
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

193 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

194 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

195 
__END_NAMESPACE_STD


197 #ifde‡
__USE_XOPEN2K8


203 
	$wcscﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

204 
__loˇÀ_t
 
__loc
Ë
__THROW
;

209 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

210 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

213 
wch¨_t
 *
	$wcsdup
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

216 
__BEGIN_NAMESPACE_STD


218 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


219 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

220 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

221 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

222 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

224 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

225 
__THROW
 
__©åibuã_puª__
;

228 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


229 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

230 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

231 "C++" 
__c⁄°
 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

232 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

234 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

235 
__THROW
 
__©åibuã_puª__
;

237 
__END_NAMESPACE_STD


239 #ifde‡
__USE_GNU


242 
wch¨_t
 *
	$wcsch∫ul
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__wc
)

243 
__THROW
 
__©åibuã_puª__
;

246 
__BEGIN_NAMESPACE_STD


249 
size_t
 
	$wcsc•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ªje˘
)

250 
__THROW
 
__©åibuã_puª__
;

253 
size_t
 
	$wcs•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

254 
__THROW
 
__©åibuã_puª__
;

256 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


257 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, 
__c⁄°
 wch¨_à*
__ac˚±
)

258 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

259 "C++" 
__c⁄°
 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
,

260 
__c⁄°
 
wch¨_t
 *
__ac˚±
)

261 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

263 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

264 
__THROW
 
__©åibuã_puª__
;

267 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


268 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, 
__c⁄°
 wch¨_à*
__√edÀ
)

269 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

270 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
,

271 
__c⁄°
 
wch¨_t
 *
__√edÀ
)

272 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

274 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

275 
__THROW
 
__©åibuã_puª__
;

279 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

280 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

281 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

284 
size_t
 
	$wc¶í
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

285 
__END_NAMESPACE_STD


287 #ifde‡
__USE_XOPEN


289 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


290 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, 
__c⁄°
 wch¨_à*
__√edÀ
)

291 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

292 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
,

293 
__c⁄°
 
wch¨_t
 *
__√edÀ
)

294 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

296 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

297 
__THROW
 
__©åibuã_puª__
;

301 #ifde‡
__USE_XOPEN2K8


303 
size_t
 
	$wc¢Àn
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

304 
__THROW
 
__©åibuã_puª__
;

308 
__BEGIN_NAMESPACE_STD


310 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


311 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

312 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

313 "C++" 
__c⁄°
 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
,

314 
size_t
 
__n
)

315 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

317 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

318 
__THROW
 
__©åibuã_puª__
;

322 
	$wmemcmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

323 
__THROW
 
__©åibuã_puª__
;

326 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

327 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

331 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
, 
size_t
 
__n
)

332 
__THROW
;

335 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

336 
__END_NAMESPACE_STD


338 #ifde‡
__USE_GNU


341 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

342 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

343 
__THROW
;

347 
__BEGIN_NAMESPACE_STD


350 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

354 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

358 
	$mbsöô
 (
__c⁄°
 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

362 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

363 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

364 
mb°©e_t
 *
__p
Ë
__THROW
;

367 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

368 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

371 
size_t
 
	$__mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

372 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

373 
size_t
 
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

374 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

375 
__END_NAMESPACE_STD


377 #ifde‡
__USE_EXTERN_INLINES


383 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

384 
__exã∫_ölöe
 
wöt_t


385 
	`__NTH
 (
	$btowc
 (
__c
))

386 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

387 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

389 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

390 
__exã∫_ölöe
 

391 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

392 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

393 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

395 
__exã∫_ölöe
 
size_t


396 
__NTH
 (
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

397 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

398 {  (
__ps
 !
NULL


399 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

402 
__BEGIN_NAMESPACE_STD


405 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

406 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

407 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

411 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

412 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

413 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

414 
__END_NAMESPACE_STD


417 #ifdef 
__USE_XOPEN2K8


420 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

421 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

422 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

426 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

427 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

428 
size_t
 
__nwc
, size_à
__Àn
,

429 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

434 #ifde‡
__USE_XOPEN


436 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

440 
	$wcswidth
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

444 
__BEGIN_NAMESPACE_STD


447 
	$wc°od
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

448 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

449 
__END_NAMESPACE_STD


451 #ifde‡
__USE_ISOC99


452 
__BEGIN_NAMESPACE_C99


454 
	$wc°of
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

455 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

456 
	$wc°ﬁd
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

457 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

458 
__END_NAMESPACE_C99


462 
__BEGIN_NAMESPACE_STD


465 
	$wc°ﬁ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

466 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

470 
	$wc°oul
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

471 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

472 
__THROW
;

473 
__END_NAMESPACE_STD


475 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GNUC__
 && deföed 
__USE_GNU
)

476 
__BEGIN_NAMESPACE_C99


479 
__exãnsi⁄__


480 
	$wc°ﬁl
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

481 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

482 
__THROW
;

486 
__exãnsi⁄__


487 
	$wc°ouŒ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

488 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

489 
__ba£
Ë
__THROW
;

490 
__END_NAMESPACE_C99


493 #i‡
deföed
 
__GNUC__
 && deföed 
__USE_GNU


496 
__exãnsi⁄__


497 
	$wc°oq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

498 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

499 
__THROW
;

503 
__exãnsi⁄__


504 
	$wc°ouq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

505 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

506 
__ba£
Ë
__THROW
;

509 #ifde‡
__USE_GNU


523 
	~<xloˇÀ.h
>

527 
	$wc°ﬁ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

528 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

529 
__loˇÀ_t
 
__loc
Ë
__THROW
;

531 
	$wc°oul_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

532 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

533 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

535 
__exãnsi⁄__


536 
	$wc°ﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

537 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

538 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

540 
__exãnsi⁄__


541 
	$wc°ouŒ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

542 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

543 
__ba£
, 
__loˇÀ_t
 
__loc
)

544 
__THROW
;

546 
	$wc°od_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

547 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

548 
__THROW
;

550 
	$wc°of_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

551 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

552 
__THROW
;

554 
	$wc°ﬁd_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

555 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

556 
__loˇÀ_t
 
__loc
Ë
__THROW
;

560 #ifde‡
__USE_XOPEN2K8


563 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

564 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

568 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

569 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

570 
__THROW
;

577 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

580 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


581 
__BEGIN_NAMESPACE_STD


584 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

591 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

592 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

598 
	`w¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

601 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

602 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

603 
__THROW
 ;

609 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

610 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

611 
__gnuc_va_li°
 
__¨g
)

617 
	`vw¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

618 
__gnuc_va_li°
 
__¨g
)

622 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

623 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

624 
__gnuc_va_li°
 
__¨g
)

625 
__THROW
 ;

632 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

633 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

639 
	`wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

642 
	$swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

643 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

644 
__THROW
 ;

646 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

647 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

648 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

649 #ifde‡
__REDIRECT


653 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

654 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

655 
__isoc99_fwsˇnf
)

657 
	`__REDIRECT
 (
wsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

658 
__isoc99_wsˇnf
)

660 
	`__REDIRECT_NTH
 (
swsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

661 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

662 ...), 
__isoc99_swsˇnf
)

665 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

666 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

667 
	`__isoc99_wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

668 
	$__isoc99_swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

669 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

670 
__THROW
;

671 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

672 
	#wsˇnf
 
__isoc99_wsˇnf


	)

673 
	#swsˇnf
 
__isoc99_swsˇnf


	)

677 
__END_NAMESPACE_STD


680 #ifde‡
__USE_ISOC99


681 
__BEGIN_NAMESPACE_C99


686 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

687 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

688 
__gnuc_va_li°
 
__¨g
)

694 
	`vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

695 
__gnuc_va_li°
 
__¨g
)

698 
	$vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

699 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

700 
__gnuc_va_li°
 
__¨g
)

701 
__THROW
 ;

703 #i‡!
deföed
 
__USE_GNU
 \

704 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

705 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

706 #ifde‡
__REDIRECT


707 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

708 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

709 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

711 
	`__REDIRECT
 (
vwsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

712 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

714 
	`__REDIRECT_NTH
 (
vswsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

715 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

716 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

719 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

720 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

721 
__gnuc_va_li°
 
__¨g
);

722 
	`__isoc99_vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

723 
__gnuc_va_li°
 
__¨g
);

724 
	$__isoc99_vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

725 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

726 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

727 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

728 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

729 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

733 
__END_NAMESPACE_C99


737 
__BEGIN_NAMESPACE_STD


742 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

743 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

749 
wöt_t
 
	`gëwch¨
 ();

756 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

757 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

763 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

771 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

772 
__FILE
 *
__ª°ri˘
 
__°ªam
);

778 
	`Âutws
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

779 
__FILE
 *
__ª°ri˘
 
__°ªam
);

786 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

787 
__END_NAMESPACE_STD


790 #ifde‡
__USE_GNU


798 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

799 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

807 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

815 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

824 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

825 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

834 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

835 
__FILE
 *
__ª°ri˘
 
__°ªam
);

843 
	`Âutws_u∆ocked
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

844 
__FILE
 *
__ª°ri˘
 
__°ªam
);

848 
__BEGIN_NAMESPACE_C99


852 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

853 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

854 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

855 
__END_NAMESPACE_C99


857 #ifde‡
__USE_GNU


858 
	~<xloˇÀ.h
>

862 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

863 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

864 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

865 
__loˇÀ_t
 
__loc
Ë
__THROW
;

874 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


875 
	#__√ed_iswxxx


	)

876 
	~<w˘y≥.h
>

880 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


881 
	~<bôs/wch¨2.h
>

884 #ifde‡
__LDBL_COMPAT


885 
	~<bôs/wch¨-ldbl.h
>

888 
__END_DECLS


896 #unde‡
__√ed_mb°©e_t


897 #unde‡
__√ed_wöt_t


	@/usr/include/wctype.h

24 #i‚de‡
_WCTYPE_H


26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 #i‚de‡
__√ed_iswxxx


30 
	#_WCTYPE_H
 1

	)

33 
	#__√ed_wöt_t


	)

34 
	~<wch¨.h
>

38 #i‚de‡
WEOF


39 
	#WEOF
 (0xffffffffu)

	)

42 #unde‡
__√ed_iswxxx


47 #i‚de‡
__iswxxx_deföed


48 
	#__iswxxx_deföed
 1

	)

50 
__BEGIN_NAMESPACE_C99


53 
	tw˘y≥_t
;

54 
	g__END_NAMESPACE_C99


56 #i‚de‡
_ISwbô


61 
	~<ídün.h
>

62 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


63 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

65 
	#_ISwbô
(
bô
) \

66 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

67 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

68 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

69 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

74 
	m__ISwuµî
 = 0,

75 
	m__ISwlowî
 = 1,

76 
	m__ISwÆpha
 = 2,

77 
	m__ISwdigô
 = 3,

78 
	m__ISwxdigô
 = 4,

79 
	m__ISw•a˚
 = 5,

80 
	m__ISw¥öt
 = 6,

81 
	m__ISwgøph
 = 7,

82 
	m__ISwbœnk
 = 8,

83 
	m__ISw˙ål
 = 9,

84 
	m__ISwpun˘
 = 10,

85 
	m__ISwÆnum
 = 11,

87 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

88 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

89 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

90 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

91 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

92 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

93 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

94 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

95 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

96 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

97 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

98 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

103 
__BEGIN_DECLS


105 
__BEGIN_NAMESPACE_C99


112 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

118 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

121 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

125 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

129 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

134 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

137 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

142 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

147 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

152 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

157 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

162 #ifde‡
__USE_ISOC99


163 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

172 
w˘y≥_t
 
	$w˘y≥
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

176 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

177 
__END_NAMESPACE_C99


184 
__BEGIN_NAMESPACE_C99


187 
__c⁄°
 
	t__öt32_t
 *
	tw˘øns_t
;

188 
__END_NAMESPACE_C99


189 #ifde‡
__USE_GNU


190 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

193 
__BEGIN_NAMESPACE_C99


195 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

199 
__END_NAMESPACE_C99


201 
__END_DECLS


208 #ifde‡
_WCTYPE_H


214 
__BEGIN_DECLS


216 
__BEGIN_NAMESPACE_C99


219 
w˘øns_t
 
	$w˘øns
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

222 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

223 
__END_NAMESPACE_C99


225 #ifde‡
__USE_XOPEN2K8


227 
	~<xloˇÀ.h
>

231 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

237 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

240 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

244 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

248 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

253 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

256 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

261 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

266 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

271 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

276 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

281 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

285 
w˘y≥_t
 
	$w˘y≥_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

286 
__THROW
;

290 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

291 
__THROW
;

299 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

302 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

306 
w˘øns_t
 
	$w˘øns_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

307 
__THROW
;

310 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

311 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

315 
__END_DECLS


	@
1
.
1
/usr/include
65
1132
arena.c
hooks.c
malloc.c
malloc.h
mallocbug.c
mcheck-init.c
mcheck.c
mcheck.h
memusage.c
memusagestat.c
morecore.c
mtrace.c
obstack.c
obstack.h
set-freeres.c
thread-freeres.c
tst-calloc.c
tst-malloc-usable.c
tst-malloc.c
tst-mallocfork.c
tst-mallocstate.c
tst-mallopt.c
tst-mcheck.c
tst-memalign.c
tst-mtrace.c
tst-obstack.c
tst-posix_memalign.c
tst-pvalloc.c
tst-realloc.c
tst-trim1.c
tst-valloc.c
../libio/libioP.h
../test-skeleton.c
../version.h
/usr/include/argp.h
/usr/include/assert.h
/usr/include/dlfcn.h
/usr/include/errno.h
/usr/include/error.h
/usr/include/fcntl.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/gnu-versions.h
/usr/include/inttypes.h
/usr/include/libintl.h
/usr/include/limits.h
/usr/include/paths.h
/usr/include/search.h
/usr/include/signal.h
/usr/include/stdint.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/unistd.h
/usr/include/alloca.h
/usr/include/ctype.h
/usr/include/libio.h
/usr/include/locale.h
/usr/include/time.h
/usr/include/xlocale.h
/usr/include/_G_config.h
/usr/include/endian.h
/usr/include/gconv.h
/usr/include/wchar.h
/usr/include/wctype.h
